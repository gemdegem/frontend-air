"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@moralisweb3";
exports.ids = ["vendor-chunks/@moralisweb3"];
exports.modules = {

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/MoralisNextApi/Modules.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/MoralisNextApi/Modules.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getModuleByName = exports.Module = void 0;\nvar evm_api_1 = __webpack_require__(/*! @moralisweb3/evm-api */ \"(ssr)/./node_modules/@moralisweb3/evm-api/lib/cjs/index.cjs\");\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar common_sol_utils_1 = __webpack_require__(/*! moralis/common-sol-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonSolUtils/index.cjs\");\nvar common_auth_utils_1 = __webpack_require__(/*! @moralisweb3/common-auth-utils */ \"(ssr)/./node_modules/@moralisweb3/common-auth-utils/lib/cjs/index.cjs\");\nvar auth_1 = __webpack_require__(/*! @moralisweb3/auth */ \"(ssr)/./node_modules/@moralisweb3/auth/lib/cjs/index.cjs\");\nvar sol_api_1 = __webpack_require__(/*! @moralisweb3/sol-api */ \"(ssr)/./node_modules/@moralisweb3/sol-api/lib/cjs/index.cjs\");\nvar Module = /** @class */ (function () {\n    function Module(moduleName, operations) {\n        this.moduleName = moduleName;\n        this.operations = operations;\n    }\n    Module.prototype.getOperationByName = function (operationName) {\n        var operation = this.operations.find(function (op) { return op.name === operationName; });\n        if (!operation) {\n            throw new Error(\"Operation \".concat(operationName, \" not found\"));\n        }\n        return operation;\n    };\n    Module.prototype.getRequestHandler = function (operation, core) {\n        var apiModule = core.getModule(this.moduleName);\n        var apiGroup = apiModule[operation.groupName];\n        if (!apiGroup) {\n            throw new Error(\"Operation \".concat(operation.name, \" has no group name in \").concat(this.moduleName));\n        }\n        var requestHandler = apiGroup[operation.name];\n        if (!requestHandler) {\n            throw new Error(\"Operation \".concat(operation.name, \" has no requestHandler in \").concat(this.moduleName, \".\").concat(apiGroup));\n        }\n        return requestHandler;\n    };\n    return Module;\n}());\nexports.Module = Module;\nvar modules = [\n    new Module(evm_api_1.EvmApi.moduleName, common_evm_utils_1.operationsV2All),\n    new Module(sol_api_1.SolApi.moduleName, common_sol_utils_1.operationsV2All),\n    new Module(auth_1.Auth.moduleName, common_auth_utils_1.operations),\n];\nfunction getModuleByName(moduleName) {\n    var module = modules.find(function (currentModule) { return currentModule.moduleName === moduleName; });\n    if (!module) {\n        throw new Error(\"Module \".concat(moduleName, \" not found\"));\n    }\n    return module;\n}\nexports.getModuleByName = getModuleByName;\n//# sourceMappingURL=Modules.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL01vcmFsaXNOZXh0QXBpL01vZHVsZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsY0FBYztBQUN4QyxnQkFBZ0IsbUJBQU8sQ0FBQyx5RkFBc0I7QUFDOUMseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCwwQkFBMEIsbUJBQU8sQ0FBQyw2R0FBZ0M7QUFDbEUsYUFBYSxtQkFBTyxDQUFDLG1GQUFtQjtBQUN4QyxnQkFBZ0IsbUJBQU8sQ0FBQyx5RkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELG1DQUFtQztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxpREFBaUQ7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL01vcmFsaXNOZXh0QXBpL01vZHVsZXMuanM/MTMyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TW9kdWxlQnlOYW1lID0gZXhwb3J0cy5Nb2R1bGUgPSB2b2lkIDA7XG52YXIgZXZtX2FwaV8xID0gcmVxdWlyZShcIkBtb3JhbGlzd2ViMy9ldm0tYXBpXCIpO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgY29tbW9uX3NvbF91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLXNvbC11dGlsc1wiKTtcbnZhciBjb21tb25fYXV0aF91dGlsc18xID0gcmVxdWlyZShcIkBtb3JhbGlzd2ViMy9jb21tb24tYXV0aC11dGlsc1wiKTtcbnZhciBhdXRoXzEgPSByZXF1aXJlKFwiQG1vcmFsaXN3ZWIzL2F1dGhcIik7XG52YXIgc29sX2FwaV8xID0gcmVxdWlyZShcIkBtb3JhbGlzd2ViMy9zb2wtYXBpXCIpO1xudmFyIE1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2R1bGUobW9kdWxlTmFtZSwgb3BlcmF0aW9ucykge1xuICAgICAgICB0aGlzLm1vZHVsZU5hbWUgPSBtb2R1bGVOYW1lO1xuICAgICAgICB0aGlzLm9wZXJhdGlvbnMgPSBvcGVyYXRpb25zO1xuICAgIH1cbiAgICBNb2R1bGUucHJvdG90eXBlLmdldE9wZXJhdGlvbkJ5TmFtZSA9IGZ1bmN0aW9uIChvcGVyYXRpb25OYW1lKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb24gPSB0aGlzLm9wZXJhdGlvbnMuZmluZChmdW5jdGlvbiAob3ApIHsgcmV0dXJuIG9wLm5hbWUgPT09IG9wZXJhdGlvbk5hbWU7IH0pO1xuICAgICAgICBpZiAoIW9wZXJhdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3BlcmF0aW9uIFwiLmNvbmNhdChvcGVyYXRpb25OYW1lLCBcIiBub3QgZm91bmRcIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRpb247XG4gICAgfTtcbiAgICBNb2R1bGUucHJvdG90eXBlLmdldFJlcXVlc3RIYW5kbGVyID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgY29yZSkge1xuICAgICAgICB2YXIgYXBpTW9kdWxlID0gY29yZS5nZXRNb2R1bGUodGhpcy5tb2R1bGVOYW1lKTtcbiAgICAgICAgdmFyIGFwaUdyb3VwID0gYXBpTW9kdWxlW29wZXJhdGlvbi5ncm91cE5hbWVdO1xuICAgICAgICBpZiAoIWFwaUdyb3VwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcGVyYXRpb24gXCIuY29uY2F0KG9wZXJhdGlvbi5uYW1lLCBcIiBoYXMgbm8gZ3JvdXAgbmFtZSBpbiBcIikuY29uY2F0KHRoaXMubW9kdWxlTmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXF1ZXN0SGFuZGxlciA9IGFwaUdyb3VwW29wZXJhdGlvbi5uYW1lXTtcbiAgICAgICAgaWYgKCFyZXF1ZXN0SGFuZGxlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3BlcmF0aW9uIFwiLmNvbmNhdChvcGVyYXRpb24ubmFtZSwgXCIgaGFzIG5vIHJlcXVlc3RIYW5kbGVyIGluIFwiKS5jb25jYXQodGhpcy5tb2R1bGVOYW1lLCBcIi5cIikuY29uY2F0KGFwaUdyb3VwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcXVlc3RIYW5kbGVyO1xuICAgIH07XG4gICAgcmV0dXJuIE1vZHVsZTtcbn0oKSk7XG5leHBvcnRzLk1vZHVsZSA9IE1vZHVsZTtcbnZhciBtb2R1bGVzID0gW1xuICAgIG5ldyBNb2R1bGUoZXZtX2FwaV8xLkV2bUFwaS5tb2R1bGVOYW1lLCBjb21tb25fZXZtX3V0aWxzXzEub3BlcmF0aW9uc1YyQWxsKSxcbiAgICBuZXcgTW9kdWxlKHNvbF9hcGlfMS5Tb2xBcGkubW9kdWxlTmFtZSwgY29tbW9uX3NvbF91dGlsc18xLm9wZXJhdGlvbnNWMkFsbCksXG4gICAgbmV3IE1vZHVsZShhdXRoXzEuQXV0aC5tb2R1bGVOYW1lLCBjb21tb25fYXV0aF91dGlsc18xLm9wZXJhdGlvbnMpLFxuXTtcbmZ1bmN0aW9uIGdldE1vZHVsZUJ5TmFtZShtb2R1bGVOYW1lKSB7XG4gICAgdmFyIG1vZHVsZSA9IG1vZHVsZXMuZmluZChmdW5jdGlvbiAoY3VycmVudE1vZHVsZSkgeyByZXR1cm4gY3VycmVudE1vZHVsZS5tb2R1bGVOYW1lID09PSBtb2R1bGVOYW1lOyB9KTtcbiAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb2R1bGUgXCIuY29uY2F0KG1vZHVsZU5hbWUsIFwiIG5vdCBmb3VuZFwiKSk7XG4gICAgfVxuICAgIHJldHVybiBtb2R1bGU7XG59XG5leHBvcnRzLmdldE1vZHVsZUJ5TmFtZSA9IGdldE1vZHVsZUJ5TmFtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vZHVsZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/MoralisNextApi/Modules.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/MoralisNextApi/MoralisNextApi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/MoralisNextApi/MoralisNextApi.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar common_core_1 = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar moralis_1 = __importDefault(__webpack_require__(/*! moralis */ \"(ssr)/./node_modules/moralis/lib/cjs/index.cjs\"));\nvar moralisNextAuthHandler_1 = __webpack_require__(/*! ../auth/moralisNextAuthHandler */ \"(ssr)/./node_modules/@moralisweb3/next/lib/auth/moralisNextAuthHandler.js\");\nvar serverLogger_1 = __webpack_require__(/*! ../serverLogger */ \"(ssr)/./node_modules/@moralisweb3/next/lib/serverLogger.js\");\nvar Modules_1 = __webpack_require__(/*! ./Modules */ \"(ssr)/./node_modules/@moralisweb3/next/lib/MoralisNextApi/Modules.js\");\nmoralis_1.default.Core.config.set('product', 'NextJS SDK');\nvar FALLBACK_ERROR_MESSAGE = 'Internal Server Error';\nfunction MoralisNextHandler(_a) {\n    var _b;\n    var req = _a.req, res = _a.res, authentication = _a.authentication, core = _a.core;\n    return __awaiter(this, void 0, void 0, function () {\n        var _c, moduleName, operationName, module_1, operation, deserialisedRequest, requestHandler, response, error_1, statusCode, message;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _c = req.query.moralis, moduleName = _c[0], operationName = _c[1];\n                    _d.label = 1;\n                case 1:\n                    _d.trys.push([1, 6, , 7]);\n                    module_1 = (0, Modules_1.getModuleByName)(moduleName);\n                    operation = module_1.getOperationByName(operationName);\n                    deserialisedRequest = operation.deserializeRequest(req.body, core);\n                    requestHandler = module_1.getRequestHandler(operation, core);\n                    if (!requestHandler) {\n                        return [2 /*return*/, res.status(400).json({ error: \"Operation \".concat(moduleName, \"/\").concat(operationName, \" is not supported\") })];\n                    }\n                    response = void 0;\n                    if (!moralisNextAuthHandler_1.authOperationNames.includes(operationName)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, (0, moralisNextAuthHandler_1.moralisNextAuthHandler)({ req: req, res: res, authentication: authentication, requestHandler: requestHandler, operation: operation, core: core })];\n                case 2:\n                    response = _d.sent();\n                    return [3 /*break*/, 5];\n                case 3: return [4 /*yield*/, requestHandler(deserialisedRequest)];\n                case 4:\n                    response = _d.sent();\n                    _d.label = 5;\n                case 5: return [2 /*return*/, res.status(200).json(response)];\n                case 6:\n                    error_1 = _d.sent();\n                    if (!(error_1 instanceof Error)) {\n                        return [2 /*return*/, res.status(500).json({ error: FALLBACK_ERROR_MESSAGE })];\n                    }\n                    statusCode = 500;\n                    message = FALLBACK_ERROR_MESSAGE;\n                    if ((0, common_core_1.isMoralisError)(error_1) && typeof ((_b = error_1.details) === null || _b === void 0 ? void 0 : _b.status) === 'number') {\n                        statusCode = error_1.details.status;\n                        message = error_1.message;\n                    }\n                    serverLogger_1.serverLogger.error(\"Unknown error in MoralisNextApi: \".concat(error_1.message), { error: error_1 });\n                    return [2 /*return*/, res.status(statusCode).json({ error: message })];\n                case 7: return [2 /*return*/];\n            }\n        });\n    });\n}\nvar MoralisNextApi = function (_a) {\n    var authentication = _a.authentication, config = __rest(_a, [\"authentication\"]);\n    if (!moralis_1.default.Core.isStarted) {\n        moralis_1.default.start(config);\n    }\n    return function (req, res) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {\n        return [2 /*return*/, MoralisNextHandler({ req: req, res: res, authentication: authentication, core: moralis_1.default.Core })];\n    }); }); };\n};\nexports[\"default\"] = MoralisNextApi;\n//# sourceMappingURL=MoralisNextApi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/MoralisNextApi/MoralisNextApi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/MoralisNextApi/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/MoralisNextApi/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MoralisNextApi = void 0;\nvar MoralisNextApi_1 = __webpack_require__(/*! ./MoralisNextApi */ \"(ssr)/./node_modules/@moralisweb3/next/lib/MoralisNextApi/MoralisNextApi.js\");\nObject.defineProperty(exports, \"MoralisNextApi\", ({ enumerable: true, get: function () { return __importDefault(MoralisNextApi_1).default; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL01vcmFsaXNOZXh0QXBpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCLHVCQUF1QixtQkFBTyxDQUFDLHFHQUFrQjtBQUNqRCxrREFBaUQsRUFBRSxxQ0FBcUMscURBQXFELEVBQUM7QUFDOUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9Nb3JhbGlzTmV4dEFwaS9pbmRleC5qcz9kY2I1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb3JhbGlzTmV4dEFwaSA9IHZvaWQgMDtcbnZhciBNb3JhbGlzTmV4dEFwaV8xID0gcmVxdWlyZShcIi4vTW9yYWxpc05leHRBcGlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNb3JhbGlzTmV4dEFwaVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX19pbXBvcnREZWZhdWx0KE1vcmFsaXNOZXh0QXBpXzEpLmRlZmF1bHQ7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/MoralisNextApi/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/auth/MoralisNextAuthProvider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/auth/MoralisNextAuthProvider.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar api_utils_1 = __webpack_require__(/*! @moralisweb3/api-utils */ \"(ssr)/./node_modules/@moralisweb3/api-utils/lib/cjs/index.cjs\");\nvar common_auth_utils_1 = __webpack_require__(/*! @moralisweb3/common-auth-utils */ \"(ssr)/./node_modules/@moralisweb3/common-auth-utils/lib/cjs/index.cjs\");\nvar credentials_1 = __importDefault(__webpack_require__(/*! next-auth/providers/credentials */ \"(ssr)/./node_modules/next-auth/providers/credentials.js\"));\nvar moralis_1 = __importDefault(__webpack_require__(/*! moralis */ \"(ssr)/./node_modules/moralis/lib/cjs/index.cjs\"));\nvar serverLogger_1 = __webpack_require__(/*! ../serverLogger */ \"(ssr)/./node_modules/@moralisweb3/next/lib/serverLogger.js\");\nvar MoralisNextAuthProvider = function () {\n    /**\n     * Configuring default CredentialsProvider from 'next-auth'\n     * with required steps and data for verifying signed message\n     */\n    return (0, credentials_1.default)({\n        name: 'MoralisAuth',\n        id: 'moralis-auth',\n        /**\n         * Credentials is required data for authentication\n         * Received from Moralis.Auth.requestMessage()\n         * Provided via signin()\n         */\n        credentials: {\n            message: {\n                label: 'Message',\n                type: 'text',\n                placeholder: '0x0',\n            },\n            signature: {\n                label: 'Signature',\n                type: 'text',\n                placeholder: '0x0',\n            },\n            network: {\n                label: 'Network',\n                type: 'text',\n                placeholder: 'Evm',\n            },\n            /**\n             * Some extra information keeping in a session.\n             */\n            payload: {\n                label: 'Payload',\n                type: 'text',\n                placeholder: 'Payload',\n            },\n        },\n        authorize: function (credentials) {\n            return __awaiter(this, void 0, void 0, function () {\n                var _a, message, signature, _b, network, _c, payload, nextAuthUrl, baseUrl, user, _d, error_1;\n                return __generator(this, function (_e) {\n                    switch (_e.label) {\n                        case 0:\n                            _e.trys.push([0, 9, , 10]);\n                            _a = credentials, message = _a.message, signature = _a.signature, _b = _a.network, network = _b === void 0 ? 'Evm' : _b, _c = _a.payload, payload = _c === void 0 ? null : _c;\n                            nextAuthUrl = process.env.NEXTAUTH_URL;\n                            if (!nextAuthUrl) {\n                                throw new Error('NEXTAUTH_URL missing');\n                            }\n                            baseUrl = moralis_1.default.Auth.baseUrl;\n                            user = void 0;\n                            _d = network;\n                            switch (_d) {\n                                case 'Evm': return [3 /*break*/, 1];\n                                case 'Solana': return [3 /*break*/, 3];\n                                case 'Aptos': return [3 /*break*/, 5];\n                            }\n                            return [3 /*break*/, 7];\n                        case 1: return [4 /*yield*/, new api_utils_1.OperationResolver(common_auth_utils_1.verifyChallengeEvmOperation, baseUrl, moralis_1.default.Core).fetch({\n                                message: message,\n                                signature: signature,\n                            })];\n                        case 2:\n                            user = (_e.sent()).raw;\n                            return [3 /*break*/, 8];\n                        case 3: return [4 /*yield*/, new api_utils_1.OperationResolver(common_auth_utils_1.verifyChallengeSolanaOperation, baseUrl, moralis_1.default.Core).fetch({\n                                message: message,\n                                signature: signature,\n                            })];\n                        case 4:\n                            user = (_e.sent()).raw;\n                            return [3 /*break*/, 8];\n                        case 5: return [4 /*yield*/, new api_utils_1.OperationResolver(common_auth_utils_1.verifyChallengeAptosOperation, baseUrl, moralis_1.default.Core).fetch({\n                                message: message,\n                                signature: signature,\n                            })];\n                        case 6:\n                            user = (_e.sent()).raw;\n                            return [3 /*break*/, 8];\n                        case 7: throw new Error(\"The \".concat(network, \" networkType is not supported for authentication\"));\n                        case 8:\n                            if (user.uri !== nextAuthUrl) {\n                                return [2 /*return*/, null];\n                            }\n                            /**\n                             * Defining and returning user profile\n                             */\n                            return [2 /*return*/, __assign(__assign({}, user), { payload: payload })];\n                        case 9:\n                            error_1 = _e.sent();\n                            serverLogger_1.serverLogger.error(\"Unknown error in MoralisNextAuthProvider authorize \".concat(error_1.message), { error: error_1 });\n                            return [2 /*return*/, null];\n                        case 10: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n    });\n};\nexports[\"default\"] = MoralisNextAuthProvider;\n//# sourceMappingURL=MoralisNextAuthProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/auth/MoralisNextAuthProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/auth/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/auth/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MoralisNextAuthProvider = void 0;\nvar MoralisNextAuthProvider_1 = __webpack_require__(/*! ./MoralisNextAuthProvider */ \"(ssr)/./node_modules/@moralisweb3/next/lib/auth/MoralisNextAuthProvider.js\");\nObject.defineProperty(exports, \"MoralisNextAuthProvider\", ({ enumerable: true, get: function () { return __importDefault(MoralisNextAuthProvider_1).default; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2F1dGgvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0IsZ0NBQWdDLG1CQUFPLENBQUMsNkdBQTJCO0FBQ25FLDJEQUEwRCxFQUFFLHFDQUFxQyw4REFBOEQsRUFBQztBQUNoSyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2F1dGgvaW5kZXguanM/NzEwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9yYWxpc05leHRBdXRoUHJvdmlkZXIgPSB2b2lkIDA7XG52YXIgTW9yYWxpc05leHRBdXRoUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL01vcmFsaXNOZXh0QXV0aFByb3ZpZGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTW9yYWxpc05leHRBdXRoUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9faW1wb3J0RGVmYXVsdChNb3JhbGlzTmV4dEF1dGhQcm92aWRlcl8xKS5kZWZhdWx0OyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/auth/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/auth/moralisNextAuthHandler.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/auth/moralisNextAuthHandler.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.moralisNextAuthHandler = exports.authOperationNames = void 0;\nexports.authOperationNames = [\n    'requestChallengeEvm',\n    'requestChallengeSolana',\n    'requestChallengeAptos',\n    'verifyChallengeEvm',\n    'verifyChallengeSolana',\n    'verifyChallengeAptos',\n];\nvar moralisNextAuthHandler = function (_a) {\n    var req = _a.req, authentication = _a.authentication, requestHandler = _a.requestHandler, operation = _a.operation, core = _a.core;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var operationName, deserlialisedRequest;\n        return __generator(this, function (_b) {\n            operationName = operation.name;\n            if (!authentication) {\n                throw new Error(\"Error running the '\".concat(operationName, \"' operation. No authentication config provided in 'pages/api/moralis/[...moralis].ts'\"));\n            }\n            deserlialisedRequest = operation.deserializeRequest(req.body, core);\n            switch (operationName) {\n                case 'requestChallengeEvm':\n                case 'requestChallengeSolana':\n                case 'requestChallengeAptos':\n                    return [2 /*return*/, requestHandler(__assign(__assign({}, deserlialisedRequest), authentication))];\n                case 'verifyChallengeEvm':\n                case 'verifyChallengeSolana':\n                case 'verifyChallengeAptos':\n                    return [2 /*return*/, requestHandler(deserlialisedRequest)];\n                default:\n                    throw new Error(\"\".concat(operationName, \" is not supported authentication operation\"));\n            }\n            return [2 /*return*/];\n        });\n    });\n};\nexports.moralisNextAuthHandler = moralisNextAuthHandler;\n//# sourceMappingURL=moralisNextAuthHandler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2F1dGgvbW9yYWxpc05leHRBdXRoSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsY0FBYyw2QkFBNkIsMEJBQTBCLGNBQWMscUJBQXFCO0FBQ3hHLGlCQUFpQixvREFBb0QscUVBQXFFLGNBQWM7QUFDeEosdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsbUNBQW1DLFNBQVM7QUFDNUMsbUNBQW1DLFdBQVcsVUFBVTtBQUN4RCwwQ0FBMEMsY0FBYztBQUN4RDtBQUNBLDhHQUE4RyxPQUFPO0FBQ3JILGlGQUFpRixpQkFBaUI7QUFDbEcseURBQXlELGdCQUFnQixRQUFRO0FBQ2pGLCtDQUErQyxnQkFBZ0IsZ0JBQWdCO0FBQy9FO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSxVQUFVLFlBQVksYUFBYSxTQUFTLFVBQVU7QUFDdEQsb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsR0FBRywwQkFBMEI7QUFDM0QsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2F1dGgvbW9yYWxpc05leHRBdXRoSGFuZGxlci5qcz9mNjExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubW9yYWxpc05leHRBdXRoSGFuZGxlciA9IGV4cG9ydHMuYXV0aE9wZXJhdGlvbk5hbWVzID0gdm9pZCAwO1xuZXhwb3J0cy5hdXRoT3BlcmF0aW9uTmFtZXMgPSBbXG4gICAgJ3JlcXVlc3RDaGFsbGVuZ2VFdm0nLFxuICAgICdyZXF1ZXN0Q2hhbGxlbmdlU29sYW5hJyxcbiAgICAncmVxdWVzdENoYWxsZW5nZUFwdG9zJyxcbiAgICAndmVyaWZ5Q2hhbGxlbmdlRXZtJyxcbiAgICAndmVyaWZ5Q2hhbGxlbmdlU29sYW5hJyxcbiAgICAndmVyaWZ5Q2hhbGxlbmdlQXB0b3MnLFxuXTtcbnZhciBtb3JhbGlzTmV4dEF1dGhIYW5kbGVyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHJlcSA9IF9hLnJlcSwgYXV0aGVudGljYXRpb24gPSBfYS5hdXRoZW50aWNhdGlvbiwgcmVxdWVzdEhhbmRsZXIgPSBfYS5yZXF1ZXN0SGFuZGxlciwgb3BlcmF0aW9uID0gX2Eub3BlcmF0aW9uLCBjb3JlID0gX2EuY29yZTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbk5hbWUsIGRlc2VybGlhbGlzZWRSZXF1ZXN0O1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lID0gb3BlcmF0aW9uLm5hbWU7XG4gICAgICAgICAgICBpZiAoIWF1dGhlbnRpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgcnVubmluZyB0aGUgJ1wiLmNvbmNhdChvcGVyYXRpb25OYW1lLCBcIicgb3BlcmF0aW9uLiBObyBhdXRoZW50aWNhdGlvbiBjb25maWcgcHJvdmlkZWQgaW4gJ3BhZ2VzL2FwaS9tb3JhbGlzL1suLi5tb3JhbGlzXS50cydcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzZXJsaWFsaXNlZFJlcXVlc3QgPSBvcGVyYXRpb24uZGVzZXJpYWxpemVSZXF1ZXN0KHJlcS5ib2R5LCBjb3JlKTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BlcmF0aW9uTmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlcXVlc3RDaGFsbGVuZ2VFdm0nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3JlcXVlc3RDaGFsbGVuZ2VTb2xhbmEnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3JlcXVlc3RDaGFsbGVuZ2VBcHRvcyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXF1ZXN0SGFuZGxlcihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGVzZXJsaWFsaXNlZFJlcXVlc3QpLCBhdXRoZW50aWNhdGlvbikpXTtcbiAgICAgICAgICAgICAgICBjYXNlICd2ZXJpZnlDaGFsbGVuZ2VFdm0nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZlcmlmeUNoYWxsZW5nZVNvbGFuYSc6XG4gICAgICAgICAgICAgICAgY2FzZSAndmVyaWZ5Q2hhbGxlbmdlQXB0b3MnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVxdWVzdEhhbmRsZXIoZGVzZXJsaWFsaXNlZFJlcXVlc3QpXTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQob3BlcmF0aW9uTmFtZSwgXCIgaXMgbm90IHN1cHBvcnRlZCBhdXRoZW50aWNhdGlvbiBvcGVyYXRpb25cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5leHBvcnRzLm1vcmFsaXNOZXh0QXV0aEhhbmRsZXIgPSBtb3JhbGlzTmV4dEF1dGhIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9yYWxpc05leHRBdXRoSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/auth/moralisNextAuthHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/auth/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./useAuthRequestChallengeEvm */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeEvm.js\"), exports);\n__exportStar(__webpack_require__(/*! ./useAuthRequestChallengeSolana */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeSolana.js\"), exports);\n__exportStar(__webpack_require__(/*! ./useAuthRequestChallengeAptos */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeAptos.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2F1dGgvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHlIQUE4QjtBQUNuRCxhQUFhLG1CQUFPLENBQUMsK0hBQWlDO0FBQ3RELGFBQWEsbUJBQU8sQ0FBQyw2SEFBZ0M7QUFDckQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9hdXRoL2luZGV4LmpzPzc0ODgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91c2VBdXRoUmVxdWVzdENoYWxsZW5nZUV2bVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VTb2xhbmFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3VzZUF1dGhSZXF1ZXN0Q2hhbGxlbmdlQXB0b3NcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeAptos.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeAptos.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useAuthRequestChallengeAptos = void 0;\nvar common_auth_utils_1 = __webpack_require__(/*! @moralisweb3/common-auth-utils */ \"(ssr)/./node_modules/@moralisweb3/common-auth-utils/lib/cjs/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useAuthRequestChallengeAptos = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'auth/requestChallengeAptos',\n        operation: common_auth_utils_1.requestChallengeAptosOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        challenge: data,\n        error: error,\n        requestChallengeAsync: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useAuthRequestChallengeAptos = useAuthRequestChallengeAptos;\n//# sourceMappingURL=useAuthRequestChallengeAptos.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2F1dGgvdXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VBcHRvcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0M7QUFDcEMsMEJBQTBCLG1CQUFPLENBQUMsNkdBQWdDO0FBQ2xFLGtCQUFrQixtQkFBTyxDQUFDLHlGQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9hdXRoL3VzZUF1dGhSZXF1ZXN0Q2hhbGxlbmdlQXB0b3MuanM/YzMxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VBcHRvcyA9IHZvaWQgMDtcbnZhciBjb21tb25fYXV0aF91dGlsc18xID0gcmVxdWlyZShcIkBtb3JhbGlzd2ViMy9jb21tb24tYXV0aC11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VBcHRvcyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2F1dGgvcmVxdWVzdENoYWxsZW5nZUFwdG9zJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fYXV0aF91dGlsc18xLnJlcXVlc3RDaGFsbGVuZ2VBcHRvc09wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2hhbGxlbmdlOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIHJlcXVlc3RDaGFsbGVuZ2VBc3luYzogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VBcHRvcyA9IHVzZUF1dGhSZXF1ZXN0Q2hhbGxlbmdlQXB0b3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VBdXRoUmVxdWVzdENoYWxsZW5nZUFwdG9zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeAptos.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeEvm.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeEvm.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useAuthRequestChallengeEvm = void 0;\nvar common_auth_utils_1 = __webpack_require__(/*! @moralisweb3/common-auth-utils */ \"(ssr)/./node_modules/@moralisweb3/common-auth-utils/lib/cjs/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useAuthRequestChallengeEvm = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'auth/requestChallengeEvm',\n        operation: common_auth_utils_1.requestChallengeEvmOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        challenge: data,\n        error: error,\n        requestChallengeAsync: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useAuthRequestChallengeEvm = useAuthRequestChallengeEvm;\n//# sourceMappingURL=useAuthRequestChallengeEvm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2F1dGgvdXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VFdm0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDO0FBQ2xDLDBCQUEwQixtQkFBTyxDQUFDLDZHQUFnQztBQUNsRSxrQkFBa0IsbUJBQU8sQ0FBQyx5RkFBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvYXV0aC91c2VBdXRoUmVxdWVzdENoYWxsZW5nZUV2bS5qcz8zZDVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VBdXRoUmVxdWVzdENoYWxsZW5nZUV2bSA9IHZvaWQgMDtcbnZhciBjb21tb25fYXV0aF91dGlsc18xID0gcmVxdWlyZShcIkBtb3JhbGlzd2ViMy9jb21tb24tYXV0aC11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VFdm0gPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdhdXRoL3JlcXVlc3RDaGFsbGVuZ2VFdm0nLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9hdXRoX3V0aWxzXzEucmVxdWVzdENoYWxsZW5nZUV2bU9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2hhbGxlbmdlOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIHJlcXVlc3RDaGFsbGVuZ2VBc3luYzogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VFdm0gPSB1c2VBdXRoUmVxdWVzdENoYWxsZW5nZUV2bTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUF1dGhSZXF1ZXN0Q2hhbGxlbmdlRXZtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeEvm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeSolana.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeSolana.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useAuthRequestChallengeSolana = void 0;\nvar common_auth_utils_1 = __webpack_require__(/*! @moralisweb3/common-auth-utils */ \"(ssr)/./node_modules/@moralisweb3/common-auth-utils/lib/cjs/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useAuthRequestChallengeSolana = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'auth/requestChallengeSolana',\n        operation: common_auth_utils_1.requestChallengeSolanaOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        challenge: data,\n        error: error,\n        requestChallengeAsync: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useAuthRequestChallengeSolana = useAuthRequestChallengeSolana;\n//# sourceMappingURL=useAuthRequestChallengeSolana.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2F1dGgvdXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VTb2xhbmEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUNBQXFDO0FBQ3JDLDBCQUEwQixtQkFBTyxDQUFDLDZHQUFnQztBQUNsRSxrQkFBa0IsbUJBQU8sQ0FBQyx5RkFBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvYXV0aC91c2VBdXRoUmVxdWVzdENoYWxsZW5nZVNvbGFuYS5qcz83NmQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VBdXRoUmVxdWVzdENoYWxsZW5nZVNvbGFuYSA9IHZvaWQgMDtcbnZhciBjb21tb25fYXV0aF91dGlsc18xID0gcmVxdWlyZShcIkBtb3JhbGlzd2ViMy9jb21tb24tYXV0aC11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VTb2xhbmEgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdhdXRoL3JlcXVlc3RDaGFsbGVuZ2VTb2xhbmEnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9hdXRoX3V0aWxzXzEucmVxdWVzdENoYWxsZW5nZVNvbGFuYU9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2hhbGxlbmdlOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIHJlcXVlc3RDaGFsbGVuZ2VBc3luYzogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlQXV0aFJlcXVlc3RDaGFsbGVuZ2VTb2xhbmEgPSB1c2VBdXRoUmVxdWVzdENoYWxsZW5nZVNvbGFuYTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUF1dGhSZXF1ZXN0Q2hhbGxlbmdlU29sYW5hLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/useAuthRequestChallengeSolana.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/balance/useEvmNativeBalance.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/balance/useEvmNativeBalance.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNativeBalance = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNativeBalance = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getNativeBalance',\n        operation: common_evm_utils_1.getNativeBalanceOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNativeBalance = useEvmNativeBalance;\n//# sourceMappingURL=useEvmNativeBalance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvYmFsYW5jZS91c2VFdm1OYXRpdmVCYWxhbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL2JhbGFuY2UvdXNlRXZtTmF0aXZlQmFsYW5jZS5qcz9jNGQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1OYXRpdmVCYWxhbmNlID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bU5hdGl2ZUJhbGFuY2UgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0TmF0aXZlQmFsYW5jZScsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldE5hdGl2ZUJhbGFuY2VPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZUV2bU5hdGl2ZUJhbGFuY2UgPSB1c2VFdm1OYXRpdmVCYWxhbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtTmF0aXZlQmFsYW5jZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/balance/useEvmNativeBalance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/balance/useEvmNativeBalancesForAddresses.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/balance/useEvmNativeBalancesForAddresses.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNativeBalancesForAddresses = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNativeBalancesForAddresses = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getNativeBalancesForAddresses',\n        operation: common_evm_utils_1.getNativeBalancesForAddressesOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNativeBalancesForAddresses = useEvmNativeBalancesForAddresses;\n//# sourceMappingURL=useEvmNativeBalancesForAddresses.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvYmFsYW5jZS91c2VFdm1OYXRpdmVCYWxhbmNlc0ZvckFkZHJlc3Nlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3Q0FBd0M7QUFDeEMseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC9iYWxhbmNlL3VzZUV2bU5hdGl2ZUJhbGFuY2VzRm9yQWRkcmVzc2VzLmpzPzk2OGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bU5hdGl2ZUJhbGFuY2VzRm9yQWRkcmVzc2VzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bU5hdGl2ZUJhbGFuY2VzRm9yQWRkcmVzc2VzID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2dldE5hdGl2ZUJhbGFuY2VzRm9yQWRkcmVzc2VzJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0TmF0aXZlQmFsYW5jZXNGb3JBZGRyZXNzZXNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZUV2bU5hdGl2ZUJhbGFuY2VzRm9yQWRkcmVzc2VzID0gdXNlRXZtTmF0aXZlQmFsYW5jZXNGb3JBZGRyZXNzZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1OYXRpdmVCYWxhbmNlc0ZvckFkZHJlc3Nlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/balance/useEvmNativeBalancesForAddresses.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/block/useEvmBlock.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/block/useEvmBlock.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmBlock = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmBlock = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getBlock',\n        operation: common_evm_utils_1.getBlockOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmBlock = useEvmBlock;\n//# sourceMappingURL=useEvmBlock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvYmxvY2svdXNlRXZtQmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvYmxvY2svdXNlRXZtQmxvY2suanM/YmJjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtQmxvY2sgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtQmxvY2sgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0QmxvY2snLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRCbG9ja09wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtQmxvY2sgPSB1c2VFdm1CbG9jaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bUJsb2NrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/block/useEvmBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/block/useEvmDateToBlock.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/block/useEvmDateToBlock.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmDateToBlock = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmDateToBlock = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getDateToBlock',\n        operation: common_evm_utils_1.getDateToBlockOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmDateToBlock = useEvmDateToBlock;\n//# sourceMappingURL=useEvmDateToBlock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvYmxvY2svdXNlRXZtRGF0ZVRvQmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvYmxvY2svdXNlRXZtRGF0ZVRvQmxvY2suanM/ODQ3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtRGF0ZVRvQmxvY2sgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtRGF0ZVRvQmxvY2sgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0RGF0ZVRvQmxvY2snLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXREYXRlVG9CbG9ja09wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtRGF0ZVRvQmxvY2sgPSB1c2VFdm1EYXRlVG9CbG9jaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bURhdGVUb0Jsb2NrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/block/useEvmDateToBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/defi/useEvmPairAddress.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/defi/useEvmPairAddress.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmPairAddress = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmPairAddress = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getPairAddress',\n        operation: common_evm_utils_1.getPairAddressOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmPairAddress = useEvmPairAddress;\n//# sourceMappingURL=useEvmPairAddress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvZGVmaS91c2VFdm1QYWlyQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC9kZWZpL3VzZUV2bVBhaXJBZGRyZXNzLmpzP2ZmZmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bVBhaXJBZGRyZXNzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bVBhaXJBZGRyZXNzID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2dldFBhaXJBZGRyZXNzJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0UGFpckFkZHJlc3NPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZUV2bVBhaXJBZGRyZXNzID0gdXNlRXZtUGFpckFkZHJlc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1QYWlyQWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/defi/useEvmPairAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/defi/useEvmPairReserves.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/defi/useEvmPairReserves.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmPairReserves = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmPairReserves = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getPairReserves',\n        operation: common_evm_utils_1.getPairReservesOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmPairReserves = useEvmPairReserves;\n//# sourceMappingURL=useEvmPairReserves.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvZGVmaS91c2VFdm1QYWlyUmVzZXJ2ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvZGVmaS91c2VFdm1QYWlyUmVzZXJ2ZXMuanM/YzNhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtUGFpclJlc2VydmVzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bVBhaXJSZXNlcnZlcyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRQYWlyUmVzZXJ2ZXMnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRQYWlyUmVzZXJ2ZXNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZUV2bVBhaXJSZXNlcnZlcyA9IHVzZUV2bVBhaXJSZXNlcnZlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bVBhaXJSZXNlcnZlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/defi/useEvmPairReserves.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/events/useEvmContractEvents.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/events/useEvmContractEvents.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmContractEvents = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmContractEvents = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getContractEvents',\n        operation: common_evm_utils_1.getContractEventsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmContractEvents = useEvmContractEvents;\n//# sourceMappingURL=useEvmContractEvents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvZXZlbnRzL3VzZUV2bUNvbnRyYWN0RXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1Qix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL2V2ZW50cy91c2VFdm1Db250cmFjdEV2ZW50cy5qcz8zMjZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1Db250cmFjdEV2ZW50cyA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1Db250cmFjdEV2ZW50cyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRDb250cmFjdEV2ZW50cycsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldENvbnRyYWN0RXZlbnRzT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1Db250cmFjdEV2ZW50cyA9IHVzZUV2bUNvbnRyYWN0RXZlbnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtQ29udHJhY3RFdmVudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/events/useEvmContractEvents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/events/useEvmContractLogs.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/events/useEvmContractLogs.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmContractLogs = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmContractLogs = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getContractLogs',\n        operation: common_evm_utils_1.getContractLogsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmContractLogs = useEvmContractLogs;\n//# sourceMappingURL=useEvmContractLogs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvZXZlbnRzL3VzZUV2bUNvbnRyYWN0TG9ncy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL2V2ZW50cy91c2VFdm1Db250cmFjdExvZ3MuanM/ZTA4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtQ29udHJhY3RMb2dzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bUNvbnRyYWN0TG9ncyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlclBhZ2luYXRlZCkoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRDb250cmFjdExvZ3MnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRDb250cmFjdExvZ3NPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1Db250cmFjdExvZ3MgPSB1c2VFdm1Db250cmFjdExvZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1Db250cmFjdExvZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/events/useEvmContractLogs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./utils/useEvmEndpointWeights */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmEndpointWeights.js\"), exports);\n__exportStar(__webpack_require__(/*! ./block/useEvmBlock */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/block/useEvmBlock.js\"), exports);\n__exportStar(__webpack_require__(/*! ./events/useEvmContractEvents */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/events/useEvmContractEvents.js\"), exports);\n__exportStar(__webpack_require__(/*! ./events/useEvmContractLogs */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/events/useEvmContractLogs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmContractNFTs */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmContractNFTs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./block/useEvmDateToBlock */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/block/useEvmDateToBlock.js\"), exports);\n__exportStar(__webpack_require__(/*! ./transaction/useEvmInternalTransactions */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmInternalTransactions.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmMultipleNFTs */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmMultipleNFTs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./balance/useEvmNativeBalance */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/balance/useEvmNativeBalance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./balance/useEvmNativeBalancesForAddresses */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/balance/useEvmNativeBalancesForAddresses.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTContractMetadata */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTContractMetadata.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTContractTransfers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTContractTransfers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTLowestPrice */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTLowestPrice.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTMetadata */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTMetadata.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTOwners */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTOwners.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTTokenIdOwners */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTokenIdOwners.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTTrades */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTrades.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTTransfersByBlock */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfersByBlock.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTTransfersFromToBlock */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfersFromToBlock.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmNFTTransfers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./defi/useEvmPairAddress */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/defi/useEvmPairAddress.js\"), exports);\n__exportStar(__webpack_require__(/*! ./defi/useEvmPairReserves */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/defi/useEvmPairReserves.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token/useEvmTokenAllowance */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenAllowance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token/useEvmTokenMetadataBySymbol */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenMetadataBySymbol.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token/useEvmTokenMetadata */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenMetadata.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token/useEvmTokenPrice */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenPrice.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token/useEvmTokenTransfers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenTransfers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./transaction/useEvmTransaction */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmTransaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./transaction/useEvmTransactionVerbose */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmTransactionVerbose.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmWalletNFTCollections */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTCollections.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmWalletNFTs */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmWalletNFTTransfers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTTransfers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token/useEvmWalletTokenBalances */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmWalletTokenBalances.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token/useEvmWalletTokenTransfers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmWalletTokenTransfers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./transaction/useEvmWalletTransactions */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmWalletTransactions.js\"), exports);\n__exportStar(__webpack_require__(/*! ./transaction/useEvmWalletTransactionsVerbose */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmWalletTransactionsVerbose.js\"), exports);\n__exportStar(__webpack_require__(/*! ./resolve/useEvmResolveAddress */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveAddress.js\"), exports);\n__exportStar(__webpack_require__(/*! ./resolve/useEvmResolveDomain */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveDomain.js\"), exports);\n__exportStar(__webpack_require__(/*! ./resolve/useEvmResolveENSDomain */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveENSDomain.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmReSyncMetadata */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmReSyncMetadata.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/useEvmRunContractFunction */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmRunContractFunction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useEvmSyncNFTContract */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmSyncNFTContract.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ipfs/useEvmUploadFolder */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/ipfs/useEvmUploadFolder.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/useEvmWeb3ApiVersion */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmWeb3ApiVersion.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHVJQUErQjtBQUNwRCxhQUFhLG1CQUFPLENBQUMsbUhBQXFCO0FBQzFDLGFBQWEsbUJBQU8sQ0FBQyx1SUFBK0I7QUFDcEQsYUFBYSxtQkFBTyxDQUFDLG1JQUE2QjtBQUNsRCxhQUFhLG1CQUFPLENBQUMsNkhBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQywrSEFBMkI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLDZKQUEwQztBQUMvRCxhQUFhLG1CQUFPLENBQUMsNkhBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyx1SUFBK0I7QUFDcEQsYUFBYSxtQkFBTyxDQUFDLGlLQUE0QztBQUNqRSxhQUFhLG1CQUFPLENBQUMsMklBQWlDO0FBQ3RELGFBQWEsbUJBQU8sQ0FBQyw2SUFBa0M7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLGlJQUE0QjtBQUNqRCxhQUFhLG1CQUFPLENBQUMsMkhBQXlCO0FBQzlDLGFBQWEsbUJBQU8sQ0FBQyx1SEFBdUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLHFJQUE4QjtBQUNuRCxhQUFhLG1CQUFPLENBQUMsdUhBQXVCO0FBQzVDLGFBQWEsbUJBQU8sQ0FBQywySUFBaUM7QUFDdEQsYUFBYSxtQkFBTyxDQUFDLG1KQUFxQztBQUMxRCxhQUFhLG1CQUFPLENBQUMsNkhBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyw2SEFBMEI7QUFDL0MsYUFBYSxtQkFBTyxDQUFDLCtIQUEyQjtBQUNoRCxhQUFhLG1CQUFPLENBQUMscUlBQThCO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQyxtSkFBcUM7QUFDMUQsYUFBYSxtQkFBTyxDQUFDLG1JQUE2QjtBQUNsRCxhQUFhLG1CQUFPLENBQUMsNkhBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyxxSUFBOEI7QUFDbkQsYUFBYSxtQkFBTyxDQUFDLDJJQUFpQztBQUN0RCxhQUFhLG1CQUFPLENBQUMseUpBQXdDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw2SUFBa0M7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLHlIQUF3QjtBQUM3QyxhQUFhLG1CQUFPLENBQUMseUlBQWdDO0FBQ3JELGFBQWEsbUJBQU8sQ0FBQywrSUFBbUM7QUFDeEQsYUFBYSxtQkFBTyxDQUFDLGlKQUFvQztBQUN6RCxhQUFhLG1CQUFPLENBQUMseUpBQXdDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyx1S0FBK0M7QUFDcEUsYUFBYSxtQkFBTyxDQUFDLHlJQUFnQztBQUNyRCxhQUFhLG1CQUFPLENBQUMsdUlBQStCO0FBQ3BELGFBQWEsbUJBQU8sQ0FBQyw2SUFBa0M7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLGlJQUE0QjtBQUNqRCxhQUFhLG1CQUFPLENBQUMsK0lBQW1DO0FBQ3hELGFBQWEsbUJBQU8sQ0FBQyxtSUFBNkI7QUFDbEQsYUFBYSxtQkFBTyxDQUFDLCtIQUEyQjtBQUNoRCxhQUFhLG1CQUFPLENBQUMscUlBQThCO0FBQ25EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC9pbmRleC5qcz8wMTdiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHMvdXNlRXZtRW5kcG9pbnRXZWlnaHRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ibG9jay91c2VFdm1CbG9ja1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXZlbnRzL3VzZUV2bUNvbnRyYWN0RXZlbnRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ldmVudHMvdXNlRXZtQ29udHJhY3RMb2dzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9uZnQvdXNlRXZtQ29udHJhY3RORlRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ibG9jay91c2VFdm1EYXRlVG9CbG9ja1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHJhbnNhY3Rpb24vdXNlRXZtSW50ZXJuYWxUcmFuc2FjdGlvbnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25mdC91c2VFdm1NdWx0aXBsZU5GVHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2JhbGFuY2UvdXNlRXZtTmF0aXZlQmFsYW5jZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYmFsYW5jZS91c2VFdm1OYXRpdmVCYWxhbmNlc0ZvckFkZHJlc3Nlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbmZ0L3VzZUV2bU5GVENvbnRyYWN0TWV0YWRhdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25mdC91c2VFdm1ORlRDb250cmFjdFRyYW5zZmVyc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbmZ0L3VzZUV2bU5GVExvd2VzdFByaWNlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9uZnQvdXNlRXZtTkZUTWV0YWRhdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25mdC91c2VFdm1ORlRPd25lcnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25mdC91c2VFdm1ORlRUb2tlbklkT3duZXJzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9uZnQvdXNlRXZtTkZUVHJhZGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9uZnQvdXNlRXZtTkZUVHJhbnNmZXJzQnlCbG9ja1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbmZ0L3VzZUV2bU5GVFRyYW5zZmVyc0Zyb21Ub0Jsb2NrXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9uZnQvdXNlRXZtTkZUVHJhbnNmZXJzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kZWZpL3VzZUV2bVBhaXJBZGRyZXNzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kZWZpL3VzZUV2bVBhaXJSZXNlcnZlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdG9rZW4vdXNlRXZtVG9rZW5BbGxvd2FuY2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Rva2VuL3VzZUV2bVRva2VuTWV0YWRhdGFCeVN5bWJvbFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdG9rZW4vdXNlRXZtVG9rZW5NZXRhZGF0YVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdG9rZW4vdXNlRXZtVG9rZW5QcmljZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdG9rZW4vdXNlRXZtVG9rZW5UcmFuc2ZlcnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RyYW5zYWN0aW9uL3VzZUV2bVRyYW5zYWN0aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2FjdGlvbi91c2VFdm1UcmFuc2FjdGlvblZlcmJvc2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25mdC91c2VFdm1XYWxsZXRORlRDb2xsZWN0aW9uc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbmZ0L3VzZUV2bVdhbGxldE5GVHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25mdC91c2VFdm1XYWxsZXRORlRUcmFuc2ZlcnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Rva2VuL3VzZUV2bVdhbGxldFRva2VuQmFsYW5jZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Rva2VuL3VzZUV2bVdhbGxldFRva2VuVHJhbnNmZXJzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2FjdGlvbi91c2VFdm1XYWxsZXRUcmFuc2FjdGlvbnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RyYW5zYWN0aW9uL3VzZUV2bVdhbGxldFRyYW5zYWN0aW9uc1ZlcmJvc2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Jlc29sdmUvdXNlRXZtUmVzb2x2ZUFkZHJlc3NcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Jlc29sdmUvdXNlRXZtUmVzb2x2ZURvbWFpblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcmVzb2x2ZS91c2VFdm1SZXNvbHZlRU5TRG9tYWluXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9uZnQvdXNlRXZtUmVTeW5jTWV0YWRhdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzL3VzZUV2bVJ1bkNvbnRyYWN0RnVuY3Rpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25mdC91c2VFdm1TeW5jTkZUQ29udHJhY3RcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2lwZnMvdXNlRXZtVXBsb2FkRm9sZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlscy91c2VFdm1XZWIzQXBpVmVyc2lvblwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/ipfs/useEvmUploadFolder.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/ipfs/useEvmUploadFolder.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmUploadFolder = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmUploadFolder = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/uploadFolder',\n        operation: common_evm_utils_1.uploadFolderOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmUploadFolder = useEvmUploadFolder;\n//# sourceMappingURL=useEvmUploadFolder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvaXBmcy91c2VFdm1VcGxvYWRGb2xkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvaXBmcy91c2VFdm1VcGxvYWRGb2xkZXIuanM/Yzk2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtVXBsb2FkRm9sZGVyID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bVVwbG9hZEZvbGRlciA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS91cGxvYWRGb2xkZXInLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS51cGxvYWRGb2xkZXJPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZUV2bVVwbG9hZEZvbGRlciA9IHVzZUV2bVVwbG9hZEZvbGRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bVVwbG9hZEZvbGRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/ipfs/useEvmUploadFolder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmContractNFTs.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmContractNFTs.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmContractNFTs = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmContractNFTs = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getContractNFTs',\n        operation: common_evm_utils_1.getContractNFTsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmContractNFTs = useEvmContractNFTs;\n//# sourceMappingURL=useEvmContractNFTs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bUNvbnRyYWN0TkZUcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL25mdC91c2VFdm1Db250cmFjdE5GVHMuanM/ZDQ2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtQ29udHJhY3RORlRzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bUNvbnRyYWN0TkZUcyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlclBhZ2luYXRlZCkoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRDb250cmFjdE5GVHMnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRDb250cmFjdE5GVHNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1Db250cmFjdE5GVHMgPSB1c2VFdm1Db250cmFjdE5GVHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1Db250cmFjdE5GVHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmContractNFTs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmMultipleNFTs.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmMultipleNFTs.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmMultipleNFTs = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmMultipleNFTs = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getMultipleNFTs',\n        operation: common_evm_utils_1.getMultipleNFTsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmMultipleNFTs = useEvmMultipleNFTs;\n//# sourceMappingURL=useEvmMultipleNFTs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU11bHRpcGxlTkZUcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC9uZnQvdXNlRXZtTXVsdGlwbGVORlRzLmpzP2YxOGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bU11bHRpcGxlTkZUcyA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1NdWx0aXBsZU5GVHMgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0TXVsdGlwbGVORlRzJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0TXVsdGlwbGVORlRzT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1NdWx0aXBsZU5GVHMgPSB1c2VFdm1NdWx0aXBsZU5GVHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1NdWx0aXBsZU5GVHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmMultipleNFTs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTContractMetadata.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTContractMetadata.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTContractMetadata = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTContractMetadata = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getNFTContractMetadata',\n        operation: common_evm_utils_1.getNFTContractMetadataOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTContractMetadata = useEvmNFTContractMetadata;\n//# sourceMappingURL=useEvmNFTContractMetadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVENvbnRyYWN0TWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVENvbnRyYWN0TWV0YWRhdGEuanM/N2RkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtTkZUQ29udHJhY3RNZXRhZGF0YSA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1ORlRDb250cmFjdE1ldGFkYXRhID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2dldE5GVENvbnRyYWN0TWV0YWRhdGEnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRORlRDb250cmFjdE1ldGFkYXRhT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRDb250cmFjdE1ldGFkYXRhID0gdXNlRXZtTkZUQ29udHJhY3RNZXRhZGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bU5GVENvbnRyYWN0TWV0YWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTContractMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTContractTransfers.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTContractTransfers.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTContractTransfers = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTContractTransfers = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getNFTContractTransfers',\n        operation: common_evm_utils_1.getNFTContractTransfersOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTContractTransfers = useEvmNFTContractTransfers;\n//# sourceMappingURL=useEvmNFTContractTransfers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVENvbnRyYWN0VHJhbnNmZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyx5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVENvbnRyYWN0VHJhbnNmZXJzLmpzP2ZjNDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bU5GVENvbnRyYWN0VHJhbnNmZXJzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bU5GVENvbnRyYWN0VHJhbnNmZXJzID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyUGFnaW5hdGVkKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2dldE5GVENvbnRyYWN0VHJhbnNmZXJzJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0TkZUQ29udHJhY3RUcmFuc2ZlcnNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRDb250cmFjdFRyYW5zZmVycyA9IHVzZUV2bU5GVENvbnRyYWN0VHJhbnNmZXJzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtTkZUQ29udHJhY3RUcmFuc2ZlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTContractTransfers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTLowestPrice.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTLowestPrice.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTLowestPrice = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTLowestPrice = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getNFTLowestPrice',\n        operation: common_evm_utils_1.getNFTLowestPriceOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTLowestPrice = useEvmNFTLowestPrice;\n//# sourceMappingURL=useEvmNFTLowestPrice.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVExvd2VzdFByaWNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1Qix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL25mdC91c2VFdm1ORlRMb3dlc3RQcmljZS5qcz8zMjMyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1ORlRMb3dlc3RQcmljZSA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1ORlRMb3dlc3RQcmljZSA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRORlRMb3dlc3RQcmljZScsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldE5GVExvd2VzdFByaWNlT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRMb3dlc3RQcmljZSA9IHVzZUV2bU5GVExvd2VzdFByaWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtTkZUTG93ZXN0UHJpY2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTLowestPrice.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTMetadata.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTMetadata.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTMetadata = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTMetadata = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getNFTMetadata',\n        operation: common_evm_utils_1.getNFTMetadataOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTMetadata = useEvmNFTMetadata;\n//# sourceMappingURL=useEvmNFTMetadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVE1ldGFkYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6Qix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL25mdC91c2VFdm1ORlRNZXRhZGF0YS5qcz8yMTg3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1ORlRNZXRhZGF0YSA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1ORlRNZXRhZGF0YSA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRORlRNZXRhZGF0YScsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldE5GVE1ldGFkYXRhT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRNZXRhZGF0YSA9IHVzZUV2bU5GVE1ldGFkYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtTkZUTWV0YWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTOwners.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTOwners.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTOwners = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTOwners = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getNFTOwners',\n        operation: common_evm_utils_1.getNFTOwnersOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTOwners = useEvmNFTOwners;\n//# sourceMappingURL=useEvmNFTOwners.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVE93bmVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL25mdC91c2VFdm1ORlRPd25lcnMuanM/YzE1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtTkZUT3duZXJzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bU5GVE93bmVycyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlclBhZ2luYXRlZCkoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRORlRPd25lcnMnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRORlRPd25lcnNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRPd25lcnMgPSB1c2VFdm1ORlRPd25lcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1ORlRPd25lcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTOwners.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTokenIdOwners.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTokenIdOwners.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTTokenIdOwners = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTTokenIdOwners = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getNFTTokenIdOwners',\n        operation: common_evm_utils_1.getNFTTokenIdOwnersOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTTokenIdOwners = useEvmNFTTokenIdOwners;\n//# sourceMappingURL=useEvmNFTTokenIdOwners.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVFRva2VuSWRPd25lcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCO0FBQzlCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC9uZnQvdXNlRXZtTkZUVG9rZW5JZE93bmVycy5qcz9iYjUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1ORlRUb2tlbklkT3duZXJzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bU5GVFRva2VuSWRPd25lcnMgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXJQYWdpbmF0ZWQpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0TkZUVG9rZW5JZE93bmVycycsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldE5GVFRva2VuSWRPd25lcnNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRUb2tlbklkT3duZXJzID0gdXNlRXZtTkZUVG9rZW5JZE93bmVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bU5GVFRva2VuSWRPd25lcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTokenIdOwners.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTrades.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTrades.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTTrades = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTTrades = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getNFTTrades',\n        operation: common_evm_utils_1.getNFTTradesOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTTrades = useEvmNFTTrades;\n//# sourceMappingURL=useEvmNFTTrades.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVFRyYWRlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL25mdC91c2VFdm1ORlRUcmFkZXMuanM/ZjdmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtTkZUVHJhZGVzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bU5GVFRyYWRlcyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlclBhZ2luYXRlZCkoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRORlRUcmFkZXMnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRORlRUcmFkZXNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRUcmFkZXMgPSB1c2VFdm1ORlRUcmFkZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1ORlRUcmFkZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTrades.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfers.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfers.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTTransfers = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTTransfers = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getNFTTransfers',\n        operation: common_evm_utils_1.getNFTTransfersOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTTransfers = useEvmNFTTransfers;\n//# sourceMappingURL=useEvmNFTTransfers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVFRyYW5zZmVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL25mdC91c2VFdm1ORlRUcmFuc2ZlcnMuanM/NDY0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtTkZUVHJhbnNmZXJzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bU5GVFRyYW5zZmVycyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlclBhZ2luYXRlZCkoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRORlRUcmFuc2ZlcnMnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRORlRUcmFuc2ZlcnNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRUcmFuc2ZlcnMgPSB1c2VFdm1ORlRUcmFuc2ZlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1ORlRUcmFuc2ZlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfersByBlock.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfersByBlock.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTTransfersByBlock = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTTransfersByBlock = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getNFTTransfersByBlock',\n        operation: common_evm_utils_1.getNFTTransfersByBlockOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTTransfersByBlock = useEvmNFTTransfersByBlock;\n//# sourceMappingURL=useEvmNFTTransfersByBlock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVFRyYW5zZmVyc0J5QmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC9uZnQvdXNlRXZtTkZUVHJhbnNmZXJzQnlCbG9jay5qcz9lYzkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1ORlRUcmFuc2ZlcnNCeUJsb2NrID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bU5GVFRyYW5zZmVyc0J5QmxvY2sgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXJQYWdpbmF0ZWQpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0TkZUVHJhbnNmZXJzQnlCbG9jaycsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldE5GVFRyYW5zZmVyc0J5QmxvY2tPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRUcmFuc2ZlcnNCeUJsb2NrID0gdXNlRXZtTkZUVHJhbnNmZXJzQnlCbG9jaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bU5GVFRyYW5zZmVyc0J5QmxvY2suanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfersByBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfersFromToBlock.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfersFromToBlock.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmNFTTransfersFromToBlock = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmNFTTransfersFromToBlock = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getNFTTransfersFromToBlock',\n        operation: common_evm_utils_1.getNFTTransfersFromToBlockOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmNFTTransfersFromToBlock = useEvmNFTTransfersFromToBlock;\n//# sourceMappingURL=useEvmNFTTransfersFromToBlock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVFRyYW5zZmVyc0Zyb21Ub0Jsb2NrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFDQUFxQztBQUNyQyx5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bU5GVFRyYW5zZmVyc0Zyb21Ub0Jsb2NrLmpzP2ViYjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bU5GVFRyYW5zZmVyc0Zyb21Ub0Jsb2NrID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bU5GVFRyYW5zZmVyc0Zyb21Ub0Jsb2NrID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyUGFnaW5hdGVkKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2dldE5GVFRyYW5zZmVyc0Zyb21Ub0Jsb2NrJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0TkZUVHJhbnNmZXJzRnJvbVRvQmxvY2tPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1ORlRUcmFuc2ZlcnNGcm9tVG9CbG9jayA9IHVzZUV2bU5GVFRyYW5zZmVyc0Zyb21Ub0Jsb2NrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtTkZUVHJhbnNmZXJzRnJvbVRvQmxvY2suanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmNFTTransfersFromToBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmReSyncMetadata.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmReSyncMetadata.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmReSyncMetadata = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmReSyncMetadata = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/reSyncMetadata',\n        operation: common_evm_utils_1.reSyncMetadataOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmReSyncMetadata = useEvmReSyncMetadata;\n//# sourceMappingURL=useEvmReSyncMetadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bVJlU3luY01ldGFkYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1Qix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL25mdC91c2VFdm1SZVN5bmNNZXRhZGF0YS5qcz83ZDhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1SZVN5bmNNZXRhZGF0YSA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1SZVN5bmNNZXRhZGF0YSA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9yZVN5bmNNZXRhZGF0YScsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLnJlU3luY01ldGFkYXRhT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1SZVN5bmNNZXRhZGF0YSA9IHVzZUV2bVJlU3luY01ldGFkYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtUmVTeW5jTWV0YWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmReSyncMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmSyncNFTContract.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmSyncNFTContract.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmSyncNFTContract = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmSyncNFTContract = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/syncNFTContract',\n        operation: common_evm_utils_1.syncNFTContractOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmSyncNFTContract = useEvmSyncNFTContract;\n//# sourceMappingURL=useEvmSyncNFTContract.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bVN5bmNORlRDb250cmFjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0IseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC9uZnQvdXNlRXZtU3luY05GVENvbnRyYWN0LmpzP2I0YmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bVN5bmNORlRDb250cmFjdCA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1TeW5jTkZUQ29udHJhY3QgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvc3luY05GVENvbnRyYWN0JyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuc3luY05GVENvbnRyYWN0T3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1TeW5jTkZUQ29udHJhY3QgPSB1c2VFdm1TeW5jTkZUQ29udHJhY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1TeW5jTkZUQ29udHJhY3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmSyncNFTContract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTCollections.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTCollections.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmWalletNFTCollections = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmWalletNFTCollections = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getWalletNFTCollections',\n        operation: common_evm_utils_1.getWalletNFTCollectionsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmWalletNFTCollections = useEvmWalletNFTCollections;\n//# sourceMappingURL=useEvmWalletNFTCollections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bVdhbGxldE5GVENvbGxlY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyx5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bVdhbGxldE5GVENvbGxlY3Rpb25zLmpzPzlmNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bVdhbGxldE5GVENvbGxlY3Rpb25zID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bVdhbGxldE5GVENvbGxlY3Rpb25zID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyUGFnaW5hdGVkKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2dldFdhbGxldE5GVENvbGxlY3Rpb25zJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0V2FsbGV0TkZUQ29sbGVjdGlvbnNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1XYWxsZXRORlRDb2xsZWN0aW9ucyA9IHVzZUV2bVdhbGxldE5GVENvbGxlY3Rpb25zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtV2FsbGV0TkZUQ29sbGVjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTCollections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTTransfers.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTTransfers.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmWalletNFTTransfers = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmWalletNFTTransfers = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getWalletNFTTransfers',\n        operation: common_evm_utils_1.getWalletNFTTransfersOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmWalletNFTTransfers = useEvmWalletNFTTransfers;\n//# sourceMappingURL=useEvmWalletNFTTransfers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bVdhbGxldE5GVFRyYW5zZmVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0M7QUFDaEMseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL25mdC91c2VFdm1XYWxsZXRORlRUcmFuc2ZlcnMuanM/ZGEzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtV2FsbGV0TkZUVHJhbnNmZXJzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bVdhbGxldE5GVFRyYW5zZmVycyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlclBhZ2luYXRlZCkoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRXYWxsZXRORlRUcmFuc2ZlcnMnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRXYWxsZXRORlRUcmFuc2ZlcnNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1XYWxsZXRORlRUcmFuc2ZlcnMgPSB1c2VFdm1XYWxsZXRORlRUcmFuc2ZlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1XYWxsZXRORlRUcmFuc2ZlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTTransfers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTs.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTs.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmWalletNFTs = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmWalletNFTs = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getWalletNFTs',\n        operation: common_evm_utils_1.getWalletNFTsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmWalletNFTs = useEvmWalletNFTs;\n//# sourceMappingURL=useEvmWalletNFTs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvbmZ0L3VzZUV2bVdhbGxldE5GVHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC9uZnQvdXNlRXZtV2FsbGV0TkZUcy5qcz9mNzhkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1XYWxsZXRORlRzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bVdhbGxldE5GVHMgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXJQYWdpbmF0ZWQpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0V2FsbGV0TkZUcycsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldFdhbGxldE5GVHNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5kYXRhLFxuICAgICAgICBjdXJzb3I6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jdXJzb3IsXG4gICAgICAgIHBhZ2U6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlLFxuICAgICAgICBwYWdlU2l6ZTogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvdGFsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VFdm1XYWxsZXRORlRzID0gdXNlRXZtV2FsbGV0TkZUcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bVdhbGxldE5GVHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/nft/useEvmWalletNFTs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveAddress.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveAddress.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmResolveAddress = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmResolveAddress = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/resolveAddress',\n        operation: common_evm_utils_1.resolveAddressOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmResolveAddress = useEvmResolveAddress;\n//# sourceMappingURL=useEvmResolveAddress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvcmVzb2x2ZS91c2VFdm1SZXNvbHZlQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC9yZXNvbHZlL3VzZUV2bVJlc29sdmVBZGRyZXNzLmpzP2NlNjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bVJlc29sdmVBZGRyZXNzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bVJlc29sdmVBZGRyZXNzID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL3Jlc29sdmVBZGRyZXNzJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEucmVzb2x2ZUFkZHJlc3NPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZUV2bVJlc29sdmVBZGRyZXNzID0gdXNlRXZtUmVzb2x2ZUFkZHJlc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1SZXNvbHZlQWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveDomain.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveDomain.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmResolveDomain = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmResolveDomain = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/resolveDomain',\n        operation: common_evm_utils_1.resolveDomainOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmResolveDomain = useEvmResolveDomain;\n//# sourceMappingURL=useEvmResolveDomain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvcmVzb2x2ZS91c2VFdm1SZXNvbHZlRG9tYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL3Jlc29sdmUvdXNlRXZtUmVzb2x2ZURvbWFpbi5qcz9kZTViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1SZXNvbHZlRG9tYWluID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bVJlc29sdmVEb21haW4gPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvcmVzb2x2ZURvbWFpbicsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLnJlc29sdmVEb21haW5PcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZUV2bVJlc29sdmVEb21haW4gPSB1c2VFdm1SZXNvbHZlRG9tYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtUmVzb2x2ZURvbWFpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveDomain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveENSDomain.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveENSDomain.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmResolveENSDomain = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmResolveENSDomain = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/resolveENSDomain',\n        operation: common_evm_utils_1.resolveENSDomainOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmResolveENSDomain = useEvmResolveENSDomain;\n//# sourceMappingURL=useEvmResolveENSDomain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvcmVzb2x2ZS91c2VFdm1SZXNvbHZlRU5TRG9tYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5Qix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL3Jlc29sdmUvdXNlRXZtUmVzb2x2ZUVOU0RvbWFpbi5qcz84YTNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1SZXNvbHZlRU5TRG9tYWluID0gdm9pZCAwO1xudmFyIGNvbW1vbl9ldm1fdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1ldm0tdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZUV2bVJlc29sdmVFTlNEb21haW4gPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvcmVzb2x2ZUVOU0RvbWFpbicsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLnJlc29sdmVFTlNEb21haW5PcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZUV2bVJlc29sdmVFTlNEb21haW4gPSB1c2VFdm1SZXNvbHZlRU5TRG9tYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtUmVzb2x2ZUVOU0RvbWFpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/resolve/useEvmResolveENSDomain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenAllowance.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenAllowance.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmTokenAllowance = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmTokenAllowance = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getTokenAllowance',\n        operation: common_evm_utils_1.getTokenAllowanceOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmTokenAllowance = useEvmTokenAllowance;\n//# sourceMappingURL=useEvmTokenAllowance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdG9rZW4vdXNlRXZtVG9rZW5BbGxvd2FuY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdG9rZW4vdXNlRXZtVG9rZW5BbGxvd2FuY2UuanM/ODIzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtVG9rZW5BbGxvd2FuY2UgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtVG9rZW5BbGxvd2FuY2UgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0VG9rZW5BbGxvd2FuY2UnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRUb2tlbkFsbG93YW5jZU9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtVG9rZW5BbGxvd2FuY2UgPSB1c2VFdm1Ub2tlbkFsbG93YW5jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bVRva2VuQWxsb3dhbmNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenAllowance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenMetadata.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenMetadata.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmTokenMetadata = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmTokenMetadata = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getTokenMetadata',\n        operation: common_evm_utils_1.getTokenMetadataOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmTokenMetadata = useEvmTokenMetadata;\n//# sourceMappingURL=useEvmTokenMetadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdG9rZW4vdXNlRXZtVG9rZW5NZXRhZGF0YS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC90b2tlbi91c2VFdm1Ub2tlbk1ldGFkYXRhLmpzPzgyOWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bVRva2VuTWV0YWRhdGEgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtVG9rZW5NZXRhZGF0YSA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRUb2tlbk1ldGFkYXRhJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0VG9rZW5NZXRhZGF0YU9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtVG9rZW5NZXRhZGF0YSA9IHVzZUV2bVRva2VuTWV0YWRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1Ub2tlbk1ldGFkYXRhLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenMetadataBySymbol.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenMetadataBySymbol.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmTokenMetadataBySymbol = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmTokenMetadataBySymbol = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getTokenMetadataBySymbol',\n        operation: common_evm_utils_1.getTokenMetadataBySymbolOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmTokenMetadataBySymbol = useEvmTokenMetadataBySymbol;\n//# sourceMappingURL=useEvmTokenMetadataBySymbol.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdG9rZW4vdXNlRXZtVG9rZW5NZXRhZGF0YUJ5U3ltYm9sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQztBQUNuQyx5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL3Rva2VuL3VzZUV2bVRva2VuTWV0YWRhdGFCeVN5bWJvbC5qcz8xZmJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1Ub2tlbk1ldGFkYXRhQnlTeW1ib2wgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtVG9rZW5NZXRhZGF0YUJ5U3ltYm9sID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2dldFRva2VuTWV0YWRhdGFCeVN5bWJvbCcsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldFRva2VuTWV0YWRhdGFCeVN5bWJvbE9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtVG9rZW5NZXRhZGF0YUJ5U3ltYm9sID0gdXNlRXZtVG9rZW5NZXRhZGF0YUJ5U3ltYm9sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtVG9rZW5NZXRhZGF0YUJ5U3ltYm9sLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenMetadataBySymbol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenPrice.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenPrice.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmTokenPrice = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmTokenPrice = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getTokenPrice',\n        operation: common_evm_utils_1.getTokenPriceOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmTokenPrice = useEvmTokenPrice;\n//# sourceMappingURL=useEvmTokenPrice.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdG9rZW4vdXNlRXZtVG9rZW5QcmljZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC90b2tlbi91c2VFdm1Ub2tlblByaWNlLmpzP2Y0NWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bVRva2VuUHJpY2UgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtVG9rZW5QcmljZSA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRUb2tlblByaWNlJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0VG9rZW5QcmljZU9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtVG9rZW5QcmljZSA9IHVzZUV2bVRva2VuUHJpY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1Ub2tlblByaWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenPrice.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenTransfers.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenTransfers.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmTokenTransfers = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmTokenTransfers = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getTokenTransfers',\n        operation: common_evm_utils_1.getTokenTransfersOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmTokenTransfers = useEvmTokenTransfers;\n//# sourceMappingURL=useEvmTokenTransfers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdG9rZW4vdXNlRXZtVG9rZW5UcmFuc2ZlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC90b2tlbi91c2VFdm1Ub2tlblRyYW5zZmVycy5qcz82NTMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1Ub2tlblRyYW5zZmVycyA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1Ub2tlblRyYW5zZmVycyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlclBhZ2luYXRlZCkoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRUb2tlblRyYW5zZmVycycsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldFRva2VuVHJhbnNmZXJzT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuZGF0YSxcbiAgICAgICAgY3Vyc29yOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuY3Vyc29yLFxuICAgICAgICBwYWdlOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEucGFnZSxcbiAgICAgICAgcGFnZVNpemU6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlU2l6ZSxcbiAgICAgICAgdG90YWw6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS50b3RhbCxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtVG9rZW5UcmFuc2ZlcnMgPSB1c2VFdm1Ub2tlblRyYW5zZmVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bVRva2VuVHJhbnNmZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmTokenTransfers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmWalletTokenBalances.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmWalletTokenBalances.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmWalletTokenBalances = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmWalletTokenBalances = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getWalletTokenBalances',\n        operation: common_evm_utils_1.getWalletTokenBalancesOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmWalletTokenBalances = useEvmWalletTokenBalances;\n//# sourceMappingURL=useEvmWalletTokenBalances.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdG9rZW4vdXNlRXZtV2FsbGV0VG9rZW5CYWxhbmNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQ0FBaUM7QUFDakMseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC90b2tlbi91c2VFdm1XYWxsZXRUb2tlbkJhbGFuY2VzLmpzPzdiMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bVdhbGxldFRva2VuQmFsYW5jZXMgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtV2FsbGV0VG9rZW5CYWxhbmNlcyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRXYWxsZXRUb2tlbkJhbGFuY2VzJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0V2FsbGV0VG9rZW5CYWxhbmNlc09wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtV2FsbGV0VG9rZW5CYWxhbmNlcyA9IHVzZUV2bVdhbGxldFRva2VuQmFsYW5jZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1XYWxsZXRUb2tlbkJhbGFuY2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmWalletTokenBalances.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmWalletTokenTransfers.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmWalletTokenTransfers.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmWalletTokenTransfers = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmWalletTokenTransfers = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getWalletTokenTransfers',\n        operation: common_evm_utils_1.getWalletTokenTransfersOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmWalletTokenTransfers = useEvmWalletTokenTransfers;\n//# sourceMappingURL=useEvmWalletTokenTransfers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdG9rZW4vdXNlRXZtV2FsbGV0VG9rZW5UcmFuc2ZlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDO0FBQ2xDLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC90b2tlbi91c2VFdm1XYWxsZXRUb2tlblRyYW5zZmVycy5qcz8yZDYzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1XYWxsZXRUb2tlblRyYW5zZmVycyA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1XYWxsZXRUb2tlblRyYW5zZmVycyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlclBhZ2luYXRlZCkoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9nZXRXYWxsZXRUb2tlblRyYW5zZmVycycsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldFdhbGxldFRva2VuVHJhbnNmZXJzT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuZGF0YSxcbiAgICAgICAgY3Vyc29yOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuY3Vyc29yLFxuICAgICAgICBwYWdlOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEucGFnZSxcbiAgICAgICAgcGFnZVNpemU6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlU2l6ZSxcbiAgICAgICAgdG90YWw6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS50b3RhbCxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtV2FsbGV0VG9rZW5UcmFuc2ZlcnMgPSB1c2VFdm1XYWxsZXRUb2tlblRyYW5zZmVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bVdhbGxldFRva2VuVHJhbnNmZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/token/useEvmWalletTokenTransfers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmInternalTransactions.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmInternalTransactions.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmInternalTransactions = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmInternalTransactions = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getInternalTransactions',\n        operation: common_evm_utils_1.getInternalTransactionsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmInternalTransactions = useEvmInternalTransactions;\n//# sourceMappingURL=useEvmInternalTransactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdHJhbnNhY3Rpb24vdXNlRXZtSW50ZXJuYWxUcmFuc2FjdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDO0FBQ2xDLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdHJhbnNhY3Rpb24vdXNlRXZtSW50ZXJuYWxUcmFuc2FjdGlvbnMuanM/ZGQ4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtSW50ZXJuYWxUcmFuc2FjdGlvbnMgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtSW50ZXJuYWxUcmFuc2FjdGlvbnMgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0SW50ZXJuYWxUcmFuc2FjdGlvbnMnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRJbnRlcm5hbFRyYW5zYWN0aW9uc09wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtSW50ZXJuYWxUcmFuc2FjdGlvbnMgPSB1c2VFdm1JbnRlcm5hbFRyYW5zYWN0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bUludGVybmFsVHJhbnNhY3Rpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmInternalTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmTransaction.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmTransaction.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmTransaction = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmTransaction = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getTransaction',\n        operation: common_evm_utils_1.getTransactionOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmTransaction = useEvmTransaction;\n//# sourceMappingURL=useEvmTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdHJhbnNhY3Rpb24vdXNlRXZtVHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdHJhbnNhY3Rpb24vdXNlRXZtVHJhbnNhY3Rpb24uanM/YTg4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtVHJhbnNhY3Rpb24gPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0VHJhbnNhY3Rpb24nLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRUcmFuc2FjdGlvbk9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtVHJhbnNhY3Rpb24gPSB1c2VFdm1UcmFuc2FjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bVRyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmTransactionVerbose.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmTransactionVerbose.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmTransactionVerbose = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmTransactionVerbose = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/getTransactionVerbose',\n        operation: common_evm_utils_1.getTransactionVerboseOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmTransactionVerbose = useEvmTransactionVerbose;\n//# sourceMappingURL=useEvmTransactionVerbose.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdHJhbnNhY3Rpb24vdXNlRXZtVHJhbnNhY3Rpb25WZXJib3NlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyx5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL3RyYW5zYWN0aW9uL3VzZUV2bVRyYW5zYWN0aW9uVmVyYm9zZS5qcz9mODM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1UcmFuc2FjdGlvblZlcmJvc2UgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtVHJhbnNhY3Rpb25WZXJib3NlID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2dldFRyYW5zYWN0aW9uVmVyYm9zZScsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmdldFRyYW5zYWN0aW9uVmVyYm9zZU9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtVHJhbnNhY3Rpb25WZXJib3NlID0gdXNlRXZtVHJhbnNhY3Rpb25WZXJib3NlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtVHJhbnNhY3Rpb25WZXJib3NlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmTransactionVerbose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmWalletTransactions.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmWalletTransactions.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmWalletTransactions = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmWalletTransactions = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getWalletTransactions',\n        operation: common_evm_utils_1.getWalletTransactionsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmWalletTransactions = useEvmWalletTransactions;\n//# sourceMappingURL=useEvmWalletTransactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdHJhbnNhY3Rpb24vdXNlRXZtV2FsbGV0VHJhbnNhY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyx5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdHJhbnNhY3Rpb24vdXNlRXZtV2FsbGV0VHJhbnNhY3Rpb25zLmpzPzE2ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bVdhbGxldFRyYW5zYWN0aW9ucyA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1XYWxsZXRUcmFuc2FjdGlvbnMgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXJQYWdpbmF0ZWQpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvZ2V0V2FsbGV0VHJhbnNhY3Rpb25zJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEuZ2V0V2FsbGV0VHJhbnNhY3Rpb25zT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuZGF0YSxcbiAgICAgICAgY3Vyc29yOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuY3Vyc29yLFxuICAgICAgICBwYWdlOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEucGFnZSxcbiAgICAgICAgcGFnZVNpemU6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlU2l6ZSxcbiAgICAgICAgdG90YWw6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS50b3RhbCxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtV2FsbGV0VHJhbnNhY3Rpb25zID0gdXNlRXZtV2FsbGV0VHJhbnNhY3Rpb25zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtV2FsbGV0VHJhbnNhY3Rpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmWalletTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmWalletTransactionsVerbose.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmWalletTransactionsVerbose.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmWalletTransactionsVerbose = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmWalletTransactionsVerbose = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolverPaginated)({\n        endpoint: 'evmApi/getWalletTransactionsVerbose',\n        operation: common_evm_utils_1.getWalletTransactionsVerboseOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data === null || data === void 0 ? void 0 : data.data,\n        cursor: data === null || data === void 0 ? void 0 : data.cursor,\n        page: data === null || data === void 0 ? void 0 : data.page,\n        pageSize: data === null || data === void 0 ? void 0 : data.pageSize,\n        total: data === null || data === void 0 ? void 0 : data.total,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmWalletTransactionsVerbose = useEvmWalletTransactionsVerbose;\n//# sourceMappingURL=useEvmWalletTransactionsVerbose.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdHJhbnNhY3Rpb24vdXNlRXZtV2FsbGV0VHJhbnNhY3Rpb25zVmVyYm9zZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1Q0FBdUM7QUFDdkMseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL3RyYW5zYWN0aW9uL3VzZUV2bVdhbGxldFRyYW5zYWN0aW9uc1ZlcmJvc2UuanM/YjE0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtV2FsbGV0VHJhbnNhY3Rpb25zVmVyYm9zZSA9IHZvaWQgMDtcbnZhciBjb21tb25fZXZtX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tZXZtLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VFdm1XYWxsZXRUcmFuc2FjdGlvbnNWZXJib3NlID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyUGFnaW5hdGVkKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2dldFdhbGxldFRyYW5zYWN0aW9uc1ZlcmJvc2UnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS5nZXRXYWxsZXRUcmFuc2FjdGlvbnNWZXJib3NlT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuZGF0YSxcbiAgICAgICAgY3Vyc29yOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuY3Vyc29yLFxuICAgICAgICBwYWdlOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEucGFnZSxcbiAgICAgICAgcGFnZVNpemU6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5wYWdlU2l6ZSxcbiAgICAgICAgdG90YWw6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS50b3RhbCxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtV2FsbGV0VHJhbnNhY3Rpb25zVmVyYm9zZSA9IHVzZUV2bVdhbGxldFRyYW5zYWN0aW9uc1ZlcmJvc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1XYWxsZXRUcmFuc2FjdGlvbnNWZXJib3NlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/transaction/useEvmWalletTransactionsVerbose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmEndpointWeights.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmEndpointWeights.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmEndpointWeights = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmEndpointWeights = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/endpointWeights',\n        operation: common_evm_utils_1.endpointWeightsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmEndpointWeights = useEvmEndpointWeights;\n//# sourceMappingURL=useEvmEndpointWeights.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdXRpbHMvdXNlRXZtRW5kcG9pbnRXZWlnaHRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvZ2VuZXJhdGVkL3V0aWxzL3VzZUV2bUVuZHBvaW50V2VpZ2h0cy5qcz82Mjc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VFdm1FbmRwb2ludFdlaWdodHMgPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtRW5kcG9pbnRXZWlnaHRzID0gZnVuY3Rpb24gKHJlcXVlc3QsIGZldGNoUGFyYW1zKSB7XG4gICAgdmFyIF9hID0gKDAsIHJlc29sdmVyc18xLnVzZVJlc29sdmVyKSh7XG4gICAgICAgIGVuZHBvaW50OiAnZXZtQXBpL2VuZHBvaW50V2VpZ2h0cycsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX2V2bV91dGlsc18xLmVuZHBvaW50V2VpZ2h0c09wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtRW5kcG9pbnRXZWlnaHRzID0gdXNlRXZtRW5kcG9pbnRXZWlnaHRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRXZtRW5kcG9pbnRXZWlnaHRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmEndpointWeights.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmRunContractFunction.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmRunContractFunction.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmRunContractFunction = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmRunContractFunction = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/runContractFunction',\n        operation: common_evm_utils_1.runContractFunctionOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmRunContractFunction = useEvmRunContractFunction;\n//# sourceMappingURL=useEvmRunContractFunction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdXRpbHMvdXNlRXZtUnVuQ29udHJhY3RGdW5jdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQ0FBaUM7QUFDakMseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvZXZtQXBpL2dlbmVyYXRlZC91dGlscy91c2VFdm1SdW5Db250cmFjdEZ1bmN0aW9uLmpzPzVhMTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUV2bVJ1bkNvbnRyYWN0RnVuY3Rpb24gPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtUnVuQ29udHJhY3RGdW5jdGlvbiA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ2V2bUFwaS9ydW5Db250cmFjdEZ1bmN0aW9uJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fZXZtX3V0aWxzXzEucnVuQ29udHJhY3RGdW5jdGlvbk9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtUnVuQ29udHJhY3RGdW5jdGlvbiA9IHVzZUV2bVJ1bkNvbnRyYWN0RnVuY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VFdm1SdW5Db250cmFjdEZ1bmN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmRunContractFunction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmWeb3ApiVersion.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmWeb3ApiVersion.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useEvmWeb3ApiVersion = void 0;\nvar common_evm_utils_1 = __webpack_require__(/*! moralis/common-evm-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonEvmUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useEvmWeb3ApiVersion = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'evmApi/web3ApiVersion',\n        operation: common_evm_utils_1.web3ApiVersionOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useEvmWeb3ApiVersion = useEvmWeb3ApiVersion;\n//# sourceMappingURL=useEvmWeb3ApiVersion.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdXRpbHMvdXNlRXZtV2ViM0FwaVZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9nZW5lcmF0ZWQvdXRpbHMvdXNlRXZtV2ViM0FwaVZlcnNpb24uanM/MDc0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRXZtV2ViM0FwaVZlcnNpb24gPSB2b2lkIDA7XG52YXIgY29tbW9uX2V2bV91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLWV2bS11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlRXZtV2ViM0FwaVZlcnNpb24gPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdldm1BcGkvd2ViM0FwaVZlcnNpb24nLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9ldm1fdXRpbHNfMS53ZWIzQXBpVmVyc2lvbk9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlRXZtV2ViM0FwaVZlcnNpb24gPSB1c2VFdm1XZWIzQXBpVmVyc2lvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUV2bVdlYjNBcGlWZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/utils/useEvmWeb3ApiVersion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/evmApi/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./generated */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/generated/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2V2bUFwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsK0ZBQWE7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9ldm1BcGkvaW5kZXguanM/YzQ4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dlbmVyYXRlZFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./evmApi */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/evmApi/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./solApi */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./auth */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/auth/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/types.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxrRkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsa0ZBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLDhFQUFRO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQywwRUFBUztBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL2luZGV4LmpzPzVkZGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ldm1BcGlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NvbEFwaVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXV0aFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useResolverPaginated = exports.useResolver = void 0;\nvar useResolver_1 = __webpack_require__(/*! ./useResolver */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/useResolver.js\");\nObject.defineProperty(exports, \"useResolver\", ({ enumerable: true, get: function () { return __importDefault(useResolver_1).default; } }));\nvar useResolverPaginated_1 = __webpack_require__(/*! ./useResolverPaginated */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/useResolverPaginated.js\");\nObject.defineProperty(exports, \"useResolverPaginated\", ({ enumerable: true, get: function () { return __importDefault(useResolverPaginated_1).default; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3Jlc29sdmVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLG1CQUFtQjtBQUNsRCxvQkFBb0IsbUJBQU8sQ0FBQyxnR0FBZTtBQUMzQywrQ0FBOEMsRUFBRSxxQ0FBcUMsa0RBQWtELEVBQUM7QUFDeEksNkJBQTZCLG1CQUFPLENBQUMsa0hBQXdCO0FBQzdELHdEQUF1RCxFQUFFLHFDQUFxQywyREFBMkQsRUFBQztBQUMxSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3Jlc29sdmVycy9pbmRleC5qcz80YmMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VSZXNvbHZlclBhZ2luYXRlZCA9IGV4cG9ydHMudXNlUmVzb2x2ZXIgPSB2b2lkIDA7XG52YXIgdXNlUmVzb2x2ZXJfMSA9IHJlcXVpcmUoXCIuL3VzZVJlc29sdmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlUmVzb2x2ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9faW1wb3J0RGVmYXVsdCh1c2VSZXNvbHZlcl8xKS5kZWZhdWx0OyB9IH0pO1xudmFyIHVzZVJlc29sdmVyUGFnaW5hdGVkXzEgPSByZXF1aXJlKFwiLi91c2VSZXNvbHZlclBhZ2luYXRlZFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVJlc29sdmVyUGFnaW5hdGVkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydERlZmF1bHQodXNlUmVzb2x2ZXJQYWdpbmF0ZWRfMSkuZGVmYXVsdDsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/useResolver.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/resolvers/useResolver.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar swr_1 = __importDefault(__webpack_require__(/*! swr */ \"(ssr)/./node_modules/swr/dist/index.esm.js\"));\nvar utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/@moralisweb3/next/lib/utils/index.js\");\nvar useResolver = function (_a) {\n    var endpoint = _a.endpoint, operation = _a.operation, request = _a.request, fetchParams = _a.fetchParams;\n    var _b = (0, swr_1.default)([endpoint, { operation: operation, request: request }], request ? utils_1.fetcher : null, __assign({ revalidateOnFocus: false }, fetchParams)), data = _b.data, error = _b.error, mutate = _b.mutate, isValidating = _b.isValidating;\n    var fetch = (0, react_1.useCallback)(function (params) {\n        var fetchRequest = params !== null && params !== void 0 ? params : request;\n        if (!fetchRequest) {\n            throw new utils_1.NoHookParamsError(operation.name);\n        }\n        return mutate((0, utils_1.fetcher)(endpoint, {\n            operation: operation,\n            request: fetchRequest,\n        }));\n    }, []);\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        isFetching: isValidating,\n    };\n};\nexports[\"default\"] = useResolver;\n//# sourceMappingURL=useResolver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3Jlc29sdmVycy91c2VSZXNvbHZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxtQkFBTyxDQUFDLHdHQUFPO0FBQzdCLDRCQUE0QixtQkFBTyxDQUFDLHVEQUFLO0FBQ3pDLGNBQWMsbUJBQU8sQ0FBQyw4RUFBYTtBQUNuQztBQUNBO0FBQ0EsNkNBQTZDLHdDQUF3QyxnREFBZ0QsMEJBQTBCO0FBQy9KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3Jlc29sdmVycy91c2VSZXNvbHZlci5qcz9jZGUwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIHN3cl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzd3JcIikpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG52YXIgdXNlUmVzb2x2ZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgZW5kcG9pbnQgPSBfYS5lbmRwb2ludCwgb3BlcmF0aW9uID0gX2Eub3BlcmF0aW9uLCByZXF1ZXN0ID0gX2EucmVxdWVzdCwgZmV0Y2hQYXJhbXMgPSBfYS5mZXRjaFBhcmFtcztcbiAgICB2YXIgX2IgPSAoMCwgc3dyXzEuZGVmYXVsdCkoW2VuZHBvaW50LCB7IG9wZXJhdGlvbjogb3BlcmF0aW9uLCByZXF1ZXN0OiByZXF1ZXN0IH1dLCByZXF1ZXN0ID8gdXRpbHNfMS5mZXRjaGVyIDogbnVsbCwgX19hc3NpZ24oeyByZXZhbGlkYXRlT25Gb2N1czogZmFsc2UgfSwgZmV0Y2hQYXJhbXMpKSwgZGF0YSA9IF9iLmRhdGEsIGVycm9yID0gX2IuZXJyb3IsIG11dGF0ZSA9IF9iLm11dGF0ZSwgaXNWYWxpZGF0aW5nID0gX2IuaXNWYWxpZGF0aW5nO1xuICAgIHZhciBmZXRjaCA9ICgwLCByZWFjdF8xLnVzZUNhbGxiYWNrKShmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBmZXRjaFJlcXVlc3QgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiByZXF1ZXN0O1xuICAgICAgICBpZiAoIWZldGNoUmVxdWVzdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHV0aWxzXzEuTm9Ib29rUGFyYW1zRXJyb3Iob3BlcmF0aW9uLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtdXRhdGUoKDAsIHV0aWxzXzEuZmV0Y2hlcikoZW5kcG9pbnQsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgICAgICAgcmVxdWVzdDogZmV0Y2hSZXF1ZXN0LFxuICAgICAgICB9KSk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICBpc0ZldGNoaW5nOiBpc1ZhbGlkYXRpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSB1c2VSZXNvbHZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVJlc29sdmVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/useResolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/useResolverPaginated.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/resolvers/useResolverPaginated.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar swr_1 = __importDefault(__webpack_require__(/*! swr */ \"(ssr)/./node_modules/swr/dist/index.esm.js\"));\nvar utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/@moralisweb3/next/lib/utils/index.js\");\nvar useResolverPaginated = function (_a) {\n    var endpoint = _a.endpoint, operation = _a.operation, request = _a.request, fetchParams = _a.fetchParams;\n    var _b = (0, swr_1.default)([endpoint, { operation: operation, request: request }], request ? utils_1.fetcherPaginated : null, __assign({ revalidateOnFocus: false }, fetchParams)), data = _b.data, error = _b.error, mutate = _b.mutate, isValidating = _b.isValidating;\n    var fetch = (0, react_1.useCallback)(function (params) {\n        var fetchRequest = params !== null && params !== void 0 ? params : request;\n        if (!fetchRequest) {\n            throw new utils_1.NoHookParamsError(operation.name);\n        }\n        return mutate((0, utils_1.fetcherPaginated)(endpoint, {\n            operation: operation,\n            request: fetchRequest,\n        }));\n    }, []);\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        isFetching: isValidating,\n    };\n};\nexports[\"default\"] = useResolverPaginated;\n//# sourceMappingURL=useResolverPaginated.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3Jlc29sdmVycy91c2VSZXNvbHZlclBhZ2luYXRlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxtQkFBTyxDQUFDLHdHQUFPO0FBQzdCLDRCQUE0QixtQkFBTyxDQUFDLHVEQUFLO0FBQ3pDLGNBQWMsbUJBQU8sQ0FBQyw4RUFBYTtBQUNuQztBQUNBO0FBQ0EsNkNBQTZDLHdDQUF3Qyx5REFBeUQsMEJBQTBCO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3Jlc29sdmVycy91c2VSZXNvbHZlclBhZ2luYXRlZC5qcz9iMzU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIHN3cl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzd3JcIikpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG52YXIgdXNlUmVzb2x2ZXJQYWdpbmF0ZWQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgZW5kcG9pbnQgPSBfYS5lbmRwb2ludCwgb3BlcmF0aW9uID0gX2Eub3BlcmF0aW9uLCByZXF1ZXN0ID0gX2EucmVxdWVzdCwgZmV0Y2hQYXJhbXMgPSBfYS5mZXRjaFBhcmFtcztcbiAgICB2YXIgX2IgPSAoMCwgc3dyXzEuZGVmYXVsdCkoW2VuZHBvaW50LCB7IG9wZXJhdGlvbjogb3BlcmF0aW9uLCByZXF1ZXN0OiByZXF1ZXN0IH1dLCByZXF1ZXN0ID8gdXRpbHNfMS5mZXRjaGVyUGFnaW5hdGVkIDogbnVsbCwgX19hc3NpZ24oeyByZXZhbGlkYXRlT25Gb2N1czogZmFsc2UgfSwgZmV0Y2hQYXJhbXMpKSwgZGF0YSA9IF9iLmRhdGEsIGVycm9yID0gX2IuZXJyb3IsIG11dGF0ZSA9IF9iLm11dGF0ZSwgaXNWYWxpZGF0aW5nID0gX2IuaXNWYWxpZGF0aW5nO1xuICAgIHZhciBmZXRjaCA9ICgwLCByZWFjdF8xLnVzZUNhbGxiYWNrKShmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBmZXRjaFJlcXVlc3QgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiByZXF1ZXN0O1xuICAgICAgICBpZiAoIWZldGNoUmVxdWVzdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHV0aWxzXzEuTm9Ib29rUGFyYW1zRXJyb3Iob3BlcmF0aW9uLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtdXRhdGUoKDAsIHV0aWxzXzEuZmV0Y2hlclBhZ2luYXRlZCkoZW5kcG9pbnQsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgICAgICAgcmVxdWVzdDogZmV0Y2hSZXF1ZXN0LFxuICAgICAgICB9KSk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICBpc0ZldGNoaW5nOiBpc1ZhbGlkYXRpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSB1c2VSZXNvbHZlclBhZ2luYXRlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVJlc29sdmVyUGFnaW5hdGVkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/useResolverPaginated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolBalance.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolBalance.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useSolBalance = void 0;\nvar common_sol_utils_1 = __webpack_require__(/*! moralis/common-sol-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonSolUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useSolBalance = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'solApi/getBalance',\n        operation: common_sol_utils_1.getBalanceOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useSolBalance = useSolBalance;\n//# sourceMappingURL=useSolBalance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9nZW5lcmF0ZWQvYWNjb3VudC91c2VTb2xCYWxhbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9zb2xBcGkvZ2VuZXJhdGVkL2FjY291bnQvdXNlU29sQmFsYW5jZS5qcz83MjNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VTb2xCYWxhbmNlID0gdm9pZCAwO1xudmFyIGNvbW1vbl9zb2xfdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1zb2wtdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZVNvbEJhbGFuY2UgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdzb2xBcGkvZ2V0QmFsYW5jZScsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX3NvbF91dGlsc18xLmdldEJhbGFuY2VPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZVNvbEJhbGFuY2UgPSB1c2VTb2xCYWxhbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlU29sQmFsYW5jZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolBalance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolNFTs.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolNFTs.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useSolNFTs = void 0;\nvar common_sol_utils_1 = __webpack_require__(/*! moralis/common-sol-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonSolUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useSolNFTs = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'solApi/getNFTs',\n        operation: common_sol_utils_1.getNFTsOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useSolNFTs = useSolNFTs;\n//# sourceMappingURL=useSolNFTs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9nZW5lcmF0ZWQvYWNjb3VudC91c2VTb2xORlRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9zb2xBcGkvZ2VuZXJhdGVkL2FjY291bnQvdXNlU29sTkZUcy5qcz8wZDJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VTb2xORlRzID0gdm9pZCAwO1xudmFyIGNvbW1vbl9zb2xfdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1zb2wtdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZVNvbE5GVHMgPSBmdW5jdGlvbiAocmVxdWVzdCwgZmV0Y2hQYXJhbXMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVzb2x2ZXJzXzEudXNlUmVzb2x2ZXIpKHtcbiAgICAgICAgZW5kcG9pbnQ6ICdzb2xBcGkvZ2V0TkZUcycsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX3NvbF91dGlsc18xLmdldE5GVHNPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZVNvbE5GVHMgPSB1c2VTb2xORlRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlU29sTkZUcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolNFTs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolPortfolio.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolPortfolio.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useSolPortfolio = void 0;\nvar common_sol_utils_1 = __webpack_require__(/*! moralis/common-sol-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonSolUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useSolPortfolio = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'solApi/getPortfolio',\n        operation: common_sol_utils_1.getPortfolioOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useSolPortfolio = useSolPortfolio;\n//# sourceMappingURL=useSolPortfolio.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9nZW5lcmF0ZWQvYWNjb3VudC91c2VTb2xQb3J0Zm9saW8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9nZW5lcmF0ZWQvYWNjb3VudC91c2VTb2xQb3J0Zm9saW8uanM/NTEzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlU29sUG9ydGZvbGlvID0gdm9pZCAwO1xudmFyIGNvbW1vbl9zb2xfdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1zb2wtdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZVNvbFBvcnRmb2xpbyA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ3NvbEFwaS9nZXRQb3J0Zm9saW8nLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9zb2xfdXRpbHNfMS5nZXRQb3J0Zm9saW9PcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZVNvbFBvcnRmb2xpbyA9IHVzZVNvbFBvcnRmb2xpbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVNvbFBvcnRmb2xpby5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolPortfolio.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolSPL.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolSPL.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useSolSPL = void 0;\nvar common_sol_utils_1 = __webpack_require__(/*! moralis/common-sol-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonSolUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useSolSPL = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'solApi/getSPL',\n        operation: common_sol_utils_1.getSPLOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useSolSPL = useSolSPL;\n//# sourceMappingURL=useSolSPL.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9nZW5lcmF0ZWQvYWNjb3VudC91c2VTb2xTUEwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLHlCQUF5QixtQkFBTyxDQUFDLCtGQUEwQjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9nZW5lcmF0ZWQvYWNjb3VudC91c2VTb2xTUEwuanM/MjJkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlU29sU1BMID0gdm9pZCAwO1xudmFyIGNvbW1vbl9zb2xfdXRpbHNfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1zb2wtdXRpbHNcIik7XG52YXIgcmVzb2x2ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcmVzb2x2ZXJzXCIpO1xudmFyIHVzZVNvbFNQTCA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ3NvbEFwaS9nZXRTUEwnLFxuICAgICAgICBvcGVyYXRpb246IGNvbW1vbl9zb2xfdXRpbHNfMS5nZXRTUExPcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGZldGNoUGFyYW1zOiBmZXRjaFBhcmFtcyxcbiAgICB9KSwgZGF0YSA9IF9hLmRhdGEsIGVycm9yID0gX2EuZXJyb3IsIGZldGNoID0gX2EuZmV0Y2gsIGlzRmV0Y2hpbmcgPSBfYS5pc0ZldGNoaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBmZXRjaCgpYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaCgpOyB9LFxuICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGBpc0ZldGNoaW5nYCBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IGlzRmV0Y2hpbmcsXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZVNvbFNQTCA9IHVzZVNvbFNQTDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVNvbFNQTC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolSPL.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./account/useSolBalance */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolBalance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./account/useSolNFTs */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolNFTs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./account/useSolPortfolio */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolPortfolio.js\"), exports);\n__exportStar(__webpack_require__(/*! ./account/useSolSPL */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/account/useSolSPL.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nft/useSolNFTMetadata */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/nft/useSolNFTMetadata.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token/useSolTokenPrice */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/token/useSolTokenPrice.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9nZW5lcmF0ZWQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDJIQUF5QjtBQUM5QyxhQUFhLG1CQUFPLENBQUMscUhBQXNCO0FBQzNDLGFBQWEsbUJBQU8sQ0FBQywrSEFBMkI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLG1IQUFxQjtBQUMxQyxhQUFhLG1CQUFPLENBQUMsMkhBQXlCO0FBQzlDLGFBQWEsbUJBQU8sQ0FBQyw2SEFBMEI7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9zb2xBcGkvZ2VuZXJhdGVkL2luZGV4LmpzPzY5YmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hY2NvdW50L3VzZVNvbEJhbGFuY2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FjY291bnQvdXNlU29sTkZUc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWNjb3VudC91c2VTb2xQb3J0Zm9saW9cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FjY291bnQvdXNlU29sU1BMXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9uZnQvdXNlU29sTkZUTWV0YWRhdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Rva2VuL3VzZVNvbFRva2VuUHJpY2VcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/nft/useSolNFTMetadata.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/nft/useSolNFTMetadata.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useSolNFTMetadata = void 0;\nvar common_sol_utils_1 = __webpack_require__(/*! moralis/common-sol-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonSolUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useSolNFTMetadata = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'solApi/getNFTMetadata',\n        operation: common_sol_utils_1.getNFTMetadataOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useSolNFTMetadata = useSolNFTMetadata;\n//# sourceMappingURL=useSolNFTMetadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9nZW5lcmF0ZWQvbmZ0L3VzZVNvbE5GVE1ldGFkYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6Qix5QkFBeUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9zb2xBcGkvZ2VuZXJhdGVkL25mdC91c2VTb2xORlRNZXRhZGF0YS5qcz9iMjM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VTb2xORlRNZXRhZGF0YSA9IHZvaWQgMDtcbnZhciBjb21tb25fc29sX3V0aWxzXzEgPSByZXF1aXJlKFwibW9yYWxpcy9jb21tb24tc29sLXV0aWxzXCIpO1xudmFyIHJlc29sdmVyc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3Jlc29sdmVyc1wiKTtcbnZhciB1c2VTb2xORlRNZXRhZGF0YSA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ3NvbEFwaS9nZXRORlRNZXRhZGF0YScsXG4gICAgICAgIG9wZXJhdGlvbjogY29tbW9uX3NvbF91dGlsc18xLmdldE5GVE1ldGFkYXRhT3BlcmF0aW9uLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZXRjaFBhcmFtczogZmV0Y2hQYXJhbXMsXG4gICAgfSksIGRhdGEgPSBfYS5kYXRhLCBlcnJvciA9IF9hLmVycm9yLCBmZXRjaCA9IF9hLmZldGNoLCBpc0ZldGNoaW5nID0gX2EuaXNGZXRjaGluZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgZmV0Y2goKWAgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmV0Y2goKTsgfSxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBgaXNGZXRjaGluZ2AgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNWYWxpZGF0aW5nOiBpc0ZldGNoaW5nLFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VTb2xORlRNZXRhZGF0YSA9IHVzZVNvbE5GVE1ldGFkYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlU29sTkZUTWV0YWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/nft/useSolNFTMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/token/useSolTokenPrice.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/token/useSolTokenPrice.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useSolTokenPrice = void 0;\nvar common_sol_utils_1 = __webpack_require__(/*! moralis/common-sol-utils */ \"(ssr)/./node_modules/moralis/lib/cjs/commonSolUtils/index.cjs\");\nvar resolvers_1 = __webpack_require__(/*! ../../../resolvers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/resolvers/index.js\");\nvar useSolTokenPrice = function (request, fetchParams) {\n    var _a = (0, resolvers_1.useResolver)({\n        endpoint: 'solApi/getTokenPrice',\n        operation: common_sol_utils_1.getTokenPriceOperation,\n        request: request,\n        fetchParams: fetchParams,\n    }), data = _a.data, error = _a.error, fetch = _a.fetch, isFetching = _a.isFetching;\n    return {\n        data: data,\n        error: error,\n        fetch: fetch,\n        /**\n         * @deprecated use `fetch()` instead\n         */\n        refetch: function () { return fetch(); },\n        isFetching: isFetching,\n        /**\n         * @deprecated use `isFetching` instead\n         */\n        isValidating: isFetching,\n    };\n};\nexports.useSolTokenPrice = useSolTokenPrice;\n//# sourceMappingURL=useSolTokenPrice.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9nZW5lcmF0ZWQvdG9rZW4vdXNlU29sVG9rZW5QcmljZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3Mvc29sQXBpL2dlbmVyYXRlZC90b2tlbi91c2VTb2xUb2tlblByaWNlLmpzPzk3NjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZVNvbFRva2VuUHJpY2UgPSB2b2lkIDA7XG52YXIgY29tbW9uX3NvbF91dGlsc18xID0gcmVxdWlyZShcIm1vcmFsaXMvY29tbW9uLXNvbC11dGlsc1wiKTtcbnZhciByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9yZXNvbHZlcnNcIik7XG52YXIgdXNlU29sVG9rZW5QcmljZSA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBmZXRjaFBhcmFtcykge1xuICAgIHZhciBfYSA9ICgwLCByZXNvbHZlcnNfMS51c2VSZXNvbHZlcikoe1xuICAgICAgICBlbmRwb2ludDogJ3NvbEFwaS9nZXRUb2tlblByaWNlJyxcbiAgICAgICAgb3BlcmF0aW9uOiBjb21tb25fc29sX3V0aWxzXzEuZ2V0VG9rZW5QcmljZU9wZXJhdGlvbixcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgZmV0Y2hQYXJhbXM6IGZldGNoUGFyYW1zLFxuICAgIH0pLCBkYXRhID0gX2EuZGF0YSwgZXJyb3IgPSBfYS5lcnJvciwgZmV0Y2ggPSBfYS5mZXRjaCwgaXNGZXRjaGluZyA9IF9hLmlzRmV0Y2hpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZldGNoKClgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHJlZmV0Y2g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKCk7IH0sXG4gICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYGlzRmV0Y2hpbmdgIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIGlzVmFsaWRhdGluZzogaXNGZXRjaGluZyxcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlU29sVG9rZW5QcmljZSA9IHVzZVNvbFRva2VuUHJpY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VTb2xUb2tlblByaWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/token/useSolTokenPrice.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/solApi/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./generated */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/generated/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3NvbEFwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsK0ZBQWE7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi9ob29rcy9zb2xBcGkvaW5kZXguanM/YTcwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dlbmVyYXRlZFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/solApi/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/hooks/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/hooks/types.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2hvb2tzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvaG9va3MvdHlwZXMuanM/M2IyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/hooks/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./hooks */ \"(ssr)/./node_modules/@moralisweb3/next/lib/hooks/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./auth */ \"(ssr)/./node_modules/@moralisweb3/next/lib/auth/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./MoralisNextApi */ \"(ssr)/./node_modules/@moralisweb3/next/lib/MoralisNextApi/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQywwRUFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsd0VBQVE7QUFDN0IsYUFBYSxtQkFBTyxDQUFDLDRGQUFrQjtBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL2luZGV4LmpzPzhkM2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ob29rc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXV0aFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vTW9yYWxpc05leHRBcGlcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/serverLogger.js":
/*!************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/serverLogger.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serverLogger = void 0;\nvar common_core_1 = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar moralis_1 = __importDefault(__webpack_require__(/*! moralis */ \"(ssr)/./node_modules/moralis/lib/cjs/index.cjs\"));\nexports.serverLogger = common_core_1.LoggerController.create('nextjs', moralis_1.default.Core);\n//# sourceMappingURL=serverLogger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL3NlcnZlckxvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQixvQkFBb0IsbUJBQU8sQ0FBQyxpR0FBMEI7QUFDdEQsZ0NBQWdDLG1CQUFPLENBQUMsK0RBQVM7QUFDakQsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9yYWxpc3dlYjMvbmV4dC9saWIvc2VydmVyTG9nZ2VyLmpzP2RmNmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlcnZlckxvZ2dlciA9IHZvaWQgMDtcbnZhciBjb21tb25fY29yZV8xID0gcmVxdWlyZShcIkBtb3JhbGlzd2ViMy9jb21tb24tY29yZVwiKTtcbnZhciBtb3JhbGlzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1vcmFsaXNcIikpO1xuZXhwb3J0cy5zZXJ2ZXJMb2dnZXIgPSBjb21tb25fY29yZV8xLkxvZ2dlckNvbnRyb2xsZXIuY3JlYXRlKCduZXh0anMnLCBtb3JhbGlzXzEuZGVmYXVsdC5Db3JlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZlckxvZ2dlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/serverLogger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/utils/errors.js":
/*!************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/utils/errors.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoHookParamsError = void 0;\nvar common_core_1 = __webpack_require__(/*! moralis/common-core */ \"(ssr)/./node_modules/moralis/lib/cjs/commonCore/index.cjs\");\nvar NoHookParamsError = /** @class */ (function (_super) {\n    __extends(NoHookParamsError, _super);\n    function NoHookParamsError(hookName) {\n        return _super.call(this, {\n            code: common_core_1.CoreErrorCode.GENERIC_CORE_ERROR,\n            message: \"No params provided for the \".concat(hookName, \" hook. Please check the Hook Usage Examples guide https://github.com/MoralisWeb3/Moralis-JS-SDK/tree/main/packages/next#-hook-usage-example\"),\n        }) || this;\n    }\n    return NoHookParamsError;\n}(common_core_1.MoralisError));\nexports.NoHookParamsError = NoHookParamsError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL3V0aWxzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsb0JBQW9CLG1CQUFPLENBQUMsc0ZBQXFCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNELHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL3V0aWxzL2Vycm9ycy5qcz9jZTI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTm9Ib29rUGFyYW1zRXJyb3IgPSB2b2lkIDA7XG52YXIgY29tbW9uX2NvcmVfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1jb3JlXCIpO1xudmFyIE5vSG9va1BhcmFtc0Vycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOb0hvb2tQYXJhbXNFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBOb0hvb2tQYXJhbXNFcnJvcihob29rTmFtZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywge1xuICAgICAgICAgICAgY29kZTogY29tbW9uX2NvcmVfMS5Db3JlRXJyb3JDb2RlLkdFTkVSSUNfQ09SRV9FUlJPUixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiTm8gcGFyYW1zIHByb3ZpZGVkIGZvciB0aGUgXCIuY29uY2F0KGhvb2tOYW1lLCBcIiBob29rLiBQbGVhc2UgY2hlY2sgdGhlIEhvb2sgVXNhZ2UgRXhhbXBsZXMgZ3VpZGUgaHR0cHM6Ly9naXRodWIuY29tL01vcmFsaXNXZWIzL01vcmFsaXMtSlMtU0RLL3RyZWUvbWFpbi9wYWNrYWdlcy9uZXh0Iy1ob29rLXVzYWdlLWV4YW1wbGVcIiksXG4gICAgICAgIH0pIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBOb0hvb2tQYXJhbXNFcnJvcjtcbn0oY29tbW9uX2NvcmVfMS5Nb3JhbGlzRXJyb3IpKTtcbmV4cG9ydHMuTm9Ib29rUGFyYW1zRXJyb3IgPSBOb0hvb2tQYXJhbXNFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/utils/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/utils/fetchers/fetcher.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/utils/fetchers/fetcher.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar axios_1 = __importStar(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\nvar moralis_1 = __importDefault(__webpack_require__(/*! moralis */ \"(ssr)/./node_modules/moralis/lib/cjs/index.cjs\"));\nfunction fetcher(endpoint, _a) {\n    var _b, _c;\n    var operation = _a.operation, request = _a.request;\n    return __awaiter(this, void 0, void 0, function () {\n        var data, error_1, errorMessage;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    endpoint = \"/api/moralis/\".concat(endpoint);\n                    _d.label = 1;\n                case 1:\n                    _d.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, axios_1.default.post(endpoint, operation.serializeRequest(request, moralis_1.default.Core))];\n                case 2:\n                    data = (_d.sent()).data;\n                    return [2 /*return*/, operation.deserializeResponse(data, request, moralis_1.default.Core)];\n                case 3:\n                    error_1 = _d.sent();\n                    // Overwrite error message if the nextjs api returns additional error details\n                    if ((0, axios_1.isAxiosError)(error_1)) {\n                        errorMessage = (_c = (_b = error_1.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.error;\n                        if (errorMessage) {\n                            error_1.message = errorMessage;\n                        }\n                    }\n                    throw error_1;\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\nexports[\"default\"] = fetcher;\n//# sourceMappingURL=fetcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/utils/fetchers/fetcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/utils/fetchers/fetcherPaginated.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/utils/fetchers/fetcherPaginated.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\nvar moralis_1 = __importDefault(__webpack_require__(/*! moralis */ \"(ssr)/./node_modules/moralis/lib/cjs/index.cjs\"));\nvar common_core_1 = __webpack_require__(/*! moralis/common-core */ \"(ssr)/./node_modules/moralis/lib/cjs/commonCore/index.cjs\");\nfunction fetcherPaginated(endpoint, _a) {\n    var operation = _a.operation, request = _a.request;\n    return __awaiter(this, void 0, void 0, function () {\n        var data;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    endpoint = \"/api/moralis/\".concat(endpoint);\n                    return [4 /*yield*/, axios_1.default.post(endpoint, operation.serializeRequest(request, moralis_1.default.Core))];\n                case 1:\n                    data = (_b.sent()).data;\n                    return [2 /*return*/, __assign({ data: operation.deserializeResponse(data, request, moralis_1.default.Core) }, common_core_1.PaginationReader.read(data))];\n            }\n        });\n    });\n}\nexports[\"default\"] = fetcherPaginated;\n//# sourceMappingURL=fetcherPaginated.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL3V0aWxzL2ZldGNoZXJzL2ZldGNoZXJQYWdpbmF0ZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsaURBQWlELE9BQU87QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGNBQWMsNkJBQTZCLDBCQUEwQixjQUFjLHFCQUFxQjtBQUN4RyxpQkFBaUIsb0RBQW9ELHFFQUFxRSxjQUFjO0FBQ3hKLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLG1DQUFtQyxTQUFTO0FBQzVDLG1DQUFtQyxXQUFXLFVBQVU7QUFDeEQsMENBQTBDLGNBQWM7QUFDeEQ7QUFDQSw4R0FBOEcsT0FBTztBQUNySCxpRkFBaUYsaUJBQWlCO0FBQ2xHLHlEQUF5RCxnQkFBZ0IsUUFBUTtBQUNqRiwrQ0FBK0MsZ0JBQWdCLGdCQUFnQjtBQUMvRTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0EsVUFBVSxZQUFZLGFBQWEsU0FBUyxVQUFVO0FBQ3RELG9DQUFvQyxTQUFTO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsbUJBQU8sQ0FBQyw2REFBTztBQUM3QyxnQ0FBZ0MsbUJBQU8sQ0FBQywrREFBUztBQUNqRCxvQkFBb0IsbUJBQU8sQ0FBQyxzRkFBcUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCw0RUFBNEU7QUFDakk7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL3V0aWxzL2ZldGNoZXJzL2ZldGNoZXJQYWdpbmF0ZWQuanM/OWNjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xudmFyIG1vcmFsaXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibW9yYWxpc1wiKSk7XG52YXIgY29tbW9uX2NvcmVfMSA9IHJlcXVpcmUoXCJtb3JhbGlzL2NvbW1vbi1jb3JlXCIpO1xuZnVuY3Rpb24gZmV0Y2hlclBhZ2luYXRlZChlbmRwb2ludCwgX2EpIHtcbiAgICB2YXIgb3BlcmF0aW9uID0gX2Eub3BlcmF0aW9uLCByZXF1ZXN0ID0gX2EucmVxdWVzdDtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludCA9IFwiL2FwaS9tb3JhbGlzL1wiLmNvbmNhdChlbmRwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGF4aW9zXzEuZGVmYXVsdC5wb3N0KGVuZHBvaW50LCBvcGVyYXRpb24uc2VyaWFsaXplUmVxdWVzdChyZXF1ZXN0LCBtb3JhbGlzXzEuZGVmYXVsdC5Db3JlKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IChfYi5zZW50KCkpLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBfX2Fzc2lnbih7IGRhdGE6IG9wZXJhdGlvbi5kZXNlcmlhbGl6ZVJlc3BvbnNlKGRhdGEsIHJlcXVlc3QsIG1vcmFsaXNfMS5kZWZhdWx0LkNvcmUpIH0sIGNvbW1vbl9jb3JlXzEuUGFnaW5hdGlvblJlYWRlci5yZWFkKGRhdGEpKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZmV0Y2hlclBhZ2luYXRlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoZXJQYWdpbmF0ZWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/utils/fetchers/fetcherPaginated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/utils/fetchers/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/utils/fetchers/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetcherPaginated = exports.fetcher = void 0;\nvar fetcher_1 = __webpack_require__(/*! ./fetcher */ \"(ssr)/./node_modules/@moralisweb3/next/lib/utils/fetchers/fetcher.js\");\nObject.defineProperty(exports, \"fetcher\", ({ enumerable: true, get: function () { return __importDefault(fetcher_1).default; } }));\nvar fetcherPaginated_1 = __webpack_require__(/*! ./fetcherPaginated */ \"(ssr)/./node_modules/@moralisweb3/next/lib/utils/fetchers/fetcherPaginated.js\");\nObject.defineProperty(exports, \"fetcherPaginated\", ({ enumerable: true, get: function () { return __importDefault(fetcherPaginated_1).default; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL3V0aWxzL2ZldGNoZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsZUFBZTtBQUMxQyxnQkFBZ0IsbUJBQU8sQ0FBQyx1RkFBVztBQUNuQywyQ0FBMEMsRUFBRSxxQ0FBcUMsOENBQThDLEVBQUM7QUFDaEkseUJBQXlCLG1CQUFPLENBQUMseUdBQW9CO0FBQ3JELG9EQUFtRCxFQUFFLHFDQUFxQyx1REFBdUQsRUFBQztBQUNsSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL3V0aWxzL2ZldGNoZXJzL2luZGV4LmpzP2JjMDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZldGNoZXJQYWdpbmF0ZWQgPSBleHBvcnRzLmZldGNoZXIgPSB2b2lkIDA7XG52YXIgZmV0Y2hlcl8xID0gcmVxdWlyZShcIi4vZmV0Y2hlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZldGNoZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9faW1wb3J0RGVmYXVsdChmZXRjaGVyXzEpLmRlZmF1bHQ7IH0gfSk7XG52YXIgZmV0Y2hlclBhZ2luYXRlZF8xID0gcmVxdWlyZShcIi4vZmV0Y2hlclBhZ2luYXRlZFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZldGNoZXJQYWdpbmF0ZWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9faW1wb3J0RGVmYXVsdChmZXRjaGVyUGFnaW5hdGVkXzEpLmRlZmF1bHQ7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/utils/fetchers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/next/lib/utils/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@moralisweb3/next/lib/utils/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@moralisweb3/next/lib/utils/errors.js\"), exports);\n__exportStar(__webpack_require__(/*! ./fetchers */ \"(ssr)/./node_modules/@moralisweb3/next/lib/utils/fetchers/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL25leHQvbGliL3V0aWxzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw0RUFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsc0ZBQVk7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9uZXh0L2xpYi91dGlscy9pbmRleC5qcz9kOGQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJyb3JzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9mZXRjaGVyc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/next/lib/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/api-utils/lib/cjs/index.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@moralisweb3/api-utils/lib/cjs/index.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\n\nvar ApiUtilsConfig = {\r\n    apiKey: {\r\n        name: 'apiKey',\r\n        defaultValue: null,\r\n    },\r\n};\n\n// TODO: we need to delete this file when this function will be not used.\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction convertOperationToDescriptor(operation) {\r\n    return {\r\n        name: operation.name,\r\n        method: operation.method.toLowerCase(),\r\n        bodyParamNames: operation.bodyParamNames || [],\r\n        urlPattern: operation.urlPathPattern,\r\n        urlPatternParamNames: operation.urlPathParamNames,\r\n    };\r\n}\n\nvar _a;\r\nvar Environment;\r\n(function (Environment) {\r\n    Environment[\"BROWSER\"] = \"browser\";\r\n    Environment[\"NODE\"] = \"node\";\r\n})(Environment || (Environment = {}));\r\nvar sdkNameForEnvironment = (_a = {},\r\n    _a[Environment.BROWSER] = 'Javascript SDK',\r\n    _a[Environment.NODE] = 'NodeJS SDK',\r\n    _a);\r\nvar currentEnvironment = getEnvironment();\r\nfunction detectIsBrowser() {\r\n    try {\r\n        // @ts-ignore\r\n        // eslint-disable-next-line no-undef\r\n        return typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\nfunction getEnvironment() {\r\n    if (detectIsBrowser()) {\r\n        return Environment.BROWSER;\r\n    }\r\n    // Otherwise we use NodeJs as default\r\n    // (in theory this will also account for other environments like webworker etc. but we don't support this at the moment)\r\n    return Environment.NODE;\r\n}\r\n/**\r\n * Gets the platform name, this is the name of the SDK,\r\n * Note: previously this was always named 'JS SDK', now we separate by environment / package-origin\r\n */\r\nfunction getSdkName(environment, product) {\r\n    // If the product is set in the config, we use this as a name, this is done in the SDKs like React/Next etc.\r\n    if (product) {\r\n        return product;\r\n    }\r\n    // Otherwise we use the name based on the environment\r\n    return sdkNameForEnvironment[environment];\r\n}\r\n/**\r\n * Additional data for the api to specify SDK details of the request\r\n */\r\nvar getSdkDetailsHeaders = function (product) {\r\n    var sdkName = getSdkName(currentEnvironment, product);\r\n    return {\r\n        'x-moralis-platform': sdkName,\r\n        'x-moralis-platform-version': commonCore.Core.libVersion,\r\n        'x-moralis-build-target': currentEnvironment,\r\n    };\r\n};\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\nvar OperationRequestBuilder = /** @class */ (function () {\r\n    function OperationRequestBuilder(operation, core) {\r\n        this.operation = operation;\r\n        this.core = core;\r\n    }\r\n    OperationRequestBuilder.prototype.prepareUrl = function (baseUrl, request) {\r\n        var _this = this;\r\n        var _a;\r\n        var urlParams = this.operation.getRequestUrlParams(request, this.core);\r\n        var urlPath = this.operation.urlPathPattern;\r\n        for (var _i = 0, _b = (_a = this.operation.urlPathParamNames) !== null && _a !== void 0 ? _a : []; _i < _b.length; _i++) {\r\n            var paramName = _b[_i];\r\n            var paramValue = urlParams[paramName];\r\n            if (paramValue === undefined || paramValue === null) {\r\n                throw new Error(\"Param \".concat(paramName, \" is required\"));\r\n            }\r\n            urlPath = urlPath.replace(\"{\".concat(paramName, \"}\"), paramValue);\r\n        }\r\n        var url = \"\".concat(baseUrl).concat(urlPath);\r\n        var urlSearchParams = {};\r\n        Object.keys(urlParams)\r\n            .filter(function (paramName) { var _a; return !((_a = _this.operation.urlPathParamNames) === null || _a === void 0 ? void 0 : _a.includes(paramName)); })\r\n            .forEach(function (paramName) {\r\n            var paramValue = urlParams[paramName];\r\n            if (paramValue !== undefined && paramValue !== null) {\r\n                urlSearchParams[paramName] = paramValue;\r\n            }\r\n        });\r\n        return { url: url, urlSearchParams: urlSearchParams };\r\n    };\r\n    OperationRequestBuilder.prototype.prepareBody = function (request) {\r\n        if (!this.operation.bodyType && !this.operation.getRequestBody) {\r\n            return undefined;\r\n        }\r\n        if (!this.operation.getRequestBody) {\r\n            throw new Error(\"getRequestBody is not implemented for operation \".concat(this.operation.name));\r\n        }\r\n        if (!this.operation.bodyParamNames) {\r\n            throw new Error(\"bodyParamNames are empty for operation \".concat(this.operation.name));\r\n        }\r\n        var body = this.operation.getRequestBody(request, this.core);\r\n        if (this.operation.bodyType === 'properties') {\r\n            return body;\r\n        }\r\n        if (this.operation.bodyType === 'raw') {\r\n            return body;\r\n        }\r\n        throw new Error(\"Not supported body type: \".concat(this.operation.bodyType));\r\n    };\r\n    OperationRequestBuilder.prototype.prepareHeaders = function () {\r\n        var apiKey = this.core.config.get(ApiUtilsConfig.apiKey);\r\n        var product = this.core.config.get(commonCore.CoreConfig.product);\r\n        if (!apiKey) {\r\n            throw new commonCore.MoralisApiError({\r\n                code: commonCore.ApiErrorCode.API_KEY_NOT_SET,\r\n                message: 'apiKey is not set',\r\n            });\r\n        }\r\n        var headers = getSdkDetailsHeaders(product);\r\n        headers['x-api-key'] = apiKey;\r\n        return headers;\r\n    };\r\n    return OperationRequestBuilder;\r\n}());\n\nvar OperationResolver = /** @class */ (function () {\r\n    function OperationResolver(operation, baseUrl, core) {\r\n        var _this = this;\r\n        this.operation = operation;\r\n        this.baseUrl = baseUrl;\r\n        this.core = core;\r\n        this.requestValidator = new commonCore.OperationRequestValidator(this.operation);\r\n        this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);\r\n        this.requestController = commonCore.RequestController.create(this.core);\r\n        this.fetch = function (request) { return __awaiter(_this, void 0, void 0, function () {\r\n            var _a, url, urlSearchParams, body, jsonResponse;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.requestValidator.validate(request);\r\n                        _a = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a.url, urlSearchParams = _a.urlSearchParams;\r\n                        body = this.requestBuilder.prepareBody(request);\r\n                        return [4 /*yield*/, this.requestController.request({\r\n                                method: this.operation.method,\r\n                                url: url,\r\n                                params: urlSearchParams,\r\n                                headers: this.requestBuilder.prepareHeaders(),\r\n                                data: body,\r\n                            })];\r\n                    case 1:\r\n                        jsonResponse = _b.sent();\r\n                        return [2 /*return*/, new commonCore.ResponseAdapter(jsonResponse, function () {\r\n                                return _this.operation.deserializeResponse(jsonResponse, request, _this.core);\r\n                            })];\r\n                }\r\n            });\r\n        }); };\r\n        if (operation.isNullable) {\r\n            throw new Error(\"Operation \".concat(operation.name, \" has invalid value for isNullable property\"));\r\n        }\r\n    }\r\n    return OperationResolver;\r\n}());\n\nfunction isNotFoundError(e) {\r\n    var _a;\r\n    if (commonCore.isMoralisError(e)) {\r\n        if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.status) === 404) {\r\n            return true;\r\n        }\r\n        if (e.code === commonCore.ApiErrorCode.NOT_FOUND) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\nvar NullableOperationResolver = /** @class */ (function () {\r\n    function NullableOperationResolver(operation, baseUrl, core) {\r\n        var _this = this;\r\n        this.operation = operation;\r\n        this.baseUrl = baseUrl;\r\n        this.core = core;\r\n        this.requestValidator = new commonCore.OperationRequestValidator(this.operation);\r\n        this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);\r\n        this.requestController = commonCore.RequestController.create(this.core);\r\n        this.fetch = function (request) { return __awaiter(_this, void 0, void 0, function () {\r\n            var result, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.requestValidator.validate(request);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this._fetch(request)];\r\n                    case 2:\r\n                        result = _a.sent();\r\n                        // TODO: this block should be deleted after the back-end adjustments.\r\n                        if (!result.raw || (typeof result.raw === 'object' && Object.keys(result.raw).length === 0)) {\r\n                            throw new commonCore.MoralisApiError({\r\n                                code: commonCore.ApiErrorCode.NOT_FOUND,\r\n                                message: 'The resource is not found',\r\n                            });\r\n                        }\r\n                        return [2 /*return*/, result];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        if (isNotFoundError(e_1)) {\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        throw e_1;\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); };\r\n        if (!operation.isNullable) {\r\n            throw new Error(\"Operation \".concat(operation.name, \" has invalid value for isNullable property\"));\r\n        }\r\n    }\r\n    NullableOperationResolver.prototype._fetch = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, url, urlSearchParams, body, jsonResponse;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a.url, urlSearchParams = _a.urlSearchParams;\r\n                        body = this.requestBuilder.prepareBody(request);\r\n                        return [4 /*yield*/, this.requestController.request({\r\n                                method: this.operation.method,\r\n                                url: url,\r\n                                params: urlSearchParams,\r\n                                headers: this.requestBuilder.prepareHeaders(),\r\n                                data: body,\r\n                            })];\r\n                    case 1:\r\n                        jsonResponse = _b.sent();\r\n                        return [2 /*return*/, new commonCore.ResponseAdapter(jsonResponse, function () {\r\n                                return _this.operation.deserializeResponse(jsonResponse, request, _this.core);\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return NullableOperationResolver;\r\n}());\n\nvar PaginatedOperationResolver = /** @class */ (function () {\r\n    function PaginatedOperationResolver(operation, baseUrl, core) {\r\n        var _this = this;\r\n        this.operation = operation;\r\n        this.baseUrl = baseUrl;\r\n        this.core = core;\r\n        this.requestValidator = new commonCore.OperationRequestValidator(this.operation);\r\n        this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);\r\n        this.requestController = commonCore.RequestController.create(this.core);\r\n        this.fetch = function (request) { return __awaiter(_this, void 0, void 0, function () {\r\n            var _a, url, urlSearchParams, body, jsonResponse, pagination, nextRequest;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.requestValidator.validate(request);\r\n                        _a = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a.url, urlSearchParams = _a.urlSearchParams;\r\n                        body = this.requestBuilder.prepareBody(request);\r\n                        return [4 /*yield*/, this.requestController.request({\r\n                                method: this.operation.method,\r\n                                url: url,\r\n                                params: urlSearchParams,\r\n                                headers: this.requestBuilder.prepareHeaders(),\r\n                                data: body,\r\n                            })];\r\n                    case 1:\r\n                        jsonResponse = _b.sent();\r\n                        pagination = commonCore.PaginationReader.read(jsonResponse);\r\n                        nextRequest = commonCore.NextPaginatedRequestResolver.resolve(this.operation.firstPageIndex, request, pagination);\r\n                        return [2 /*return*/, new commonCore.PaginatedResponseAdapter(pagination, jsonResponse, function () { return _this.operation.deserializeResponse(jsonResponse, request, _this.core); }, nextRequest ? function () { return _this.fetch(nextRequest); } : undefined)];\r\n                }\r\n            });\r\n        }); };\r\n        if (operation.firstPageIndex !== 0 && operation.firstPageIndex !== 1) {\r\n            throw new Error(\"Operation \".concat(operation.name, \" has invalid value for firstPageIndex property\"));\r\n        }\r\n    }\r\n    return PaginatedOperationResolver;\r\n}());\n\nvar OperationV3Resolver = /** @class */ (function () {\r\n    function OperationV3Resolver(operation, baseUrl, core) {\r\n        this.operation = operation;\r\n        this.baseUrl = baseUrl;\r\n        this.core = core;\r\n        this.requestController = commonCore.RequestController.create(this.core);\r\n    }\r\n    OperationV3Resolver.prototype.request = function (request, body) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var urlParamNames, requestJSON, url, searchParams, bodyJSON, responseJson;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        urlParamNames = this.operation.parameterNames.filter(function (name) {\r\n                            return _this.operation.routePattern.includes(\"{\".concat(name, \"}\"));\r\n                        });\r\n                        requestJSON = this.operation.serializeRequest\r\n                            ? this.operation.serializeRequest(request)\r\n                            : {};\r\n                        url = urlParamNames.reduce(function (current, name) {\r\n                            var value = requestJSON[name];\r\n                            current = current.replace(\"{\".concat(name, \"}\"), String(value));\r\n                            return current;\r\n                        }, this.operation.routePattern);\r\n                        searchParams = this.operation.parameterNames\r\n                            .filter(function (name) { return !urlParamNames.includes(name); })\r\n                            .reduce(function (current, name) {\r\n                            current[name] = requestJSON[name];\r\n                            return current;\r\n                        }, {});\r\n                        bodyJSON = body && this.operation.serializeBody ? this.operation.serializeBody(body) : undefined;\r\n                        return [4 /*yield*/, this.requestController.request({\r\n                                url: url,\r\n                                params: searchParams,\r\n                                baseURL: this.resolveBaseUrl(request),\r\n                                method: this.operation.httpMethod,\r\n                                data: bodyJSON,\r\n                                headers: this.prepareHeaders(),\r\n                            })];\r\n                    case 1:\r\n                        responseJson = _a.sent();\r\n                        if (!responseJson || !this.operation.parseResponse) {\r\n                            if (this.operation.hasResponse) {\r\n                                throw new Error('Expected response, but API has returned empty response');\r\n                            }\r\n                            // TODO: find a better way to handle this\r\n                            return [2 /*return*/, {\r\n                                    response: null,\r\n                                    responseJson: null,\r\n                                }];\r\n                        }\r\n                        return [2 /*return*/, {\r\n                                response: this.operation.parseResponse(responseJson),\r\n                                responseJson: responseJson,\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    OperationV3Resolver.prototype.resolve = function (request, body) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.request(request, body)];\r\n                    case 1: return [2 /*return*/, (_a.sent()).response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @deprecated This method is dedicated to V2 API only.\r\n     */\r\n    OperationV3Resolver.prototype.fetch = function (request, body) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.request(request, body)];\r\n                    case 1:\r\n                        data = _a.sent();\r\n                        return [2 /*return*/, new commonCore.ResponseAdapter(data.responseJson, function () { return data.response; })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    OperationV3Resolver.prototype.resolveBaseUrl = function (request) {\r\n        return typeof this.baseUrl === 'string' ? this.baseUrl : this.baseUrl(request);\r\n    };\r\n    OperationV3Resolver.prototype.prepareHeaders = function () {\r\n        var apiKey = this.core.config.get(ApiUtilsConfig.apiKey);\r\n        var product = this.core.config.get(commonCore.CoreConfig.product);\r\n        if (!apiKey) {\r\n            throw new commonCore.MoralisApiError({\r\n                code: commonCore.ApiErrorCode.API_KEY_NOT_SET,\r\n                message: 'apiKey is not set',\r\n            });\r\n        }\r\n        var headers = getSdkDetailsHeaders();\r\n        headers['x-api-key'] = \"\".concat(apiKey);\r\n        headers['Authorization'] = \"Bearer \".concat(apiKey);\r\n        if (product) {\r\n            headers['x-moralis-product'] = product;\r\n        }\r\n        return headers;\r\n    };\r\n    return OperationV3Resolver;\r\n}());\n\nvar PaginatedResponseV3Adapter = /** @class */ (function () {\r\n    function PaginatedResponseV3Adapter(response, json, nextHandler) {\r\n        this.response = response;\r\n        this.json = json;\r\n        this.nextHandler = nextHandler;\r\n    }\r\n    Object.defineProperty(PaginatedResponseV3Adapter.prototype, \"result\", {\r\n        get: function () {\r\n            if (!this.response.result) {\r\n                throw new Error('No result');\r\n            }\r\n            return this.response.result;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginatedResponseV3Adapter.prototype, \"pagination\", {\r\n        get: function () {\r\n            return {\r\n                total: this.response.total || 0,\r\n                page: this.response.page || 0,\r\n                pageSize: this.response.pageSize || 0,\r\n                cursor: this.response.cursor,\r\n            };\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    PaginatedResponseV3Adapter.prototype.hasNext = function () {\r\n        return !!this.nextHandler;\r\n    };\r\n    PaginatedResponseV3Adapter.prototype.next = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (!this.nextHandler) {\r\n                    throw new commonCore.MoralisError({\r\n                        code: commonCore.CoreErrorCode.NO_DATA_FOUND,\r\n                        message: 'Page limit exceeded! Before call this method check an existence of the next page by .hasNext() method.',\r\n                    });\r\n                }\r\n                return [2 /*return*/, this.nextHandler()];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @deprecated Use `toJSON()` method from the result.\r\n     */\r\n    PaginatedResponseV3Adapter.prototype.raw = function () {\r\n        return this.json;\r\n    };\r\n    /**\r\n     * @deprecated Use `toJSON()` method from the result.\r\n     */\r\n    PaginatedResponseV3Adapter.prototype.toJSON = function () {\r\n        return this.json;\r\n    };\r\n    return PaginatedResponseV3Adapter;\r\n}());\n\nvar PaginatedOperationV3Resolver = /** @class */ (function () {\r\n    function PaginatedOperationV3Resolver(operation, baseUrl, core) {\r\n        this.resolver = new OperationV3Resolver(operation, baseUrl, core);\r\n    }\r\n    /**\r\n     * @deprecated This method is dedicated to V2 API only.\r\n     */\r\n    PaginatedOperationV3Resolver.prototype.fetch = function (request, body) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var data, nextHandler;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.resolver.request(request, body)];\r\n                    case 1:\r\n                        data = _a.sent();\r\n                        nextHandler = null;\r\n                        if (data.responseJson.cursor) {\r\n                            nextHandler = function () { return __awaiter(_this, void 0, void 0, function () {\r\n                                var nextRequest;\r\n                                return __generator(this, function (_a) {\r\n                                    nextRequest = __assign(__assign({}, request), { cursor: data.response.cursor });\r\n                                    return [2 /*return*/, this.fetch(nextRequest, body)];\r\n                                });\r\n                            }); };\r\n                        }\r\n                        return [2 /*return*/, new PaginatedResponseV3Adapter(data.response, data.responseJson, nextHandler)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PaginatedOperationV3Resolver;\r\n}());\n\nvar ApiUtilsConfigSetup = /** @class */ (function () {\r\n    function ApiUtilsConfigSetup() {\r\n    }\r\n    ApiUtilsConfigSetup.register = function (config) {\r\n        if (!config.hasKey(ApiUtilsConfig.apiKey)) {\r\n            config.registerKey(ApiUtilsConfig.apiKey);\r\n        }\r\n    };\r\n    return ApiUtilsConfigSetup;\r\n}());\n\nvar ApiUtils = /** @class */ (function (_super) {\r\n    __extends(ApiUtils, _super);\r\n    function ApiUtils(core) {\r\n        return _super.call(this, ApiUtils.moduleName, core) || this;\r\n    }\r\n    ApiUtils.create = function (core) {\r\n        return new ApiUtils(core !== null && core !== void 0 ? core : commonCore.CoreProvider.getDefault());\r\n    };\r\n    ApiUtils.prototype.setup = function () {\r\n        ApiUtilsConfigSetup.register(this.core.config);\r\n    };\r\n    ApiUtils.prototype.start = function () {\r\n        // Nothing...\r\n    };\r\n    ApiUtils.moduleName = 'api';\r\n    return ApiUtils;\r\n}(commonCore.Module));\n\nexports.ApiUtils = ApiUtils;\nexports.ApiUtilsConfig = ApiUtilsConfig;\nexports.NullableOperationResolver = NullableOperationResolver;\nexports.OperationResolver = OperationResolver;\nexports.OperationV3Resolver = OperationV3Resolver;\nexports.PaginatedOperationResolver = PaginatedOperationResolver;\nexports.PaginatedOperationV3Resolver = PaginatedOperationV3Resolver;\nexports.PaginatedResponseV3Adapter = PaginatedResponseV3Adapter;\nexports.convertOperationToDescriptor = convertOperationToDescriptor;\nexports.getSdkDetailsHeaders = getSdkDetailsHeaders;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/api-utils/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/aptos-api/lib/cjs/index.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@moralisweb3/aptos-api/lib/cjs/index.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar commonAptosUtils = __webpack_require__(/*! @moralisweb3/common-aptos-utils */ \"(ssr)/./node_modules/@moralisweb3/common-aptos-utils/lib/cjs/index.cjs\");\nvar apiUtils = __webpack_require__(/*! @moralisweb3/api-utils */ \"(ssr)/./node_modules/@moralisweb3/api-utils/lib/cjs/index.cjs\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar MAINNET_BASE_URL = 'https://aptos-mainnet.aws-prod-api-1.moralis.io';\r\nvar TESTNET_BASE_URL = 'https://aptos-testnet.aws-prod-api-1.moralis.io';\r\nvar AptosApi = /** @class */ (function (_super) {\r\n    __extends(AptosApi, _super);\r\n    function AptosApi(core) {\r\n        var _this = _super.call(this) || this;\r\n        _this.core = core;\r\n        return _this;\r\n    }\r\n    AptosApi.create = function (core) {\r\n        if (!core) {\r\n            core = commonCore.CoreProvider.getDefault();\r\n        }\r\n        return new AptosApi(core);\r\n    };\r\n    AptosApi.prototype.createEndpoint = function (operation) {\r\n        var _this = this;\r\n        return function (request) {\r\n            var resolver = new apiUtils.OperationV3Resolver(operation, createBaseUrlResolver(_this.core), _this.core);\r\n            return resolver.resolve(request, null);\r\n        };\r\n    };\r\n    AptosApi.prototype.createEndpointWithBody = function (operation) {\r\n        var _this = this;\r\n        return function (request, body) {\r\n            var resolver = new apiUtils.OperationV3Resolver(operation, createBaseUrlResolver(_this.core), _this.core);\r\n            return resolver.resolve(request, body);\r\n        };\r\n    };\r\n    AptosApi.moduleName = 'aptApi';\r\n    return AptosApi;\r\n}(commonAptosUtils.AbstractClient));\r\nfunction createBaseUrlResolver(core) {\r\n    return function (request) {\r\n        var network = request.network;\r\n        if (network) {\r\n            var finalNetwork = commonAptosUtils.AptosNetworkResolver.resolve(network, core);\r\n            switch (finalNetwork) {\r\n                case 'mainnet':\r\n                    return MAINNET_BASE_URL;\r\n                case 'testnet':\r\n                    return TESTNET_BASE_URL;\r\n                default:\r\n                    throw new Error('Not supported network');\r\n            }\r\n        }\r\n        return MAINNET_BASE_URL;\r\n    };\r\n}\n\nexports.AptosApi = AptosApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL2FwdG9zLWFwaS9saWIvY2pzL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpQkFBaUIsbUJBQU8sQ0FBQyxpR0FBMEI7QUFDbkQsdUJBQXVCLG1CQUFPLENBQUMsK0dBQWlDO0FBQ2hFLGVBQWUsbUJBQU8sQ0FBQyw2RkFBd0I7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDbkYsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9hcHRvcy1hcGkvbGliL2Nqcy9pbmRleC5janM/ZmFiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb25Db3JlID0gcmVxdWlyZSgnQG1vcmFsaXN3ZWIzL2NvbW1vbi1jb3JlJyk7XG52YXIgY29tbW9uQXB0b3NVdGlscyA9IHJlcXVpcmUoJ0Btb3JhbGlzd2ViMy9jb21tb24tYXB0b3MtdXRpbHMnKTtcbnZhciBhcGlVdGlscyA9IHJlcXVpcmUoJ0Btb3JhbGlzd2ViMy9hcGktdXRpbHMnKTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XG5cbnZhciBNQUlOTkVUX0JBU0VfVVJMID0gJ2h0dHBzOi8vYXB0b3MtbWFpbm5ldC5hd3MtcHJvZC1hcGktMS5tb3JhbGlzLmlvJztcclxudmFyIFRFU1RORVRfQkFTRV9VUkwgPSAnaHR0cHM6Ly9hcHRvcy10ZXN0bmV0LmF3cy1wcm9kLWFwaS0xLm1vcmFsaXMuaW8nO1xyXG52YXIgQXB0b3NBcGkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQXB0b3NBcGksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBcHRvc0FwaShjb3JlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5jb3JlID0gY29yZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBBcHRvc0FwaS5jcmVhdGUgPSBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGlmICghY29yZSkge1xyXG4gICAgICAgICAgICBjb3JlID0gY29tbW9uQ29yZS5Db3JlUHJvdmlkZXIuZ2V0RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEFwdG9zQXBpKGNvcmUpO1xyXG4gICAgfTtcclxuICAgIEFwdG9zQXBpLnByb3RvdHlwZS5jcmVhdGVFbmRwb2ludCA9IGZ1bmN0aW9uIChvcGVyYXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAocmVxdWVzdCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzb2x2ZXIgPSBuZXcgYXBpVXRpbHMuT3BlcmF0aW9uVjNSZXNvbHZlcihvcGVyYXRpb24sIGNyZWF0ZUJhc2VVcmxSZXNvbHZlcihfdGhpcy5jb3JlKSwgX3RoaXMuY29yZSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlci5yZXNvbHZlKHJlcXVlc3QsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgQXB0b3NBcGkucHJvdG90eXBlLmNyZWF0ZUVuZHBvaW50V2l0aEJvZHkgPSBmdW5jdGlvbiAob3BlcmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHJlcXVlc3QsIGJvZHkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc29sdmVyID0gbmV3IGFwaVV0aWxzLk9wZXJhdGlvblYzUmVzb2x2ZXIob3BlcmF0aW9uLCBjcmVhdGVCYXNlVXJsUmVzb2x2ZXIoX3RoaXMuY29yZSksIF90aGlzLmNvcmUpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXIucmVzb2x2ZShyZXF1ZXN0LCBib2R5KTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIEFwdG9zQXBpLm1vZHVsZU5hbWUgPSAnYXB0QXBpJztcclxuICAgIHJldHVybiBBcHRvc0FwaTtcclxufShjb21tb25BcHRvc1V0aWxzLkFic3RyYWN0Q2xpZW50KSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VVcmxSZXNvbHZlcihjb3JlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlcXVlc3QpIHtcclxuICAgICAgICB2YXIgbmV0d29yayA9IHJlcXVlc3QubmV0d29yaztcclxuICAgICAgICBpZiAobmV0d29yaykge1xyXG4gICAgICAgICAgICB2YXIgZmluYWxOZXR3b3JrID0gY29tbW9uQXB0b3NVdGlscy5BcHRvc05ldHdvcmtSZXNvbHZlci5yZXNvbHZlKG5ldHdvcmssIGNvcmUpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGZpbmFsTmV0d29yaykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbWFpbm5ldCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1BSU5ORVRfQkFTRV9VUkw7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0ZXN0bmV0JzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVEVTVE5FVF9CQVNFX1VSTDtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG5ldHdvcmsnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTUFJTk5FVF9CQVNFX1VSTDtcclxuICAgIH07XHJcbn1cblxuZXhwb3J0cy5BcHRvc0FwaSA9IEFwdG9zQXBpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/aptos-api/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/auth/lib/cjs/index.cjs":
/*!**********************************************************!*\
  !*** ./node_modules/@moralisweb3/auth/lib/cjs/index.cjs ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar commonSolUtils = __webpack_require__(/*! @moralisweb3/common-sol-utils */ \"(ssr)/./node_modules/@moralisweb3/common-sol-utils/lib/cjs/index.cjs\");\nvar apiUtils = __webpack_require__(/*! @moralisweb3/api-utils */ \"(ssr)/./node_modules/@moralisweb3/api-utils/lib/cjs/index.cjs\");\nvar commonEvmUtils = __webpack_require__(/*! @moralisweb3/common-evm-utils */ \"(ssr)/./node_modules/@moralisweb3/common-evm-utils/lib/cjs/index.cjs\");\nvar commonAuthUtils = __webpack_require__(/*! @moralisweb3/common-auth-utils */ \"(ssr)/./node_modules/@moralisweb3/common-auth-utils/lib/cjs/index.cjs\");\nvar commonAptosUtils = __webpack_require__(/*! @moralisweb3/common-aptos-utils */ \"(ssr)/./node_modules/@moralisweb3/common-aptos-utils/lib/cjs/index.cjs\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\nvar AuthNetworkType;\r\n(function (AuthNetworkType) {\r\n    AuthNetworkType[\"EVM\"] = \"evm\";\r\n    AuthNetworkType[\"SOLANA\"] = \"solana\";\r\n    AuthNetworkType[\"APTOS\"] = \"aptos\";\r\n})(AuthNetworkType || (AuthNetworkType = {}));\n\nvar makeEvmRequestMessage = function (core, _a) {\r\n    var chain = _a.chain, address = _a.address; _a.networkType; var options = __rest(_a, [\"chain\", \"address\", \"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonAuthUtils.requestChallengeEvmOperation, BASE_URL, core).fetch(__assign({ chainId: commonEvmUtils.EvmChain.create(chain).hex, address: commonEvmUtils.EvmAddress.create(address).checksum }, options));\r\n};\r\nvar makeSolRequestMessage = function (core, _a) {\r\n    var address = _a.address; _a.networkType; var solNetwork = _a.solNetwork, options = __rest(_a, [\"address\", \"networkType\", \"solNetwork\"]);\r\n    // Backwards compatibility for 'solNetwork' option\r\n    if (!options.network && solNetwork) {\r\n        options.network = solNetwork;\r\n    }\r\n    return new apiUtils.OperationResolver(commonAuthUtils.requestChallengeSolanaOperation, BASE_URL, core).fetch(__assign({ address: commonSolUtils.SolAddress.create(address).toString() }, options));\r\n};\r\nvar makeAptosRequestMessage = function (core, _a) {\r\n    var address = _a.address; _a.networkType; var options = __rest(_a, [\"address\", \"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonAuthUtils.requestChallengeAptosOperation, BASE_URL, core).fetch(__assign({ address: commonAptosUtils.AptosAddress.create(address).toString() }, options));\r\n};\r\nvar makeRequestMessage = function (core) { return function (options) { return __awaiter(void 0, void 0, void 0, function () {\r\n    return __generator(this, function (_a) {\r\n        switch (options.networkType) {\r\n            case AuthNetworkType.EVM:\r\n                return [2 /*return*/, makeEvmRequestMessage(core, options)];\r\n            case AuthNetworkType.SOLANA:\r\n                return [2 /*return*/, makeSolRequestMessage(core, options)];\r\n            case AuthNetworkType.APTOS:\r\n                return [2 /*return*/, makeAptosRequestMessage(core, options)];\r\n            default:\r\n                if (!options.networkType) {\r\n                    return [2 /*return*/, makeEvmRequestMessage(core, options)];\r\n                }\r\n                throw new commonCore.MoralisAuthError({\r\n                    code: commonCore.AuthErrorCode.INCORRECT_NETWORK,\r\n                    message: \"Incorrect networkType provided. Got \\\"\".concat(options.networkType, \"\\\", Valid values are: \").concat(Object.values(AuthNetworkType)\r\n                        .map(function (value) { return \"\\\"\".concat(value, \"\\\"\"); })\r\n                        .join(', ')),\r\n                });\r\n        }\r\n    });\r\n}); }; };\n\nvar makeEvmVerify = function (core, _a) {\r\n    _a.networkType; _a.network; var options = __rest(_a, [\"networkType\", \"network\"]);\r\n    return new apiUtils.OperationResolver(commonAuthUtils.verifyChallengeEvmOperation, BASE_URL, core).fetch({\r\n        message: options.message,\r\n        signature: options.signature,\r\n    });\r\n};\r\nvar makeSolVerify = function (core, _a) {\r\n    _a.networkType; _a.network; var options = __rest(_a, [\"networkType\", \"network\"]);\r\n    return new apiUtils.OperationResolver(commonAuthUtils.verifyChallengeSolanaOperation, BASE_URL, core).fetch({\r\n        message: options.message,\r\n        signature: options.signature,\r\n    });\r\n};\r\nvar makeAptosVerify = function (core, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonAuthUtils.verifyChallengeAptosOperation, BASE_URL, core).fetch({\r\n        message: options.message,\r\n        signature: options.signature,\r\n    });\r\n};\r\nvar makeVerify = function (core) { return function (options) { return __awaiter(void 0, void 0, void 0, function () {\r\n    return __generator(this, function (_a) {\r\n        // Backwards compatibility for the 'network' parameter\r\n        if (!options.networkType && options.network) {\r\n            options.networkType = options.network;\r\n        }\r\n        switch (options.networkType) {\r\n            case AuthNetworkType.EVM:\r\n                return [2 /*return*/, makeEvmVerify(core, options)];\r\n            case AuthNetworkType.SOLANA:\r\n                return [2 /*return*/, makeSolVerify(core, options)];\r\n            case AuthNetworkType.APTOS:\r\n                return [2 /*return*/, makeAptosVerify(core, options)];\r\n            default:\r\n                if (!options.networkType) {\r\n                    return [2 /*return*/, makeEvmVerify(core, options)];\r\n                }\r\n                throw new commonCore.MoralisAuthError({\r\n                    code: commonCore.AuthErrorCode.INCORRECT_NETWORK,\r\n                    message: \"Incorrect network provided. Got \\\"\".concat(options.networkType, \"\\\", Valid values are: \").concat(Object.values(AuthNetworkType)\r\n                        .map(function (value) { return \"\\\"\".concat(value, \"\\\"\"); })\r\n                        .join(', ')),\r\n                });\r\n        }\r\n    });\r\n}); }; };\n\nvar BASE_URL = 'https://authapi.moralis.io';\r\nvar Auth = /** @class */ (function (_super) {\r\n    __extends(Auth, _super);\r\n    function Auth(core) {\r\n        var _this = _super.call(this, Auth.moduleName, core, function () { return BASE_URL; }) || this;\r\n        // Client-side compatible operation, structured in a predictable way as defined in the operation\r\n        // TODO: generate in seperate package \"client-evm-auth\" (similar to client-evm-auth)\r\n        _this.evm = {\r\n            getAddresses: function (request) {\r\n                return new apiUtils.OperationResolver(commonAuthUtils.getAddressesOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            removeBind: function (request) {\r\n                return new apiUtils.OperationResolver(commonAuthUtils.removeBindOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            requestBind: function (request) {\r\n                return new apiUtils.OperationResolver(commonAuthUtils.requestBindOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            requestChallengeEvm: function (request) {\r\n                return new apiUtils.OperationResolver(commonAuthUtils.requestChallengeEvmOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            verifyRemoveBind: function (request) {\r\n                return new apiUtils.OperationResolver(commonAuthUtils.verifyRemoveBindOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            verifyRequestBind: function (request) {\r\n                return new apiUtils.OperationResolver(commonAuthUtils.verifyRequestBindOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        // Client-side compatible operation, structured in a predictable way as defined in the operation\r\n        // TODO: generate in separate package \"client-evm-auth\" (similar to client-evm-auth)\r\n        _this.solana = {\r\n            requestChallengeSol: function (request) {\r\n                return new apiUtils.OperationResolver(commonAuthUtils.requestChallengeSolanaOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        // Resolves to requestChallengeEvm/requestChallengeSol depending on provided options (defaults to evm)\r\n        _this.requestMessage = function (options) { return makeRequestMessage(_this.core)(options); };\r\n        return _this;\r\n    }\r\n    Auth.create = function (core) {\r\n        return new Auth(core !== null && core !== void 0 ? core : commonCore.CoreProvider.getDefault());\r\n    };\r\n    Auth.prototype.setup = function () {\r\n        // Nothing\r\n    };\r\n    Auth.prototype.start = function () {\r\n        // Nothing\r\n    };\r\n    Auth.prototype.verify = function (options) {\r\n        return makeVerify(this.core)(options);\r\n    };\r\n    Auth.moduleName = 'auth';\r\n    return Auth;\r\n}(commonCore.ApiModule));\n\nexports.Auth = Auth;\nexports.BASE_URL = BASE_URL;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/auth/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/common-aptos-utils/lib/cjs/index.cjs":
/*!************************************************************************!*\
  !*** ./node_modules/@moralisweb3/common-aptos-utils/lib/cjs/index.cjs ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\n\nvar CommonAptosUtilsConfig = {\r\n    defaultAptosNetwork: {\r\n        name: 'defaultAptosNetwork',\r\n        defaultValue: 'mainnet',\r\n    },\r\n};\n\nvar CommonAptosUtilsConfigSetup = /** @class */ (function () {\r\n    function CommonAptosUtilsConfigSetup() {\r\n    }\r\n    CommonAptosUtilsConfigSetup.register = function (config) {\r\n        config.registerKey(CommonAptosUtilsConfig.defaultAptosNetwork);\r\n    };\r\n    return CommonAptosUtilsConfigSetup;\r\n}());\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n\n/**\r\n * Copied (and remove obsolete functionalities) from https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/typescript/sdk/src/hex_string.ts because\r\n * - We only care about address validation and conversion, this is a dependency for AccountAddress\r\n * - Resolving this dependency in UMD gives dependency errors\r\n */\r\n/**\r\n * A util class for working with hex strings.\r\n * Hex strings are strings that are prefixed with `0x`\r\n */\r\nvar HexString = /** @class */ (function () {\r\n    /**\r\n     * Creates new HexString instance from regular string. If specified string already starts with \"0x\" prefix,\r\n     * it will not add another one\r\n     * @param hexString String to convert\r\n     * @example\r\n     * ```\r\n     *  const string = \"string\";\r\n     *  new HexString(string); // \"0xstring\"\r\n     * ```\r\n     */\r\n    function HexString(hexString) {\r\n        if (hexString.startsWith('0x')) {\r\n            this.hexString = hexString;\r\n        }\r\n        else {\r\n            this.hexString = \"0x\".concat(hexString);\r\n        }\r\n    }\r\n    /**\r\n     * Creates new hex string from Buffer\r\n     * @param buffer A buffer to convert\r\n     * @returns New HexString\r\n     */\r\n    HexString.fromBuffer = function (buffer) {\r\n        return HexString.fromUint8Array(buffer);\r\n    };\r\n    /**\r\n     * Creates new hex string from Uint8Array\r\n     * @param arr Uint8Array to convert\r\n     * @returns New HexString\r\n     */\r\n    HexString.fromUint8Array = function (arr) {\r\n        return new HexString(bytesToHex(arr));\r\n    };\r\n    /**\r\n     * Ensures `hexString` is instance of `HexString` class\r\n     * @param hexString String to check\r\n     * @returns New HexString if `hexString` is regular string or `hexString` if it is HexString instance\r\n     * @example\r\n     * ```\r\n     *  const regularString = \"string\";\r\n     *  const hexString = new HexString(\"string\"); // \"0xstring\"\r\n     *  HexString.ensure(regularString); // \"0xstring\"\r\n     *  HexString.ensure(hexString); // \"0xstring\"\r\n     * ```\r\n     */\r\n    HexString.ensure = function (hexString) {\r\n        if (typeof hexString === 'string') {\r\n            return new HexString(hexString);\r\n        }\r\n        return hexString;\r\n    };\r\n    /**\r\n     * Getter for inner hexString\r\n     * @returns Inner hex string\r\n     */\r\n    HexString.prototype.hex = function () {\r\n        return this.hexString;\r\n    };\r\n    /**\r\n     * Getter for inner hexString without prefix\r\n     * @returns Inner hex string without prefix\r\n     * @example\r\n     * ```\r\n     *  const hexString = new HexString(\"string\"); // \"0xstring\"\r\n     *  hexString.noPrefix(); // \"string\"\r\n     * ```\r\n     */\r\n    HexString.prototype.noPrefix = function () {\r\n        return this.hexString.slice(2);\r\n    };\r\n    /**\r\n     * Overrides default `toString` method\r\n     * @returns Inner hex string\r\n     */\r\n    HexString.prototype.toString = function () {\r\n        return this.hex();\r\n    };\r\n    /**\r\n     * Trimmes extra zeroes in the begining of a string\r\n     * @returns Inner hexString without leading zeroes\r\n     * @example\r\n     * ```\r\n     *  new HexString(\"0x000000string\").toShortString(); // result = \"0xstring\"\r\n     * ```\r\n     */\r\n    HexString.prototype.toShortString = function () {\r\n        var trimmed = this.hexString.replace(/^0x0*/, '');\r\n        return \"0x\".concat(trimmed);\r\n    };\r\n    /**\r\n     * Converts hex string to a Uint8Array\r\n     * @returns Uint8Array from inner hexString without prefix\r\n     */\r\n    HexString.prototype.toUint8Array = function () {\r\n        return Uint8Array.from(hexToBytes(this.noPrefix()));\r\n    };\r\n    return HexString;\r\n}());\n\n/**\r\n * Copied (and remove obsolete functionalities) from https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/typescript/sdk/src/aptos_types/account_address.ts because\r\n * - We only care about address validation and conversion\r\n * - Resolving this dependency in UMD gives dependency errors\r\n */\r\nvar AccountAddress = /** @class */ (function () {\r\n    function AccountAddress(address) {\r\n        if (address.length !== AccountAddress.LENGTH) {\r\n            throw new Error('Expected address of length 32');\r\n        }\r\n        this.address = address;\r\n    }\r\n    /**\r\n     * Creates AccountAddress from a hex string.\r\n     * @param addr Hex string can be with a prefix or without a prefix,\r\n     *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\r\n     */\r\n    AccountAddress.fromHex = function (addr) {\r\n        var address = HexString.ensure(addr);\r\n        // If an address hex has odd number of digits, padd the hex string with 0\r\n        // e.g. '1aa' would become '01aa'.\r\n        if (address.noPrefix().length % 2 !== 0) {\r\n            address = new HexString(\"0\".concat(address.noPrefix()));\r\n        }\r\n        var addressBytes = address.toUint8Array();\r\n        if (addressBytes.length > AccountAddress.LENGTH) {\r\n            // eslint-disable-next-line quotes\r\n            throw new Error(\"Hex string is too long. Address's length is 32 bytes.\");\r\n        }\r\n        else if (addressBytes.length === AccountAddress.LENGTH) {\r\n            return new AccountAddress(addressBytes);\r\n        }\r\n        var res = new Uint8Array(AccountAddress.LENGTH);\r\n        res.set(addressBytes, AccountAddress.LENGTH - addressBytes.length);\r\n        return new AccountAddress(res);\r\n    };\r\n    /**\r\n     * Checks if the string is a valid AccountAddress\r\n     * @param addr Hex string can be with a prefix or without a prefix,\r\n     *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\r\n     */\r\n    AccountAddress.isValid = function (addr) {\r\n        // At least one zero is required\r\n        if (addr === '') {\r\n            return false;\r\n        }\r\n        var address = HexString.ensure(addr);\r\n        // If an address hex has odd number of digits, padd the hex string with 0\r\n        // e.g. '1aa' would become '01aa'.\r\n        if (address.noPrefix().length % 2 !== 0) {\r\n            address = new HexString(\"0\".concat(address.noPrefix()));\r\n        }\r\n        var addressBytes = address.toUint8Array();\r\n        return addressBytes.length <= AccountAddress.LENGTH;\r\n    };\r\n    AccountAddress.LENGTH = 32;\r\n    AccountAddress.CORE_CODE_ADDRESS = AccountAddress.fromHex('0x1');\r\n    return AccountAddress;\r\n}());\n\n/**\r\n * A representation of an address on the Aptos network.\r\n *\r\n * Use this class any time you work with an address.\r\n *\r\n * @category DataType\r\n */\r\nvar AptosAddress = /** @class */ (function () {\r\n    function AptosAddress(address) {\r\n        this.address = address;\r\n    }\r\n    /**\r\n     * Create a new instance of AptosAddress from any valid address input.\r\n     *\r\n     * @example `const address = AptosAddress.create(\"0x54ad3d30af77b60d939ae356e6606de9a4da67583f02b962d2d3f2e481484e90\")`\r\n     * @throws an error when a passed address is invalid.\r\n     */\r\n    AptosAddress.create = function (address) {\r\n        if (address instanceof AptosAddress) {\r\n            return address;\r\n        }\r\n        return new AptosAddress(AptosAddress.parse(address));\r\n    };\r\n    AptosAddress.fromJSON = function (json) {\r\n        return AptosAddress.create(json);\r\n    };\r\n    AptosAddress.parse = function (address) {\r\n        try {\r\n            if (!AccountAddress.isValid(address)) {\r\n                throw new Error('Address is invalid');\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Invalid address provided: \".concat(address),\r\n                cause: e,\r\n            });\r\n        }\r\n        if (address.startsWith('0x')) {\r\n            address = address.substring(2);\r\n        }\r\n        var addr = address.padStart(64, '0');\r\n        return \"0x\".concat(addr);\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    AptosAddress.prototype.format = function () {\r\n        return this.address;\r\n    };\r\n    /**\r\n     * Check the equality between two Aptos addresses\r\n     * @example `AptosAddress.equals(\"0x54ad3d30af77b60d939ae356e6606de9a4da67583f02b962d2d3f2e481484e90\", \"0x54ad3d30af77b60d939ae356e6606de9a4da67583f02b962d2d3f2e481484e90\")`\r\n     */\r\n    AptosAddress.equals = function (addressA, addressB) {\r\n        return AptosAddress.create(addressA).equals(addressB);\r\n    };\r\n    /**\r\n     * Checks the equality of the current address with another Aptos address.\r\n     * @example `address.equals(\"0x54ad3d30af77b60d939ae356e6606de9a4da67583f02b962d2d3f2e481484e90\")`\r\n     * @example `address.equals(AptosAddress.create(\"0x54ad3d30af77b60d939ae356e6606de9a4da67583f02b962d2d3f2e481484e90\"))`\r\n     */\r\n    AptosAddress.prototype.equals = function (address) {\r\n        return this.address === AptosAddress.create(address).address;\r\n    };\r\n    /**\r\n     * @returns a string representing the address.\r\n     * @example address.toString(); // \"0x54ad3d30af77b60d939ae356e6606de9a4da67583f02b962d2d3f2e481484e90\"\r\n     */\r\n    AptosAddress.prototype.toString = function () {\r\n        return this.address;\r\n    };\r\n    /**\r\n     * @returns a string representing the address.\r\n     * @example address.toJSON(); // \"0x54ad3d30af77b60d939ae356e6606de9a4da67583f02b962d2d3f2e481484e90\"\r\n     */\r\n    AptosAddress.prototype.toJSON = function () {\r\n        return this.address;\r\n    };\r\n    Object.defineProperty(AptosAddress.prototype, \"short\", {\r\n        /**\r\n         * @returns a string representing the address, the leading zeros are removed from the address.\r\n         * @example address.short; // \"0x1\"\r\n         */\r\n        get: function () {\r\n            var address = this.address.substring(2).replace(/^0+/, '');\r\n            return \"0x\".concat(address);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return AptosAddress;\r\n}());\n\nvar aptosNetworkNames = ['mainnet', 'testnet', 'devnet'];\r\nvar aptosChainIdToNetworkNames = {\r\n    '1': 'mainnet',\r\n    '2': 'testnet',\r\n};\r\n/**\r\n * A representation of a Aptos network.\r\n *\r\n * @category DataType\r\n */\r\nvar AptosNetwork = /** @class */ (function () {\r\n    function AptosNetwork(network) {\r\n        this.network = network;\r\n    }\r\n    Object.defineProperty(AptosNetwork, \"MAINNET\", {\r\n        /**\r\n         * Returns MAINNET network\r\n         *\r\n         * @example AptosNetwork.MAINNET\r\n         */\r\n        get: function () {\r\n            return AptosNetwork.create('mainnet');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosNetwork, \"TESTNET\", {\r\n        /**\r\n         * Returns TESTNET network\r\n         *\r\n         * @example AptosNetwork.MAINNET\r\n         */\r\n        get: function () {\r\n            return AptosNetwork.create('testnet');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosNetwork, \"DEVNET\", {\r\n        /**\r\n         * Returns DEVNET network\r\n         *\r\n         * @example AptosNetwork.MAINNET\r\n         */\r\n        get: function () {\r\n            return AptosNetwork.create('devnet');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create a new instance of AptosNetwork from any valid network input.\r\n     *\r\n     * @example `const network = AptosNetwork.create(\"mainnet\")`\r\n     * @throws an error when a passed network is invalid.\r\n     */\r\n    AptosNetwork.create = function (network) {\r\n        return network instanceof AptosNetwork ? network : new AptosNetwork(AptosNetwork.parse(network));\r\n    };\r\n    AptosNetwork.parse = function (network) {\r\n        var _a;\r\n        if (typeof network !== 'string') {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Aptos network is not supported: \".concat(network),\r\n            });\r\n        }\r\n        var networkName = (_a = aptosChainIdToNetworkNames[network]) !== null && _a !== void 0 ? _a : network;\r\n        if (!aptosNetworkNames.includes(networkName)) {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Aptos network is not supported: \".concat(network),\r\n            });\r\n        }\r\n        return networkName;\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    AptosNetwork.prototype.format = function () {\r\n        return this.network;\r\n    };\r\n    /**\r\n     * Checks the equality of the current network with another Aptos network.\r\n     * @example `network.equals(\"mainnet\")`\r\n     * @example `network.equals(AptosNetwork.create(\"mainnet\"))`\r\n     */\r\n    AptosNetwork.prototype.equals = function (network) {\r\n        return this.network === AptosNetwork.create(network).network;\r\n    };\r\n    /**\r\n     * @returns a string representing the network.\r\n     * @example network.toJSON(); // \"mainnet\"\r\n     */\r\n    AptosNetwork.prototype.toJSON = function () {\r\n        return this.network;\r\n    };\r\n    /**\r\n     * @returns a string representing the network.\r\n     * @example network.toString(); // \"mainnet\"\r\n     */\r\n    AptosNetwork.prototype.toString = function () {\r\n        return this.network;\r\n    };\r\n    return AptosNetwork;\r\n}());\n\nvar unitToDecimals = {\r\n    aptos: 8,\r\n    octas: 0,\r\n};\r\n/**\r\n * The AptosNative class is a MoralisData that references to the value of Aptos native currency APT\r\n *\r\n * @category DataType\r\n */\r\nvar AptosNative = /** @class */ (function () {\r\n    function AptosNative(rawValue) {\r\n        this.rawValue = rawValue;\r\n    }\r\n    /**\r\n     * Create a new instance of AptosNative from any valid {@link AptosNativeInput} value.\r\n     * @param value - the value to create the AptosNative from\r\n     * @param unit - the unit of the value (optional), defaults to `aptos`\r\n     * @returns a new instance of AptosNative\r\n     * @example\r\n     * ```ts\r\n     * const native = AptosNative.create(2, 'octas');\r\n     * const native = AptosNative.create(2);\r\n     *```\r\n     */\r\n    AptosNative.create = function (value, unit) {\r\n        if (value instanceof AptosNative) {\r\n            return value;\r\n        }\r\n        return new AptosNative(AptosNative.parse(value, unit));\r\n    };\r\n    AptosNative.fromJSON = function (json) {\r\n        return AptosNative.create(json, 'octas');\r\n    };\r\n    AptosNative.parse = function (value, unit) {\r\n        if (unit === void 0) { unit = 'aptos'; }\r\n        var decimal;\r\n        if (typeof unit === 'number') {\r\n            decimal = unit;\r\n        }\r\n        else if (unitToDecimals[unit] !== undefined) {\r\n            decimal = unitToDecimals[unit];\r\n        }\r\n        else {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Not supported Aptos unit: \".concat(unit),\r\n            });\r\n        }\r\n        return commonCore.BigNumber.fromDecimal(value.toString(), decimal);\r\n    };\r\n    /**\r\n     * Compares two AptosNativeish values.\r\n     * @param valueA - the first value to compare\r\n     * @param valueB - the second value to compare\r\n     * @returns true if the values are equal\r\n     * @example\r\n     * ```ts\r\n     * AptosNative.equals(AptosNative.create(1), AptosNative.create(1)); // true\r\n     * ```\r\n     */\r\n    AptosNative.equals = function (valueA, valueB) {\r\n        var aptosNativeA = AptosNative.create(valueA);\r\n        var aptosNativeB = AptosNative.create(valueB);\r\n        return aptosNativeA.octas === aptosNativeB.octas;\r\n    };\r\n    /**\r\n     * Compares AptosNative with current instance.\r\n     * @param value - the value to compare with\r\n     * @returns true if the values are equal\r\n     * @example\r\n     * ```ts\r\n     * const native = AptosNative.create(2, 'octas');\r\n     * native.equals(AptosNative.create(1)); // false\r\n     * ```\r\n     */\r\n    AptosNative.prototype.equals = function (value) {\r\n        return AptosNative.equals(this, value);\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    AptosNative.prototype.format = function () {\r\n        return this.octas;\r\n    };\r\n    /**\r\n     * Converts the AptosNative to a string.\r\n     * @returns the value of the AptosNative as a string\r\n     * @example `native.toJSON()`\r\n     */\r\n    AptosNative.prototype.toJSON = function () {\r\n        return this.octas;\r\n    };\r\n    /**\r\n     * Converts the AptosNative to a string.\r\n     * @returns the value of the AptosNative as a string\r\n     * @example `native.toString()`\r\n     */\r\n    AptosNative.prototype.toString = function () {\r\n        return this.octas;\r\n    };\r\n    Object.defineProperty(AptosNative.prototype, \"value\", {\r\n        /**\r\n         * @returns the value of the AptosNative as a BigNumber\r\n         * @example `native.value`\r\n         */\r\n        get: function () {\r\n            return this.rawValue;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosNative.prototype, \"aptos\", {\r\n        /**\r\n         * Converts the AptosNative to an aptos unit.\r\n         * @returns the value of the AptosNative as an aptos string\r\n         * @example `native.aptos`\r\n         */\r\n        get: function () {\r\n            return this.rawValue.toDecimal(unitToDecimals['aptos']);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosNative.prototype, \"octas\", {\r\n        /**\r\n         * Converts the AptosNative to a string.\r\n         * @returns the value of the AptosNative as a string\r\n         * @example `native.lamports`\r\n         */\r\n        get: function () {\r\n            return this.rawValue.toString();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return AptosNative;\r\n}());\n\nvar AptosNetworkResolver = /** @class */ (function () {\r\n    function AptosNetworkResolver() {\r\n    }\r\n    AptosNetworkResolver.resolve = function (network, core) {\r\n        if (!network) {\r\n            network = core.config.get(CommonAptosUtilsConfig.defaultAptosNetwork);\r\n        }\r\n        return AptosNetwork.create(network).network;\r\n    };\r\n    return AptosNetworkResolver;\r\n}());\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar CommonAptosUtils = /** @class */ (function (_super) {\r\n    __extends(CommonAptosUtils, _super);\r\n    function CommonAptosUtils(core) {\r\n        return _super.call(this, CommonAptosUtils.moduleName, core) || this;\r\n    }\r\n    CommonAptosUtils.create = function (core) {\r\n        return new CommonAptosUtils(core !== null && core !== void 0 ? core : commonCore.CoreProvider.getDefault());\r\n    };\r\n    CommonAptosUtils.prototype.setup = function () {\r\n        CommonAptosUtilsConfigSetup.register(this.core.config);\r\n    };\r\n    CommonAptosUtils.prototype.start = function () {\r\n        // Nothing\r\n    };\r\n    Object.defineProperty(CommonAptosUtils.prototype, \"AptosAddress\", {\r\n        get: function () {\r\n            return AptosAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommonAptosUtils.prototype, \"AptosNative\", {\r\n        get: function () {\r\n            return AptosNative;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommonAptosUtils.prototype, \"AptosNetwork\", {\r\n        get: function () {\r\n            return AptosNetwork;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    CommonAptosUtils.moduleName = 'aptosUtils';\r\n    return CommonAptosUtils;\r\n}(commonCore.Module));\n\n// $ref: #/components/schemas/NFTTokenResponse/properties/default_properties\r\n// typeName: NFTTokenResponse_default_properties\r\nvar AptosNFTTokenResponseDefaultProperties = /** @class */ (function () {\r\n    function AptosNFTTokenResponseDefaultProperties() {\r\n    }\r\n    AptosNFTTokenResponseDefaultProperties.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosNFTTokenResponseDefaultProperties.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosNFTTokenResponseDefaultProperties;\r\n}());\n\nvar AptosNFTTokenResponse = /** @class */ (function () {\r\n    function AptosNFTTokenResponse(input) {\r\n        this.collectionDataIdHash = input.collectionDataIdHash;\r\n        this.collectionName = input.collectionName;\r\n        this.creatorAddress = AptosAddress.create(input.creatorAddress);\r\n        this.defaultProperties = AptosNFTTokenResponseDefaultProperties.create(input.defaultProperties);\r\n        this.description = input.description;\r\n        this.descriptionMutable = input.descriptionMutable;\r\n        this.largestPropertyVersion = input.largestPropertyVersion;\r\n        this.lastTransactionTimestamp = input.lastTransactionTimestamp;\r\n        this.lastTransactionVersion = input.lastTransactionVersion;\r\n        this.maximum = input.maximum;\r\n        this.maximumMutable = input.maximumMutable;\r\n        this.metadataUri = input.metadataUri;\r\n        this.name = input.name;\r\n        this.payeeAddress = AptosAddress.create(input.payeeAddress);\r\n        this.propertiesMutable = input.propertiesMutable;\r\n        this.royaltyMutable = input.royaltyMutable;\r\n        this.royaltyPointsDenominator = input.royaltyPointsDenominator;\r\n        this.royaltyPointsNumerator = input.royaltyPointsNumerator;\r\n        this.supply = input.supply;\r\n        this.tokenDataIdHash = input.tokenDataIdHash;\r\n        this.uriMutable = input.uriMutable;\r\n    }\r\n    AptosNFTTokenResponse.create = function (input) {\r\n        if (input instanceof AptosNFTTokenResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTTokenResponse(input);\r\n    };\r\n    AptosNFTTokenResponse.fromJSON = function (json) {\r\n        var input = {\r\n            collectionDataIdHash: json.collection_data_id_hash,\r\n            collectionName: json.collection_name,\r\n            creatorAddress: AptosAddress.fromJSON(json.creator_address),\r\n            defaultProperties: AptosNFTTokenResponseDefaultProperties.fromJSON(json.default_properties),\r\n            description: json.description,\r\n            descriptionMutable: json.description_mutable,\r\n            largestPropertyVersion: json.largest_property_version,\r\n            lastTransactionTimestamp: json.last_transaction_timestamp,\r\n            lastTransactionVersion: json.last_transaction_version,\r\n            maximum: json.maximum,\r\n            maximumMutable: json.maximum_mutable,\r\n            metadataUri: json.metadata_uri,\r\n            name: json.name,\r\n            payeeAddress: AptosAddress.fromJSON(json.payee_address),\r\n            propertiesMutable: json.properties_mutable,\r\n            royaltyMutable: json.royalty_mutable,\r\n            royaltyPointsDenominator: json.royalty_points_denominator,\r\n            royaltyPointsNumerator: json.royalty_points_numerator,\r\n            supply: json.supply,\r\n            tokenDataIdHash: json.token_data_id_hash,\r\n            uriMutable: json.uri_mutable,\r\n        };\r\n        return AptosNFTTokenResponse.create(input);\r\n    };\r\n    AptosNFTTokenResponse.prototype.toJSON = function () {\r\n        return {\r\n            collection_data_id_hash: this.collectionDataIdHash,\r\n            collection_name: this.collectionName,\r\n            creator_address: this.creatorAddress.toJSON(),\r\n            default_properties: this.defaultProperties,\r\n            description: this.description,\r\n            description_mutable: this.descriptionMutable,\r\n            largest_property_version: this.largestPropertyVersion,\r\n            last_transaction_timestamp: this.lastTransactionTimestamp,\r\n            last_transaction_version: this.lastTransactionVersion,\r\n            maximum: this.maximum,\r\n            maximum_mutable: this.maximumMutable,\r\n            metadata_uri: this.metadataUri,\r\n            name: this.name,\r\n            payee_address: this.payeeAddress.toJSON(),\r\n            properties_mutable: this.propertiesMutable,\r\n            royalty_mutable: this.royaltyMutable,\r\n            royalty_points_denominator: this.royaltyPointsDenominator,\r\n            royalty_points_numerator: this.royaltyPointsNumerator,\r\n            supply: this.supply,\r\n            token_data_id_hash: this.tokenDataIdHash,\r\n            uri_mutable: this.uriMutable,\r\n        };\r\n    };\r\n    return AptosNFTTokenResponse;\r\n}());\n\nvar GetNFTsByIdsOperation = {\r\n    operationId: \"getNFTsByIds\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts\",\r\n    parameterNames: [\"token_ids\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return AptosNFTTokenResponse.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        var tokenIds = request.tokenIds;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            token_ids: tokenIds,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosNFTTokensByCollectionResponse = /** @class */ (function () {\r\n    function AptosNFTTokensByCollectionResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTTokenResponse.create(item); });\r\n    }\r\n    AptosNFTTokensByCollectionResponse.create = function (input) {\r\n        if (input instanceof AptosNFTTokensByCollectionResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTTokensByCollectionResponse(input);\r\n    };\r\n    AptosNFTTokensByCollectionResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTTokenResponse.fromJSON(item); }),\r\n        };\r\n        return AptosNFTTokensByCollectionResponse.create(input);\r\n    };\r\n    AptosNFTTokensByCollectionResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosNFTTokensByCollectionResponse;\r\n}());\n\nvar GetNFTsByCollectionOperation = {\r\n    operationId: \"getNFTsByCollection\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts/collections/{collection_data_id_hash}/tokens\",\r\n    parameterNames: [\"collection_data_id_hash\", \"limit\", \"offset\", \"cursor\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTTokensByCollectionResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var collectionDataIdHash = request.collectionDataIdHash;\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            collection_data_id_hash: collectionDataIdHash,\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosNFTTokensByCreatorsResponse = /** @class */ (function () {\r\n    function AptosNFTTokensByCreatorsResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTTokenResponse.create(item); });\r\n    }\r\n    AptosNFTTokensByCreatorsResponse.create = function (input) {\r\n        if (input instanceof AptosNFTTokensByCreatorsResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTTokensByCreatorsResponse(input);\r\n    };\r\n    AptosNFTTokensByCreatorsResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTTokenResponse.fromJSON(item); }),\r\n        };\r\n        return AptosNFTTokensByCreatorsResponse.create(input);\r\n    };\r\n    AptosNFTTokensByCreatorsResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosNFTTokensByCreatorsResponse;\r\n}());\n\nvar GetNFTsByCreatorsOperation = {\r\n    operationId: \"getNFTsByCreators\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts/creators\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"creator_addresses\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTTokensByCreatorsResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var creatorAddresses = request.creatorAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            creator_addresses: creatorAddresses.map(function (item) { return item.toJSON(); }),\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosNFTCollectionItemResponse = /** @class */ (function () {\r\n    function AptosNFTCollectionItemResponse(input) {\r\n        this.collectionDataIdHash = input.collectionDataIdHash;\r\n        this.collectionName = input.collectionName;\r\n        this.creatorAddress = AptosAddress.create(input.creatorAddress);\r\n        this.description = input.description;\r\n        this.descriptionMutable = input.descriptionMutable;\r\n        this.lastTransactionTimestamp = input.lastTransactionTimestamp;\r\n        this.lastTransactionVersion = input.lastTransactionVersion;\r\n        this.maximum = input.maximum;\r\n        this.maximumMutable = input.maximumMutable;\r\n        this.metadataUri = input.metadataUri;\r\n        this.supply = input.supply;\r\n        this.tableHandle = input.tableHandle;\r\n        this.uriMutable = input.uriMutable;\r\n    }\r\n    AptosNFTCollectionItemResponse.create = function (input) {\r\n        if (input instanceof AptosNFTCollectionItemResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTCollectionItemResponse(input);\r\n    };\r\n    AptosNFTCollectionItemResponse.fromJSON = function (json) {\r\n        var input = {\r\n            collectionDataIdHash: json.collection_data_id_hash,\r\n            collectionName: json.collection_name,\r\n            creatorAddress: AptosAddress.fromJSON(json.creator_address),\r\n            description: json.description,\r\n            descriptionMutable: json.description_mutable,\r\n            lastTransactionTimestamp: json.last_transaction_timestamp,\r\n            lastTransactionVersion: json.last_transaction_version,\r\n            maximum: json.maximum,\r\n            maximumMutable: json.maximum_mutable,\r\n            metadataUri: json.metadata_uri,\r\n            supply: json.supply,\r\n            tableHandle: json.table_handle,\r\n            uriMutable: json.uri_mutable,\r\n        };\r\n        return AptosNFTCollectionItemResponse.create(input);\r\n    };\r\n    AptosNFTCollectionItemResponse.prototype.toJSON = function () {\r\n        return {\r\n            collection_data_id_hash: this.collectionDataIdHash,\r\n            collection_name: this.collectionName,\r\n            creator_address: this.creatorAddress.toJSON(),\r\n            description: this.description,\r\n            description_mutable: this.descriptionMutable,\r\n            last_transaction_timestamp: this.lastTransactionTimestamp,\r\n            last_transaction_version: this.lastTransactionVersion,\r\n            maximum: this.maximum,\r\n            maximum_mutable: this.maximumMutable,\r\n            metadata_uri: this.metadataUri,\r\n            supply: this.supply,\r\n            table_handle: this.tableHandle,\r\n            uri_mutable: this.uriMutable,\r\n        };\r\n    };\r\n    return AptosNFTCollectionItemResponse;\r\n}());\n\nvar AptosNFTCollectionsByNameRangeResponse = /** @class */ (function () {\r\n    function AptosNFTCollectionsByNameRangeResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTCollectionItemResponse.create(item); });\r\n    }\r\n    AptosNFTCollectionsByNameRangeResponse.create = function (input) {\r\n        if (input instanceof AptosNFTCollectionsByNameRangeResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTCollectionsByNameRangeResponse(input);\r\n    };\r\n    AptosNFTCollectionsByNameRangeResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTCollectionItemResponse.fromJSON(item); }),\r\n        };\r\n        return AptosNFTCollectionsByNameRangeResponse.create(input);\r\n    };\r\n    AptosNFTCollectionsByNameRangeResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosNFTCollectionsByNameRangeResponse;\r\n}());\n\nvar GetNFTCollectionsOperation = {\r\n    operationId: \"getNFTCollections\",\r\n    groupName: \"collections\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/collections\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"fromName\", \"toName\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTCollectionsByNameRangeResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var fromName = request.fromName;\r\n        var toName = request.toName;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            fromName: fromName,\r\n            toName: toName,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar GetNFTCollectionsByIdsOperation = {\r\n    operationId: \"getNFTCollectionsByIds\",\r\n    groupName: \"collections\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/collections/ids\",\r\n    parameterNames: [\"ids\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return AptosNFTCollectionItemResponse.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        var ids = request.ids;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            ids: ids,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosNFTCollectionsByCreatorResponse = /** @class */ (function () {\r\n    function AptosNFTCollectionsByCreatorResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTCollectionItemResponse.create(item); });\r\n    }\r\n    AptosNFTCollectionsByCreatorResponse.create = function (input) {\r\n        if (input instanceof AptosNFTCollectionsByCreatorResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTCollectionsByCreatorResponse(input);\r\n    };\r\n    AptosNFTCollectionsByCreatorResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTCollectionItemResponse.fromJSON(item); }),\r\n        };\r\n        return AptosNFTCollectionsByCreatorResponse.create(input);\r\n    };\r\n    AptosNFTCollectionsByCreatorResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosNFTCollectionsByCreatorResponse;\r\n}());\n\nvar GetNFTCollectionsByCreatorOperation = {\r\n    operationId: \"getNFTCollectionsByCreator\",\r\n    groupName: \"collections\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/collections/creators\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"creator_address\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTCollectionsByCreatorResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var creatorAddress = AptosAddress.create(request.creatorAddress);\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            creator_address: creatorAddress.toJSON(),\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\n// $ref: #/components/schemas/NFTOwnerResponse/properties/token_properties\r\n// typeName: NFTOwnerResponse_token_properties\r\nvar AptosNFTOwnerResponseTokenProperties = /** @class */ (function () {\r\n    function AptosNFTOwnerResponseTokenProperties() {\r\n    }\r\n    AptosNFTOwnerResponseTokenProperties.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosNFTOwnerResponseTokenProperties.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosNFTOwnerResponseTokenProperties;\r\n}());\n\nvar AptosNFTOwnerResponse = /** @class */ (function () {\r\n    function AptosNFTOwnerResponse(input) {\r\n        this.amount = AptosNative.create(input.amount);\r\n        this.collectionDataIdHash = input.collectionDataIdHash;\r\n        this.collectionName = input.collectionName;\r\n        this.creatorAddress = AptosAddress.create(input.creatorAddress);\r\n        this.lastTransactionTimestamp = input.lastTransactionTimestamp;\r\n        this.lastTransactionVersion = input.lastTransactionVersion;\r\n        this.name = input.name;\r\n        this.ownerAddress = AptosAddress.create(input.ownerAddress);\r\n        this.propertyVersion = input.propertyVersion;\r\n        this.tableType = input.tableType;\r\n        this.tokenDataIdHash = input.tokenDataIdHash;\r\n        this.tokenProperties = AptosNFTOwnerResponseTokenProperties.create(input.tokenProperties);\r\n    }\r\n    AptosNFTOwnerResponse.create = function (input) {\r\n        if (input instanceof AptosNFTOwnerResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTOwnerResponse(input);\r\n    };\r\n    AptosNFTOwnerResponse.fromJSON = function (json) {\r\n        var input = {\r\n            amount: AptosNative.fromJSON(json.amount),\r\n            collectionDataIdHash: json.collection_data_id_hash,\r\n            collectionName: json.collection_name,\r\n            creatorAddress: AptosAddress.fromJSON(json.creator_address),\r\n            lastTransactionTimestamp: json.last_transaction_timestamp,\r\n            lastTransactionVersion: json.last_transaction_version,\r\n            name: json.name,\r\n            ownerAddress: AptosAddress.fromJSON(json.owner_address),\r\n            propertyVersion: json.property_version,\r\n            tableType: json.table_type,\r\n            tokenDataIdHash: json.token_data_id_hash,\r\n            tokenProperties: AptosNFTOwnerResponseTokenProperties.fromJSON(json.token_properties),\r\n        };\r\n        return AptosNFTOwnerResponse.create(input);\r\n    };\r\n    AptosNFTOwnerResponse.prototype.toJSON = function () {\r\n        return {\r\n            amount: this.amount.toJSON(),\r\n            collection_data_id_hash: this.collectionDataIdHash,\r\n            collection_name: this.collectionName,\r\n            creator_address: this.creatorAddress.toJSON(),\r\n            last_transaction_timestamp: this.lastTransactionTimestamp,\r\n            last_transaction_version: this.lastTransactionVersion,\r\n            name: this.name,\r\n            owner_address: this.ownerAddress.toJSON(),\r\n            property_version: this.propertyVersion,\r\n            table_type: this.tableType,\r\n            token_data_id_hash: this.tokenDataIdHash,\r\n            token_properties: this.tokenProperties,\r\n        };\r\n    };\r\n    return AptosNFTOwnerResponse;\r\n}());\n\nvar AptosNFTOwnersByTokensResponse = /** @class */ (function () {\r\n    function AptosNFTOwnersByTokensResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTOwnerResponse.create(item); });\r\n    }\r\n    AptosNFTOwnersByTokensResponse.create = function (input) {\r\n        if (input instanceof AptosNFTOwnersByTokensResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTOwnersByTokensResponse(input);\r\n    };\r\n    AptosNFTOwnersByTokensResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTOwnerResponse.fromJSON(item); }),\r\n        };\r\n        return AptosNFTOwnersByTokensResponse.create(input);\r\n    };\r\n    AptosNFTOwnersByTokensResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosNFTOwnersByTokensResponse;\r\n}());\n\nvar GetNFTOwnersByTokensOperation = {\r\n    operationId: \"getNFTOwnersByTokens\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts/owners\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"token_ids\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTOwnersByTokensResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var tokenIds = request.tokenIds;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            token_ids: tokenIds,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosNFTOwnersByCollectionResponse = /** @class */ (function () {\r\n    function AptosNFTOwnersByCollectionResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTOwnerResponse.create(item); });\r\n    }\r\n    AptosNFTOwnersByCollectionResponse.create = function (input) {\r\n        if (input instanceof AptosNFTOwnersByCollectionResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTOwnersByCollectionResponse(input);\r\n    };\r\n    AptosNFTOwnersByCollectionResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTOwnerResponse.fromJSON(item); }),\r\n        };\r\n        return AptosNFTOwnersByCollectionResponse.create(input);\r\n    };\r\n    AptosNFTOwnersByCollectionResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosNFTOwnersByCollectionResponse;\r\n}());\n\nvar GetNFTOwnersByCollectionOperation = {\r\n    operationId: \"getNFTOwnersByCollection\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts/collections/{collection_data_id_hash}/owners\",\r\n    parameterNames: [\"collection_data_id_hash\", \"limit\", \"offset\", \"cursor\", \"wallet_blacklist\", \"wallet_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTOwnersByCollectionResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var collectionDataIdHash = request.collectionDataIdHash;\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var walletBlacklist = request.walletBlacklist;\r\n        var walletWhitelist = request.walletWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            collection_data_id_hash: collectionDataIdHash,\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            wallet_blacklist: walletBlacklist,\r\n            wallet_whitelist: walletWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\n// $ref: #/components/schemas/NFTOwnersOfCollectionResponse\r\n// type: NFTOwnersOfCollectionResponse\r\n// properties:\r\n// - cursor ($ref: #/components/schemas/NFTOwnersOfCollectionResponse/properties/cursor)\r\n// - hasNextPage ($ref: #/components/schemas/NFTOwnersOfCollectionResponse/properties/hasNextPage)\r\n// - result ($ref: #/components/schemas/NFTOwnersOfCollectionResponse/properties/result)\r\nvar AptosNFTOwnersOfCollectionResponse = /** @class */ (function () {\r\n    function AptosNFTOwnersOfCollectionResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result;\r\n    }\r\n    AptosNFTOwnersOfCollectionResponse.create = function (input) {\r\n        if (input instanceof AptosNFTOwnersOfCollectionResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTOwnersOfCollectionResponse(input);\r\n    };\r\n    AptosNFTOwnersOfCollectionResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result,\r\n        };\r\n        return AptosNFTOwnersOfCollectionResponse.create(input);\r\n    };\r\n    AptosNFTOwnersOfCollectionResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result,\r\n        };\r\n    };\r\n    return AptosNFTOwnersOfCollectionResponse;\r\n}());\n\nvar GetNFTOwnersOfCollectionOperation = {\r\n    operationId: \"getNFTOwnersOfCollection\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts/collections/{collection_data_id_hash}/owners/list\",\r\n    parameterNames: [\"collection_data_id_hash\", \"limit\", \"offset\", \"cursor\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTOwnersOfCollectionResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var collectionDataIdHash = request.collectionDataIdHash;\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            collection_data_id_hash: collectionDataIdHash,\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosNFTTransferResponse = /** @class */ (function () {\r\n    function AptosNFTTransferResponse(input) {\r\n        this.coinAmount = input.coinAmount ? AptosNative.create(input.coinAmount) : undefined;\r\n        this.coinType = input.coinType;\r\n        this.collectionDataIdHash = input.collectionDataIdHash;\r\n        this.collectionName = input.collectionName;\r\n        this.creatorAddress = AptosAddress.create(input.creatorAddress);\r\n        this.eventAccountAddress = input.eventAccountAddress;\r\n        this.eventCreationNumber = input.eventCreationNumber;\r\n        this.eventSequenceNumber = input.eventSequenceNumber;\r\n        this.fromAddress = input.fromAddress ? AptosAddress.create(input.fromAddress) : undefined;\r\n        this.name = input.name;\r\n        this.propertyVersion = input.propertyVersion;\r\n        this.toAddress = input.toAddress ? AptosAddress.create(input.toAddress) : undefined;\r\n        this.tokenAmount = AptosNative.create(input.tokenAmount);\r\n        this.tokenDataIdHash = input.tokenDataIdHash;\r\n        this.transactionTimestamp = input.transactionTimestamp;\r\n        this.transactionVersion = input.transactionVersion;\r\n        this.transferType = input.transferType;\r\n    }\r\n    AptosNFTTransferResponse.create = function (input) {\r\n        if (input instanceof AptosNFTTransferResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTTransferResponse(input);\r\n    };\r\n    AptosNFTTransferResponse.fromJSON = function (json) {\r\n        var input = {\r\n            coinAmount: json.coin_amount ? AptosNative.fromJSON(json.coin_amount) : undefined,\r\n            coinType: json.coin_type,\r\n            collectionDataIdHash: json.collection_data_id_hash,\r\n            collectionName: json.collection_name,\r\n            creatorAddress: AptosAddress.fromJSON(json.creator_address),\r\n            eventAccountAddress: json.event_account_address,\r\n            eventCreationNumber: json.event_creation_number,\r\n            eventSequenceNumber: json.event_sequence_number,\r\n            fromAddress: json.from_address ? AptosAddress.fromJSON(json.from_address) : undefined,\r\n            name: json.name,\r\n            propertyVersion: json.property_version,\r\n            toAddress: json.to_address ? AptosAddress.fromJSON(json.to_address) : undefined,\r\n            tokenAmount: AptosNative.fromJSON(json.token_amount),\r\n            tokenDataIdHash: json.token_data_id_hash,\r\n            transactionTimestamp: json.transaction_timestamp,\r\n            transactionVersion: json.transaction_version,\r\n            transferType: json.transfer_type,\r\n        };\r\n        return AptosNFTTransferResponse.create(input);\r\n    };\r\n    AptosNFTTransferResponse.prototype.toJSON = function () {\r\n        return {\r\n            coin_amount: this.coinAmount ? this.coinAmount.toJSON() : undefined,\r\n            coin_type: this.coinType,\r\n            collection_data_id_hash: this.collectionDataIdHash,\r\n            collection_name: this.collectionName,\r\n            creator_address: this.creatorAddress.toJSON(),\r\n            event_account_address: this.eventAccountAddress,\r\n            event_creation_number: this.eventCreationNumber,\r\n            event_sequence_number: this.eventSequenceNumber,\r\n            from_address: this.fromAddress ? this.fromAddress.toJSON() : undefined,\r\n            name: this.name,\r\n            property_version: this.propertyVersion,\r\n            to_address: this.toAddress ? this.toAddress.toJSON() : undefined,\r\n            token_amount: this.tokenAmount.toJSON(),\r\n            token_data_id_hash: this.tokenDataIdHash,\r\n            transaction_timestamp: this.transactionTimestamp,\r\n            transaction_version: this.transactionVersion,\r\n            transfer_type: this.transferType,\r\n        };\r\n    };\r\n    return AptosNFTTransferResponse;\r\n}());\n\nvar AptosNFTTransfersByTokensResponse = /** @class */ (function () {\r\n    function AptosNFTTransfersByTokensResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTTransferResponse.create(item); });\r\n    }\r\n    AptosNFTTransfersByTokensResponse.create = function (input) {\r\n        if (input instanceof AptosNFTTransfersByTokensResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTTransfersByTokensResponse(input);\r\n    };\r\n    AptosNFTTransfersByTokensResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTTransferResponse.fromJSON(item); }),\r\n        };\r\n        return AptosNFTTransfersByTokensResponse.create(input);\r\n    };\r\n    AptosNFTTransfersByTokensResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosNFTTransfersByTokensResponse;\r\n}());\n\nvar GetNFTTransfersByIdsOperation = {\r\n    operationId: \"getNFTTransfersByIds\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts/transfers\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"wallet_blacklist\", \"wallet_whitelist\", \"token_ids\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTTransfersByTokensResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var walletBlacklist = request.walletBlacklist;\r\n        var walletWhitelist = request.walletWhitelist;\r\n        var tokenIds = request.tokenIds;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            wallet_blacklist: walletBlacklist,\r\n            wallet_whitelist: walletWhitelist,\r\n            token_ids: tokenIds,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetNFTTransfersByCollectionResponse = /** @class */ (function () {\r\n    function AptosGetNFTTransfersByCollectionResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTTransferResponse.create(item); });\r\n    }\r\n    AptosGetNFTTransfersByCollectionResponse.create = function (input) {\r\n        if (input instanceof AptosGetNFTTransfersByCollectionResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetNFTTransfersByCollectionResponse(input);\r\n    };\r\n    AptosGetNFTTransfersByCollectionResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTTransferResponse.fromJSON(item); }),\r\n        };\r\n        return AptosGetNFTTransfersByCollectionResponse.create(input);\r\n    };\r\n    AptosGetNFTTransfersByCollectionResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetNFTTransfersByCollectionResponse;\r\n}());\n\nvar GetNFTTransfersByCollectionOperation = {\r\n    operationId: \"getNFTTransfersByCollection\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts/transfers/collections/{collection_data_id_hash}\",\r\n    parameterNames: [\"collection_data_id_hash\", \"limit\", \"offset\", \"cursor\", \"wallet_whitelist\", \"wallet_blacklist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetNFTTransfersByCollectionResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var collectionDataIdHash = request.collectionDataIdHash;\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var walletWhitelist = request.walletWhitelist;\r\n        var walletBlacklist = request.walletBlacklist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            collection_data_id_hash: collectionDataIdHash,\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            wallet_whitelist: walletWhitelist,\r\n            wallet_blacklist: walletBlacklist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetNFTTransfersByCreatorsResponse = /** @class */ (function () {\r\n    function AptosGetNFTTransfersByCreatorsResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTTransferResponse.create(item); });\r\n    }\r\n    AptosGetNFTTransfersByCreatorsResponse.create = function (input) {\r\n        if (input instanceof AptosGetNFTTransfersByCreatorsResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetNFTTransfersByCreatorsResponse(input);\r\n    };\r\n    AptosGetNFTTransfersByCreatorsResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTTransferResponse.fromJSON(item); }),\r\n        };\r\n        return AptosGetNFTTransfersByCreatorsResponse.create(input);\r\n    };\r\n    AptosGetNFTTransfersByCreatorsResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetNFTTransfersByCreatorsResponse;\r\n}());\n\nvar GetNFTTransfersByCreatorsOperation = {\r\n    operationId: \"getNFTTransfersByCreators\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts/transfers/creators\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"creator_addresses\", \"collection_blacklist\", \"collection_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetNFTTransfersByCreatorsResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var creatorAddresses = request.creatorAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var collectionBlacklist = request.collectionBlacklist;\r\n        var collectionWhitelist = request.collectionWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            creator_addresses: creatorAddresses.map(function (item) { return item.toJSON(); }),\r\n            collection_blacklist: collectionBlacklist,\r\n            collection_whitelist: collectionWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosNFTTransfersByWalletsResponse = /** @class */ (function () {\r\n    function AptosNFTTransfersByWalletsResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTTransferResponse.create(item); });\r\n    }\r\n    AptosNFTTransfersByWalletsResponse.create = function (input) {\r\n        if (input instanceof AptosNFTTransfersByWalletsResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTTransfersByWalletsResponse(input);\r\n    };\r\n    AptosNFTTransfersByWalletsResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTTransferResponse.fromJSON(item); }),\r\n        };\r\n        return AptosNFTTransfersByWalletsResponse.create(input);\r\n    };\r\n    AptosNFTTransfersByWalletsResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosNFTTransfersByWalletsResponse;\r\n}());\n\nvar GetNFTTransfersByWalletsOperation = {\r\n    operationId: \"getNFTTransfersByWallets\",\r\n    groupName: \"nfts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nfts/transfers/wallets\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"wallet_addresses\", \"collection_blacklist\", \"collection_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTTransfersByWalletsResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var walletAddresses = request.walletAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var collectionBlacklist = request.collectionBlacklist;\r\n        var collectionWhitelist = request.collectionWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            wallet_addresses: walletAddresses.map(function (item) { return item.toJSON(); }),\r\n            collection_blacklist: collectionBlacklist,\r\n            collection_whitelist: collectionWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosCoinInfoDto = /** @class */ (function () {\r\n    function AptosCoinInfoDto(input) {\r\n        this.coinType = input.coinType;\r\n        this.coinTypeHash = input.coinTypeHash;\r\n        this.creatorAddress = AptosAddress.create(input.creatorAddress);\r\n        this.decimals = input.decimals;\r\n        this.name = input.name;\r\n        this.supplyAggregatorTableHandle = input.supplyAggregatorTableHandle;\r\n        this.supplyAggregatorTableKey = input.supplyAggregatorTableKey;\r\n        this.symbol = input.symbol;\r\n        this.transactionCreatedTimestamp = input.transactionCreatedTimestamp;\r\n        this.transactionVersionCreated = input.transactionVersionCreated;\r\n    }\r\n    AptosCoinInfoDto.create = function (input) {\r\n        if (input instanceof AptosCoinInfoDto) {\r\n            return input;\r\n        }\r\n        return new AptosCoinInfoDto(input);\r\n    };\r\n    AptosCoinInfoDto.fromJSON = function (json) {\r\n        var input = {\r\n            coinType: json.coin_type,\r\n            coinTypeHash: json.coin_type_hash,\r\n            creatorAddress: AptosAddress.fromJSON(json.creator_address),\r\n            decimals: json.decimals,\r\n            name: json.name,\r\n            supplyAggregatorTableHandle: json.supply_aggregator_table_handle,\r\n            supplyAggregatorTableKey: json.supply_aggregator_table_key,\r\n            symbol: json.symbol,\r\n            transactionCreatedTimestamp: json.transaction_created_timestamp,\r\n            transactionVersionCreated: json.transaction_version_created,\r\n        };\r\n        return AptosCoinInfoDto.create(input);\r\n    };\r\n    AptosCoinInfoDto.prototype.toJSON = function () {\r\n        return {\r\n            coin_type: this.coinType,\r\n            coin_type_hash: this.coinTypeHash,\r\n            creator_address: this.creatorAddress.toJSON(),\r\n            decimals: this.decimals,\r\n            name: this.name,\r\n            supply_aggregator_table_handle: this.supplyAggregatorTableHandle,\r\n            supply_aggregator_table_key: this.supplyAggregatorTableKey,\r\n            symbol: this.symbol,\r\n            transaction_created_timestamp: this.transactionCreatedTimestamp,\r\n            transaction_version_created: this.transactionVersionCreated,\r\n        };\r\n    };\r\n    return AptosCoinInfoDto;\r\n}());\n\nvar GetCoinInfoByCoinTypeHashesOperation = {\r\n    operationId: \"getCoinInfoByCoinTypeHashes\",\r\n    groupName: \"coins\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/coins\",\r\n    parameterNames: [\"coin_type_hashes\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return AptosCoinInfoDto.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        var coinTypeHashes = request.coinTypeHashes;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            coin_type_hashes: coinTypeHashes,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetLatestCoinsResponse = /** @class */ (function () {\r\n    function AptosGetLatestCoinsResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosCoinInfoDto.create(item); });\r\n    }\r\n    AptosGetLatestCoinsResponse.create = function (input) {\r\n        if (input instanceof AptosGetLatestCoinsResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetLatestCoinsResponse(input);\r\n    };\r\n    AptosGetLatestCoinsResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosCoinInfoDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetLatestCoinsResponse.create(input);\r\n    };\r\n    AptosGetLatestCoinsResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetLatestCoinsResponse;\r\n}());\n\nvar GetLatestCoinsOperation = {\r\n    operationId: \"getLatestCoins\",\r\n    groupName: \"coins\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/coins/latest\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetLatestCoinsResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetCoinsByNameRangeResponse = /** @class */ (function () {\r\n    function AptosGetCoinsByNameRangeResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosCoinInfoDto.create(item); });\r\n    }\r\n    AptosGetCoinsByNameRangeResponse.create = function (input) {\r\n        if (input instanceof AptosGetCoinsByNameRangeResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetCoinsByNameRangeResponse(input);\r\n    };\r\n    AptosGetCoinsByNameRangeResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosCoinInfoDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetCoinsByNameRangeResponse.create(input);\r\n    };\r\n    AptosGetCoinsByNameRangeResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetCoinsByNameRangeResponse;\r\n}());\n\nvar GetCoinsByNameRangeOperation = {\r\n    operationId: \"getCoinsByNameRange\",\r\n    groupName: \"coins\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/coins/names\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"from_name\", \"to_name\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetCoinsByNameRangeResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var fromName = request.fromName;\r\n        var toName = request.toName;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            from_name: fromName,\r\n            to_name: toName,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetCoinsBySymbolRangeResponse = /** @class */ (function () {\r\n    function AptosGetCoinsBySymbolRangeResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosCoinInfoDto.create(item); });\r\n    }\r\n    AptosGetCoinsBySymbolRangeResponse.create = function (input) {\r\n        if (input instanceof AptosGetCoinsBySymbolRangeResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetCoinsBySymbolRangeResponse(input);\r\n    };\r\n    AptosGetCoinsBySymbolRangeResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosCoinInfoDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetCoinsBySymbolRangeResponse.create(input);\r\n    };\r\n    AptosGetCoinsBySymbolRangeResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetCoinsBySymbolRangeResponse;\r\n}());\n\nvar GetCoinsBySymbolRangeOperation = {\r\n    operationId: \"getCoinsBySymbolRange\",\r\n    groupName: \"coins\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/coins/symbols\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"from_symbol\", \"to_symbol\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetCoinsBySymbolRangeResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var fromSymbol = request.fromSymbol;\r\n        var toSymbol = request.toSymbol;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            from_symbol: fromSymbol,\r\n            to_symbol: toSymbol,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetCoinsByCreatorsResponse = /** @class */ (function () {\r\n    function AptosGetCoinsByCreatorsResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosCoinInfoDto.create(item); });\r\n    }\r\n    AptosGetCoinsByCreatorsResponse.create = function (input) {\r\n        if (input instanceof AptosGetCoinsByCreatorsResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetCoinsByCreatorsResponse(input);\r\n    };\r\n    AptosGetCoinsByCreatorsResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosCoinInfoDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetCoinsByCreatorsResponse.create(input);\r\n    };\r\n    AptosGetCoinsByCreatorsResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetCoinsByCreatorsResponse;\r\n}());\n\nvar GetCoinsByCreatorsOperation = {\r\n    operationId: \"getCoinsByCreators\",\r\n    groupName: \"coins\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/coins/creators\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"creator_addresses\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetCoinsByCreatorsResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var creatorAddresses = request.creatorAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            creator_addresses: creatorAddresses.map(function (item) { return item.toJSON(); }),\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosCoinTransferDto = /** @class */ (function () {\r\n    function AptosCoinTransferDto(input) {\r\n        this.activityType = input.activityType;\r\n        this.amount = AptosNative.create(input.amount);\r\n        this.blockHeight = input.blockHeight;\r\n        this.coinType = input.coinType;\r\n        this.entryFunctionIdStr = input.entryFunctionIdStr;\r\n        this.eventAccountAddress = input.eventAccountAddress;\r\n        this.eventCreationNumber = input.eventCreationNumber;\r\n        this.eventSequenceNumber = input.eventSequenceNumber;\r\n        this.isGasFee = input.isGasFee;\r\n        this.isTransactionSuccess = input.isTransactionSuccess;\r\n        this.ownerAddress = AptosAddress.create(input.ownerAddress);\r\n        this.transactionTimestamp = input.transactionTimestamp;\r\n        this.transactionVersion = input.transactionVersion;\r\n    }\r\n    AptosCoinTransferDto.create = function (input) {\r\n        if (input instanceof AptosCoinTransferDto) {\r\n            return input;\r\n        }\r\n        return new AptosCoinTransferDto(input);\r\n    };\r\n    AptosCoinTransferDto.fromJSON = function (json) {\r\n        var input = {\r\n            activityType: json.activity_type,\r\n            amount: AptosNative.fromJSON(json.amount),\r\n            blockHeight: json.block_height,\r\n            coinType: json.coin_type,\r\n            entryFunctionIdStr: json.entry_function_id_str,\r\n            eventAccountAddress: json.event_account_address,\r\n            eventCreationNumber: json.event_creation_number,\r\n            eventSequenceNumber: json.event_sequence_number,\r\n            isGasFee: json.is_gas_fee,\r\n            isTransactionSuccess: json.is_transaction_success,\r\n            ownerAddress: AptosAddress.fromJSON(json.owner_address),\r\n            transactionTimestamp: json.transaction_timestamp,\r\n            transactionVersion: json.transaction_version,\r\n        };\r\n        return AptosCoinTransferDto.create(input);\r\n    };\r\n    AptosCoinTransferDto.prototype.toJSON = function () {\r\n        return {\r\n            activity_type: this.activityType,\r\n            amount: this.amount.toJSON(),\r\n            block_height: this.blockHeight,\r\n            coin_type: this.coinType,\r\n            entry_function_id_str: this.entryFunctionIdStr,\r\n            event_account_address: this.eventAccountAddress,\r\n            event_creation_number: this.eventCreationNumber,\r\n            event_sequence_number: this.eventSequenceNumber,\r\n            is_gas_fee: this.isGasFee,\r\n            is_transaction_success: this.isTransactionSuccess,\r\n            owner_address: this.ownerAddress.toJSON(),\r\n            transaction_timestamp: this.transactionTimestamp,\r\n            transaction_version: this.transactionVersion,\r\n        };\r\n    };\r\n    return AptosCoinTransferDto;\r\n}());\n\nvar AptosGetCoinTransfersByOwnerAddressesResponse = /** @class */ (function () {\r\n    function AptosGetCoinTransfersByOwnerAddressesResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosCoinTransferDto.create(item); });\r\n    }\r\n    AptosGetCoinTransfersByOwnerAddressesResponse.create = function (input) {\r\n        if (input instanceof AptosGetCoinTransfersByOwnerAddressesResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetCoinTransfersByOwnerAddressesResponse(input);\r\n    };\r\n    AptosGetCoinTransfersByOwnerAddressesResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosCoinTransferDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetCoinTransfersByOwnerAddressesResponse.create(input);\r\n    };\r\n    AptosGetCoinTransfersByOwnerAddressesResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetCoinTransfersByOwnerAddressesResponse;\r\n}());\n\nvar GetCoinTransfersByOwnerAddressesOperation = {\r\n    operationId: \"getCoinTransfersByOwnerAddresses\",\r\n    groupName: \"coins\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/coins/transfers/wallets\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"owner_addresses\", \"from_date\", \"to_date\", \"coin_type_blacklist\", \"coin_type_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetCoinTransfersByOwnerAddressesResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var ownerAddresses = request.ownerAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var fromDate = request.fromDate;\r\n        var toDate = request.toDate;\r\n        var coinTypeBlacklist = request.coinTypeBlacklist;\r\n        var coinTypeWhitelist = request.coinTypeWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            owner_addresses: ownerAddresses.map(function (item) { return item.toJSON(); }),\r\n            from_date: fromDate,\r\n            to_date: toDate,\r\n            coin_type_blacklist: coinTypeBlacklist,\r\n            coin_type_whitelist: coinTypeWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetCoinTransfersByBlockHeightsResponse = /** @class */ (function () {\r\n    function AptosGetCoinTransfersByBlockHeightsResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosCoinTransferDto.create(item); });\r\n    }\r\n    AptosGetCoinTransfersByBlockHeightsResponse.create = function (input) {\r\n        if (input instanceof AptosGetCoinTransfersByBlockHeightsResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetCoinTransfersByBlockHeightsResponse(input);\r\n    };\r\n    AptosGetCoinTransfersByBlockHeightsResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosCoinTransferDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetCoinTransfersByBlockHeightsResponse.create(input);\r\n    };\r\n    AptosGetCoinTransfersByBlockHeightsResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetCoinTransfersByBlockHeightsResponse;\r\n}());\n\nvar GetCoinTransfersByBlockHeightsOperation = {\r\n    operationId: \"getCoinTransfersByBlockHeights\",\r\n    groupName: \"coins\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/coins/transfers/blocks\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"block_heights\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetCoinTransfersByBlockHeightsResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var blockHeights = request.blockHeights;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            block_heights: blockHeights,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetCoinTransfersByCoinTypeResponse = /** @class */ (function () {\r\n    function AptosGetCoinTransfersByCoinTypeResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosCoinTransferDto.create(item); });\r\n    }\r\n    AptosGetCoinTransfersByCoinTypeResponse.create = function (input) {\r\n        if (input instanceof AptosGetCoinTransfersByCoinTypeResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetCoinTransfersByCoinTypeResponse(input);\r\n    };\r\n    AptosGetCoinTransfersByCoinTypeResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosCoinTransferDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetCoinTransfersByCoinTypeResponse.create(input);\r\n    };\r\n    AptosGetCoinTransfersByCoinTypeResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetCoinTransfersByCoinTypeResponse;\r\n}());\n\nvar GetCoinTransfersByCoinTypeOperation = {\r\n    operationId: \"getCoinTransfersByCoinType\",\r\n    groupName: \"coins\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/coins/transfers/{coin_type}\",\r\n    parameterNames: [\"coin_type\", \"limit\", \"offset\", \"cursor\", \"from_date\", \"to_date\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetCoinTransfersByCoinTypeResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var coinType = request.coinType;\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var fromDate = request.fromDate;\r\n        var toDate = request.toDate;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            coin_type: coinType,\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            from_date: fromDate,\r\n            to_date: toDate,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosCurrentCoinBalanceDto = /** @class */ (function () {\r\n    function AptosCurrentCoinBalanceDto(input) {\r\n        this.amount = AptosNative.create(input.amount);\r\n        this.coinType = input.coinType;\r\n        this.coinTypeHash = input.coinTypeHash;\r\n        this.lastTransactionTimestamp = input.lastTransactionTimestamp;\r\n        this.lastTransactionVersion = input.lastTransactionVersion;\r\n        this.ownerAddress = AptosAddress.create(input.ownerAddress);\r\n    }\r\n    AptosCurrentCoinBalanceDto.create = function (input) {\r\n        if (input instanceof AptosCurrentCoinBalanceDto) {\r\n            return input;\r\n        }\r\n        return new AptosCurrentCoinBalanceDto(input);\r\n    };\r\n    AptosCurrentCoinBalanceDto.fromJSON = function (json) {\r\n        var input = {\r\n            amount: AptosNative.fromJSON(json.amount),\r\n            coinType: json.coin_type,\r\n            coinTypeHash: json.coin_type_hash,\r\n            lastTransactionTimestamp: json.last_transaction_timestamp,\r\n            lastTransactionVersion: json.last_transaction_version,\r\n            ownerAddress: AptosAddress.fromJSON(json.owner_address),\r\n        };\r\n        return AptosCurrentCoinBalanceDto.create(input);\r\n    };\r\n    AptosCurrentCoinBalanceDto.prototype.toJSON = function () {\r\n        return {\r\n            amount: this.amount.toJSON(),\r\n            coin_type: this.coinType,\r\n            coin_type_hash: this.coinTypeHash,\r\n            last_transaction_timestamp: this.lastTransactionTimestamp,\r\n            last_transaction_version: this.lastTransactionVersion,\r\n            owner_address: this.ownerAddress.toJSON(),\r\n        };\r\n    };\r\n    return AptosCurrentCoinBalanceDto;\r\n}());\n\nvar AptosGetTopHoldersByCoinResponse = /** @class */ (function () {\r\n    function AptosGetTopHoldersByCoinResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosCurrentCoinBalanceDto.create(item); });\r\n    }\r\n    AptosGetTopHoldersByCoinResponse.create = function (input) {\r\n        if (input instanceof AptosGetTopHoldersByCoinResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetTopHoldersByCoinResponse(input);\r\n    };\r\n    AptosGetTopHoldersByCoinResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosCurrentCoinBalanceDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetTopHoldersByCoinResponse.create(input);\r\n    };\r\n    AptosGetTopHoldersByCoinResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetTopHoldersByCoinResponse;\r\n}());\n\nvar GetTopHoldersByCoinOperation = {\r\n    operationId: \"getTopHoldersByCoin\",\r\n    groupName: \"coins\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/coins/owners/{coin_type_hash}/top-holders\",\r\n    parameterNames: [\"coin_type_hash\", \"limit\", \"offset\", \"cursor\", \"min_amount\", \"min_version\", \"wallet_blacklist\", \"wallet_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetTopHoldersByCoinResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var coinTypeHash = request.coinTypeHash;\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var minAmount = request.minAmount ? AptosNative.create(request.minAmount) : undefined;\r\n        var minVersion = request.minVersion;\r\n        var walletBlacklist = request.walletBlacklist;\r\n        var walletWhitelist = request.walletWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            coin_type_hash: coinTypeHash,\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            min_amount: minAmount ? minAmount.toJSON() : undefined,\r\n            min_version: minVersion,\r\n            wallet_blacklist: walletBlacklist,\r\n            wallet_whitelist: walletWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetCoinBalancesByWalletsResponse = /** @class */ (function () {\r\n    function AptosGetCoinBalancesByWalletsResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosCurrentCoinBalanceDto.create(item); });\r\n    }\r\n    AptosGetCoinBalancesByWalletsResponse.create = function (input) {\r\n        if (input instanceof AptosGetCoinBalancesByWalletsResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetCoinBalancesByWalletsResponse(input);\r\n    };\r\n    AptosGetCoinBalancesByWalletsResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosCurrentCoinBalanceDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetCoinBalancesByWalletsResponse.create(input);\r\n    };\r\n    AptosGetCoinBalancesByWalletsResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetCoinBalancesByWalletsResponse;\r\n}());\n\nvar GetCoinBalancesByWalletsOperation = {\r\n    operationId: \"getCoinBalancesByWallets\",\r\n    groupName: \"wallets\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/wallets/coins\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"owner_addresses\", \"coin_type_hash_blacklist\", \"coin_type_hash_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetCoinBalancesByWalletsResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var ownerAddresses = request.ownerAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var coinTypeHashBlacklist = request.coinTypeHashBlacklist;\r\n        var coinTypeHashWhitelist = request.coinTypeHashWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            owner_addresses: ownerAddresses.map(function (item) { return item.toJSON(); }),\r\n            coin_type_hash_blacklist: coinTypeHashBlacklist,\r\n            coin_type_hash_whitelist: coinTypeHashWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosHistoricalCoinBalanceDto = /** @class */ (function () {\r\n    function AptosHistoricalCoinBalanceDto(input) {\r\n        this.amount = AptosNative.create(input.amount);\r\n        this.coinType = input.coinType;\r\n        this.coinTypeHash = input.coinTypeHash;\r\n        this.transactionTimestamp = input.transactionTimestamp;\r\n        this.transactionVersion = input.transactionVersion;\r\n        this.ownerAddress = AptosAddress.create(input.ownerAddress);\r\n    }\r\n    AptosHistoricalCoinBalanceDto.create = function (input) {\r\n        if (input instanceof AptosHistoricalCoinBalanceDto) {\r\n            return input;\r\n        }\r\n        return new AptosHistoricalCoinBalanceDto(input);\r\n    };\r\n    AptosHistoricalCoinBalanceDto.fromJSON = function (json) {\r\n        var input = {\r\n            amount: AptosNative.fromJSON(json.amount),\r\n            coinType: json.coin_type,\r\n            coinTypeHash: json.coin_type_hash,\r\n            transactionTimestamp: json.transaction_timestamp,\r\n            transactionVersion: json.transaction_version,\r\n            ownerAddress: AptosAddress.fromJSON(json.owner_address),\r\n        };\r\n        return AptosHistoricalCoinBalanceDto.create(input);\r\n    };\r\n    AptosHistoricalCoinBalanceDto.prototype.toJSON = function () {\r\n        return {\r\n            amount: this.amount.toJSON(),\r\n            coin_type: this.coinType,\r\n            coin_type_hash: this.coinTypeHash,\r\n            transaction_timestamp: this.transactionTimestamp,\r\n            transaction_version: this.transactionVersion,\r\n            owner_address: this.ownerAddress.toJSON(),\r\n        };\r\n    };\r\n    return AptosHistoricalCoinBalanceDto;\r\n}());\n\nvar AptosGetHistoricalCoinBalancesByWalletsResponse = /** @class */ (function () {\r\n    function AptosGetHistoricalCoinBalancesByWalletsResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosHistoricalCoinBalanceDto.create(item); });\r\n    }\r\n    AptosGetHistoricalCoinBalancesByWalletsResponse.create = function (input) {\r\n        if (input instanceof AptosGetHistoricalCoinBalancesByWalletsResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetHistoricalCoinBalancesByWalletsResponse(input);\r\n    };\r\n    AptosGetHistoricalCoinBalancesByWalletsResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosHistoricalCoinBalanceDto.fromJSON(item); }),\r\n        };\r\n        return AptosGetHistoricalCoinBalancesByWalletsResponse.create(input);\r\n    };\r\n    AptosGetHistoricalCoinBalancesByWalletsResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGetHistoricalCoinBalancesByWalletsResponse;\r\n}());\n\nvar GetHistoricalCoinBalancesByWalletsOperation = {\r\n    operationId: \"getHistoricalCoinBalancesByWallets\",\r\n    groupName: \"wallets\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/wallets/coins/history\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"owner_addresses\", \"coin_type_hash_blacklist\", \"coin_type_hash_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetHistoricalCoinBalancesByWalletsResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var ownerAddresses = request.ownerAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var coinTypeHashBlacklist = request.coinTypeHashBlacklist;\r\n        var coinTypeHashWhitelist = request.coinTypeHashWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            owner_addresses: ownerAddresses.map(function (item) { return item.toJSON(); }),\r\n            coin_type_hash_blacklist: coinTypeHashBlacklist,\r\n            coin_type_hash_whitelist: coinTypeHashWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar GetCoinTransfersByWalletAddressesOperation = {\r\n    operationId: \"getCoinTransfersByWalletAddresses\",\r\n    groupName: \"wallets\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/wallets/coins/transfers\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"owner_addresses\", \"from_date\", \"to_date\", \"coin_type_blacklist\", \"coin_type_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetCoinTransfersByOwnerAddressesResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var ownerAddresses = request.ownerAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var fromDate = request.fromDate;\r\n        var toDate = request.toDate;\r\n        var coinTypeBlacklist = request.coinTypeBlacklist;\r\n        var coinTypeWhitelist = request.coinTypeWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            owner_addresses: ownerAddresses.map(function (item) { return item.toJSON(); }),\r\n            from_date: fromDate,\r\n            to_date: toDate,\r\n            coin_type_blacklist: coinTypeBlacklist,\r\n            coin_type_whitelist: coinTypeWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosNFTsByOwnersResponse = /** @class */ (function () {\r\n    function AptosNFTsByOwnersResponse(input) {\r\n        this.cursor = input.cursor;\r\n        this.hasNextPage = input.hasNextPage;\r\n        this.result = input.result.map(function (item) { return AptosNFTOwnerResponse.create(item); });\r\n    }\r\n    AptosNFTsByOwnersResponse.create = function (input) {\r\n        if (input instanceof AptosNFTsByOwnersResponse) {\r\n            return input;\r\n        }\r\n        return new AptosNFTsByOwnersResponse(input);\r\n    };\r\n    AptosNFTsByOwnersResponse.fromJSON = function (json) {\r\n        var input = {\r\n            cursor: json.cursor,\r\n            hasNextPage: json.hasNextPage,\r\n            result: json.result.map(function (item) { return AptosNFTOwnerResponse.fromJSON(item); }),\r\n        };\r\n        return AptosNFTsByOwnersResponse.create(input);\r\n    };\r\n    AptosNFTsByOwnersResponse.prototype.toJSON = function () {\r\n        return {\r\n            cursor: this.cursor,\r\n            hasNextPage: this.hasNextPage,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosNFTsByOwnersResponse;\r\n}());\n\nvar GetNFTByOwnersOperation = {\r\n    operationId: \"getNFTByOwners\",\r\n    groupName: \"wallets\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/wallets/nfts\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"owner_addresses\", \"collection_blacklist\", \"collection_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTsByOwnersResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var ownerAddresses = request.ownerAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var collectionBlacklist = request.collectionBlacklist;\r\n        var collectionWhitelist = request.collectionWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            owner_addresses: ownerAddresses.map(function (item) { return item.toJSON(); }),\r\n            collection_blacklist: collectionBlacklist,\r\n            collection_whitelist: collectionWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar GetWalletsNFTTransfersOperation = {\r\n    operationId: \"getWalletsNFTTransfers\",\r\n    groupName: \"wallets\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/wallets/nfts/transfers\",\r\n    parameterNames: [\"limit\", \"offset\", \"cursor\", \"wallet_addresses\", \"collection_blacklist\", \"collection_whitelist\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosNFTTransfersByWalletsResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var offset = request.offset;\r\n        var cursor = request.cursor;\r\n        var walletAddresses = request.walletAddresses.map(function (item) { return AptosAddress.create(item); });\r\n        var collectionBlacklist = request.collectionBlacklist;\r\n        var collectionWhitelist = request.collectionWhitelist;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            offset: offset,\r\n            cursor: cursor,\r\n            wallet_addresses: walletAddresses.map(function (item) { return item.toJSON(); }),\r\n            collection_blacklist: collectionBlacklist,\r\n            collection_whitelist: collectionWhitelist,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\n// $ref: #/components/schemas/GetAccountResponse\r\n// type: GetAccountResponse\r\n// properties:\r\n// - sequence_number ($ref: #/components/schemas/GetAccountResponse/properties/sequence_number)\r\n// - authentication_key ($ref: #/components/schemas/GetAccountResponse/properties/authentication_key)\r\nvar AptosGetAccountResponse = /** @class */ (function () {\r\n    function AptosGetAccountResponse(input) {\r\n        this.sequenceNumber = input.sequenceNumber;\r\n        this.authenticationKey = input.authenticationKey;\r\n    }\r\n    AptosGetAccountResponse.create = function (input) {\r\n        if (input instanceof AptosGetAccountResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetAccountResponse(input);\r\n    };\r\n    AptosGetAccountResponse.fromJSON = function (json) {\r\n        var input = {\r\n            sequenceNumber: json.sequence_number,\r\n            authenticationKey: json.authentication_key,\r\n        };\r\n        return AptosGetAccountResponse.create(input);\r\n    };\r\n    AptosGetAccountResponse.prototype.toJSON = function () {\r\n        return {\r\n            sequence_number: this.sequenceNumber,\r\n            authentication_key: this.authenticationKey,\r\n        };\r\n    };\r\n    return AptosGetAccountResponse;\r\n}());\n\nvar GetAccountOperation = {\r\n    operationId: \"getAccount\",\r\n    groupName: \"accounts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/accounts/{address}\",\r\n    parameterNames: [\"address\", \"ledger_version\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetAccountResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var address = request.address;\r\n        var ledgerVersion = request.ledgerVersion;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            address: address,\r\n            ledger_version: ledgerVersion,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\n// $ref: #/components/schemas/GetAccountResourceResponse/properties/data\r\n// typeName: GetAccountResourceResponse_data\r\nvar AptosGetAccountResourceResponseData = /** @class */ (function () {\r\n    function AptosGetAccountResourceResponseData() {\r\n    }\r\n    AptosGetAccountResourceResponseData.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosGetAccountResourceResponseData.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosGetAccountResourceResponseData;\r\n}());\n\nvar AptosGetAccountResourceResponse = /** @class */ (function () {\r\n    function AptosGetAccountResourceResponse(input) {\r\n        this.type = input.type;\r\n        this.data = AptosGetAccountResourceResponseData.create(input.data);\r\n    }\r\n    AptosGetAccountResourceResponse.create = function (input) {\r\n        if (input instanceof AptosGetAccountResourceResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetAccountResourceResponse(input);\r\n    };\r\n    AptosGetAccountResourceResponse.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            data: AptosGetAccountResourceResponseData.fromJSON(json.data),\r\n        };\r\n        return AptosGetAccountResourceResponse.create(input);\r\n    };\r\n    AptosGetAccountResourceResponse.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            data: this.data,\r\n        };\r\n    };\r\n    return AptosGetAccountResourceResponse;\r\n}());\n\nvar GetAccountResourcesOperation = {\r\n    operationId: \"getAccountResources\",\r\n    groupName: \"accounts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/accounts/{address}/resources\",\r\n    parameterNames: [\"address\", \"ledger_version\", \"limit\", \"start\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return AptosGetAccountResourceResponse.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        var address = request.address;\r\n        var ledgerVersion = request.ledgerVersion;\r\n        var limit = request.limit;\r\n        var start = request.start;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            address: address,\r\n            ledger_version: ledgerVersion,\r\n            limit: limit,\r\n            start: start,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\n// $ref: #/components/schemas/GenericTypeParam\r\n// type: GenericTypeParam\r\n// properties:\r\n// - constraints ($ref: #/components/schemas/GenericTypeParam/properties/constraints)\r\nvar AptosGenericTypeParam = /** @class */ (function () {\r\n    function AptosGenericTypeParam(input) {\r\n        this.constraints = input.constraints;\r\n    }\r\n    AptosGenericTypeParam.create = function (input) {\r\n        if (input instanceof AptosGenericTypeParam) {\r\n            return input;\r\n        }\r\n        return new AptosGenericTypeParam(input);\r\n    };\r\n    AptosGenericTypeParam.fromJSON = function (json) {\r\n        var input = {\r\n            constraints: json.constraints,\r\n        };\r\n        return AptosGenericTypeParam.create(input);\r\n    };\r\n    AptosGenericTypeParam.prototype.toJSON = function () {\r\n        return {\r\n            constraints: this.constraints,\r\n        };\r\n    };\r\n    return AptosGenericTypeParam;\r\n}());\n\nvar AptosModuleExposedFunction = /** @class */ (function () {\r\n    function AptosModuleExposedFunction(input) {\r\n        this.name = input.name;\r\n        this.visibility = input.visibility;\r\n        this.isEntry = input.isEntry;\r\n        this.genericTypeParams = input.genericTypeParams.map(function (item) { return AptosGenericTypeParam.create(item); });\r\n        this.params = input.params;\r\n        this.return = input.return;\r\n    }\r\n    AptosModuleExposedFunction.create = function (input) {\r\n        if (input instanceof AptosModuleExposedFunction) {\r\n            return input;\r\n        }\r\n        return new AptosModuleExposedFunction(input);\r\n    };\r\n    AptosModuleExposedFunction.fromJSON = function (json) {\r\n        var input = {\r\n            name: json.name,\r\n            visibility: json.visibility,\r\n            isEntry: json.is_entry,\r\n            genericTypeParams: json.generic_type_params.map(function (item) { return AptosGenericTypeParam.fromJSON(item); }),\r\n            params: json.params,\r\n            return: json.return,\r\n        };\r\n        return AptosModuleExposedFunction.create(input);\r\n    };\r\n    AptosModuleExposedFunction.prototype.toJSON = function () {\r\n        return {\r\n            name: this.name,\r\n            visibility: this.visibility,\r\n            is_entry: this.isEntry,\r\n            generic_type_params: this.genericTypeParams.map(function (item) { return item.toJSON(); }),\r\n            params: this.params,\r\n            return: this.return,\r\n        };\r\n    };\r\n    return AptosModuleExposedFunction;\r\n}());\n\n// $ref: #/components/schemas/ModuleStructField\r\n// type: ModuleStructField\r\n// properties:\r\n// - name ($ref: #/components/schemas/ModuleStructField/properties/name)\r\n// - type ($ref: #/components/schemas/ModuleStructField/properties/type)\r\nvar AptosModuleStructField = /** @class */ (function () {\r\n    function AptosModuleStructField(input) {\r\n        this.name = input.name;\r\n        this.type = input.type;\r\n    }\r\n    AptosModuleStructField.create = function (input) {\r\n        if (input instanceof AptosModuleStructField) {\r\n            return input;\r\n        }\r\n        return new AptosModuleStructField(input);\r\n    };\r\n    AptosModuleStructField.fromJSON = function (json) {\r\n        var input = {\r\n            name: json.name,\r\n            type: json.type,\r\n        };\r\n        return AptosModuleStructField.create(input);\r\n    };\r\n    AptosModuleStructField.prototype.toJSON = function () {\r\n        return {\r\n            name: this.name,\r\n            type: this.type,\r\n        };\r\n    };\r\n    return AptosModuleStructField;\r\n}());\n\nvar AptosModuleStruct = /** @class */ (function () {\r\n    function AptosModuleStruct(input) {\r\n        this.name = input.name;\r\n        this.isNative = input.isNative;\r\n        this.abilities = input.abilities;\r\n        this.genericTypeParams = input.genericTypeParams.map(function (item) { return AptosGenericTypeParam.create(item); });\r\n        this.fields = input.fields.map(function (item) { return AptosModuleStructField.create(item); });\r\n    }\r\n    AptosModuleStruct.create = function (input) {\r\n        if (input instanceof AptosModuleStruct) {\r\n            return input;\r\n        }\r\n        return new AptosModuleStruct(input);\r\n    };\r\n    AptosModuleStruct.fromJSON = function (json) {\r\n        var input = {\r\n            name: json.name,\r\n            isNative: json.is_native,\r\n            abilities: json.abilities,\r\n            genericTypeParams: json.generic_type_params.map(function (item) { return AptosGenericTypeParam.fromJSON(item); }),\r\n            fields: json.fields.map(function (item) { return AptosModuleStructField.fromJSON(item); }),\r\n        };\r\n        return AptosModuleStruct.create(input);\r\n    };\r\n    AptosModuleStruct.prototype.toJSON = function () {\r\n        return {\r\n            name: this.name,\r\n            is_native: this.isNative,\r\n            abilities: this.abilities,\r\n            generic_type_params: this.genericTypeParams.map(function (item) { return item.toJSON(); }),\r\n            fields: this.fields.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosModuleStruct;\r\n}());\n\nvar AptosMoveModuleAbi = /** @class */ (function () {\r\n    function AptosMoveModuleAbi(input) {\r\n        this.address = AptosAddress.create(input.address);\r\n        this.name = input.name;\r\n        this.friends = input.friends;\r\n        this.exposedFunctions = input.exposedFunctions.map(function (item) { return AptosModuleExposedFunction.create(item); });\r\n        this.structs = input.structs.map(function (item) { return AptosModuleStruct.create(item); });\r\n    }\r\n    AptosMoveModuleAbi.create = function (input) {\r\n        if (input instanceof AptosMoveModuleAbi) {\r\n            return input;\r\n        }\r\n        return new AptosMoveModuleAbi(input);\r\n    };\r\n    AptosMoveModuleAbi.fromJSON = function (json) {\r\n        var input = {\r\n            address: AptosAddress.fromJSON(json.address),\r\n            name: json.name,\r\n            friends: json.friends,\r\n            exposedFunctions: json.exposed_functions.map(function (item) { return AptosModuleExposedFunction.fromJSON(item); }),\r\n            structs: json.structs.map(function (item) { return AptosModuleStruct.fromJSON(item); }),\r\n        };\r\n        return AptosMoveModuleAbi.create(input);\r\n    };\r\n    AptosMoveModuleAbi.prototype.toJSON = function () {\r\n        return {\r\n            address: this.address.toJSON(),\r\n            name: this.name,\r\n            friends: this.friends,\r\n            exposed_functions: this.exposedFunctions.map(function (item) { return item.toJSON(); }),\r\n            structs: this.structs.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosMoveModuleAbi;\r\n}());\n\nvar AptosGetAccountModuleResponse = /** @class */ (function () {\r\n    function AptosGetAccountModuleResponse(input) {\r\n        this.bytecode = input.bytecode;\r\n        this.abi = AptosMoveModuleAbi.create(input.abi);\r\n    }\r\n    AptosGetAccountModuleResponse.create = function (input) {\r\n        if (input instanceof AptosGetAccountModuleResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetAccountModuleResponse(input);\r\n    };\r\n    AptosGetAccountModuleResponse.fromJSON = function (json) {\r\n        var input = {\r\n            bytecode: json.bytecode,\r\n            abi: AptosMoveModuleAbi.fromJSON(json.abi),\r\n        };\r\n        return AptosGetAccountModuleResponse.create(input);\r\n    };\r\n    AptosGetAccountModuleResponse.prototype.toJSON = function () {\r\n        return {\r\n            bytecode: this.bytecode,\r\n            abi: this.abi.toJSON(),\r\n        };\r\n    };\r\n    return AptosGetAccountModuleResponse;\r\n}());\n\nvar GetAccountModulesOperation = {\r\n    operationId: \"getAccountModules\",\r\n    groupName: \"accounts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/accounts/{address}/modules\",\r\n    parameterNames: [\"address\", \"ledger_version\", \"limit\", \"start\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return AptosGetAccountModuleResponse.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        var address = request.address;\r\n        var ledgerVersion = request.ledgerVersion;\r\n        var limit = request.limit;\r\n        var start = request.start;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            address: address,\r\n            ledger_version: ledgerVersion,\r\n            limit: limit,\r\n            start: start,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar GetAccountResourceOperation = {\r\n    operationId: \"getAccountResource\",\r\n    groupName: \"accounts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/accounts/{address}/resource/{resource_type}\",\r\n    parameterNames: [\"address\", \"resource_type\", \"ledger_version\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetAccountResourceResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var address = request.address;\r\n        var resourceType = request.resourceType;\r\n        var ledgerVersion = request.ledgerVersion;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            address: address,\r\n            resource_type: resourceType,\r\n            ledger_version: ledgerVersion,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar GetAccountModuleOperation = {\r\n    operationId: \"getAccountModule\",\r\n    groupName: \"accounts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/accounts/{address}/resource/{module_name}\",\r\n    parameterNames: [\"address\", \"module_name\", \"ledger_version\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetAccountModuleResponse.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var address = request.address;\r\n        var moduleName = request.moduleName;\r\n        var ledgerVersion = request.ledgerVersion;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            address: address,\r\n            module_name: moduleName,\r\n            ledger_version: ledgerVersion,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosTransactionEventGuid = /** @class */ (function () {\r\n    function AptosTransactionEventGuid(input) {\r\n        this.creationNumber = input.creationNumber;\r\n        this.accountAddress = AptosAddress.create(input.accountAddress);\r\n    }\r\n    AptosTransactionEventGuid.create = function (input) {\r\n        if (input instanceof AptosTransactionEventGuid) {\r\n            return input;\r\n        }\r\n        return new AptosTransactionEventGuid(input);\r\n    };\r\n    AptosTransactionEventGuid.fromJSON = function (json) {\r\n        var input = {\r\n            creationNumber: json.creation_number,\r\n            accountAddress: AptosAddress.fromJSON(json.account_address),\r\n        };\r\n        return AptosTransactionEventGuid.create(input);\r\n    };\r\n    AptosTransactionEventGuid.prototype.toJSON = function () {\r\n        return {\r\n            creation_number: this.creationNumber,\r\n            account_address: this.accountAddress.toJSON(),\r\n        };\r\n    };\r\n    return AptosTransactionEventGuid;\r\n}());\n\n// $ref: #/components/schemas/GetEventsByCreationNumberResponse/properties/data\r\n// typeName: GetEventsByCreationNumberResponse_data\r\nvar AptosGetEventsByCreationNumberResponseData = /** @class */ (function () {\r\n    function AptosGetEventsByCreationNumberResponseData() {\r\n    }\r\n    AptosGetEventsByCreationNumberResponseData.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosGetEventsByCreationNumberResponseData.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosGetEventsByCreationNumberResponseData;\r\n}());\n\nvar AptosGetEventsByCreationNumberResponse = /** @class */ (function () {\r\n    function AptosGetEventsByCreationNumberResponse(input) {\r\n        this.version = input.version;\r\n        this.guid = AptosTransactionEventGuid.create(input.guid);\r\n        this.sequenceNumber = input.sequenceNumber;\r\n        this.type = input.type;\r\n        this.data = AptosGetEventsByCreationNumberResponseData.create(input.data);\r\n    }\r\n    AptosGetEventsByCreationNumberResponse.create = function (input) {\r\n        if (input instanceof AptosGetEventsByCreationNumberResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetEventsByCreationNumberResponse(input);\r\n    };\r\n    AptosGetEventsByCreationNumberResponse.fromJSON = function (json) {\r\n        var input = {\r\n            version: json.version,\r\n            guid: AptosTransactionEventGuid.fromJSON(json.guid),\r\n            sequenceNumber: json.sequence_number,\r\n            type: json.type,\r\n            data: AptosGetEventsByCreationNumberResponseData.fromJSON(json.data),\r\n        };\r\n        return AptosGetEventsByCreationNumberResponse.create(input);\r\n    };\r\n    AptosGetEventsByCreationNumberResponse.prototype.toJSON = function () {\r\n        return {\r\n            version: this.version,\r\n            guid: this.guid.toJSON(),\r\n            sequence_number: this.sequenceNumber,\r\n            type: this.type,\r\n            data: this.data,\r\n        };\r\n    };\r\n    return AptosGetEventsByCreationNumberResponse;\r\n}());\n\nvar GetEventsByCreationNumberOperation = {\r\n    operationId: \"getEventsByCreationNumber\",\r\n    groupName: \"accounts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/accounts/{address}/events/{creation_number}\",\r\n    parameterNames: [\"address\", \"creation_number\", \"limit\", \"start\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return AptosGetEventsByCreationNumberResponse.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        var address = request.address;\r\n        var creationNumber = request.creationNumber;\r\n        var limit = request.limit;\r\n        var start = request.start;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            address: address,\r\n            creation_number: creationNumber,\r\n            limit: limit,\r\n            start: start,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\n// $ref: #/components/schemas/GetEventsByEventHandleResponse/properties/data\r\n// typeName: GetEventsByEventHandleResponse_data\r\nvar AptosGetEventsByEventHandleResponseData = /** @class */ (function () {\r\n    function AptosGetEventsByEventHandleResponseData() {\r\n    }\r\n    AptosGetEventsByEventHandleResponseData.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosGetEventsByEventHandleResponseData.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosGetEventsByEventHandleResponseData;\r\n}());\n\nvar AptosGetEventsByEventHandleResponse = /** @class */ (function () {\r\n    function AptosGetEventsByEventHandleResponse(input) {\r\n        this.version = input.version;\r\n        this.guid = AptosTransactionEventGuid.create(input.guid);\r\n        this.sequenceNumber = input.sequenceNumber;\r\n        this.type = input.type;\r\n        this.data = AptosGetEventsByEventHandleResponseData.create(input.data);\r\n    }\r\n    AptosGetEventsByEventHandleResponse.create = function (input) {\r\n        if (input instanceof AptosGetEventsByEventHandleResponse) {\r\n            return input;\r\n        }\r\n        return new AptosGetEventsByEventHandleResponse(input);\r\n    };\r\n    AptosGetEventsByEventHandleResponse.fromJSON = function (json) {\r\n        var input = {\r\n            version: json.version,\r\n            guid: AptosTransactionEventGuid.fromJSON(json.guid),\r\n            sequenceNumber: json.sequence_number,\r\n            type: json.type,\r\n            data: AptosGetEventsByEventHandleResponseData.fromJSON(json.data),\r\n        };\r\n        return AptosGetEventsByEventHandleResponse.create(input);\r\n    };\r\n    AptosGetEventsByEventHandleResponse.prototype.toJSON = function () {\r\n        return {\r\n            version: this.version,\r\n            guid: this.guid.toJSON(),\r\n            sequence_number: this.sequenceNumber,\r\n            type: this.type,\r\n            data: this.data,\r\n        };\r\n    };\r\n    return AptosGetEventsByEventHandleResponse;\r\n}());\n\nvar GetEventsByEventHandleOperation = {\r\n    operationId: \"getEventsByEventHandle\",\r\n    groupName: \"accounts\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/accounts/{address}/events/{event_handle}/{field_name}\",\r\n    parameterNames: [\"address\", \"event_handle\", \"field_name\", \"limit\", \"start\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return AptosGetEventsByEventHandleResponse.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        var address = request.address;\r\n        var eventHandle = request.eventHandle;\r\n        var fieldName = request.fieldName;\r\n        var limit = request.limit;\r\n        var start = request.start;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            address: address,\r\n            event_handle: eventHandle,\r\n            field_name: fieldName,\r\n            limit: limit,\r\n            start: start,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\n// $ref: #/components/schemas/EntryFunctionPayloadRequest\r\n// type: EntryFunctionPayloadRequest\r\n// properties:\r\n// - type ($ref: #/components/schemas/EntryFunctionPayloadRequest/properties/type)\r\n// - function ($ref: #/components/schemas/EntryFunctionPayloadRequest/properties/function)\r\n// - type_arguments ($ref: #/components/schemas/EntryFunctionPayloadRequest/properties/type_arguments)\r\n// - arguments ($ref: #/components/schemas/EntryFunctionPayloadRequest/properties/arguments)\r\nvar AptosEntryFunctionPayloadRequest = /** @class */ (function () {\r\n    function AptosEntryFunctionPayloadRequest(input) {\r\n        this.type = input.type;\r\n        this.function = input.function;\r\n        this.typeArguments = input.typeArguments;\r\n        this.arguments = input.arguments;\r\n    }\r\n    AptosEntryFunctionPayloadRequest.create = function (input) {\r\n        if (input instanceof AptosEntryFunctionPayloadRequest) {\r\n            return input;\r\n        }\r\n        return new AptosEntryFunctionPayloadRequest(input);\r\n    };\r\n    AptosEntryFunctionPayloadRequest.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            function: json.function,\r\n            typeArguments: json.type_arguments,\r\n            arguments: json.arguments,\r\n        };\r\n        return AptosEntryFunctionPayloadRequest.create(input);\r\n    };\r\n    AptosEntryFunctionPayloadRequest.isInput = function (input) {\r\n        return [\"type\", \"function\", \"typeArguments\", \"arguments\"].every(function (name) { return input[name] !== undefined; });\r\n    };\r\n    AptosEntryFunctionPayloadRequest.isJSON = function (json) {\r\n        return [\"type\", \"function\", \"type_arguments\", \"arguments\"].every(function (name) { return json[name] !== undefined; });\r\n    };\r\n    AptosEntryFunctionPayloadRequest.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            function: this.function,\r\n            type_arguments: this.typeArguments,\r\n            arguments: this.arguments,\r\n        };\r\n    };\r\n    return AptosEntryFunctionPayloadRequest;\r\n}());\n\n// $ref: #/components/schemas/ScriptPayloadRequest/properties/code\r\n// typeName: ScriptPayloadRequest_code\r\nvar AptosScriptPayloadRequestCode = /** @class */ (function () {\r\n    function AptosScriptPayloadRequestCode() {\r\n    }\r\n    AptosScriptPayloadRequestCode.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosScriptPayloadRequestCode.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosScriptPayloadRequestCode;\r\n}());\n\nvar AptosScriptPayloadRequest = /** @class */ (function () {\r\n    function AptosScriptPayloadRequest(input) {\r\n        this.type = input.type;\r\n        this.code = AptosScriptPayloadRequestCode.create(input.code);\r\n        this.typeArguments = input.typeArguments;\r\n        this.arguments = input.arguments;\r\n    }\r\n    AptosScriptPayloadRequest.create = function (input) {\r\n        if (input instanceof AptosScriptPayloadRequest) {\r\n            return input;\r\n        }\r\n        return new AptosScriptPayloadRequest(input);\r\n    };\r\n    AptosScriptPayloadRequest.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            code: AptosScriptPayloadRequestCode.fromJSON(json.code),\r\n            typeArguments: json.type_arguments,\r\n            arguments: json.arguments,\r\n        };\r\n        return AptosScriptPayloadRequest.create(input);\r\n    };\r\n    AptosScriptPayloadRequest.isInput = function (input) {\r\n        return [\"type\", \"code\", \"typeArguments\", \"arguments\"].every(function (name) { return input[name] !== undefined; });\r\n    };\r\n    AptosScriptPayloadRequest.isJSON = function (json) {\r\n        return [\"type\", \"code\", \"type_arguments\", \"arguments\"].every(function (name) { return json[name] !== undefined; });\r\n    };\r\n    AptosScriptPayloadRequest.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            code: this.code,\r\n            type_arguments: this.typeArguments,\r\n            arguments: this.arguments,\r\n        };\r\n    };\r\n    return AptosScriptPayloadRequest;\r\n}());\n\n// $ref: #/components/schemas/ModuleBundlePayloadRequest\r\n// type: ModuleBundlePayloadRequest\r\n// properties:\r\n// - type ($ref: #/components/schemas/ModuleBundlePayloadRequest/properties/type)\r\n// - modules ($ref: #/components/schemas/ModuleBundlePayloadRequest/properties/modules)\r\nvar AptosModuleBundlePayloadRequest = /** @class */ (function () {\r\n    function AptosModuleBundlePayloadRequest(input) {\r\n        this.type = input.type;\r\n        this.modules = input.modules;\r\n    }\r\n    AptosModuleBundlePayloadRequest.create = function (input) {\r\n        if (input instanceof AptosModuleBundlePayloadRequest) {\r\n            return input;\r\n        }\r\n        return new AptosModuleBundlePayloadRequest(input);\r\n    };\r\n    AptosModuleBundlePayloadRequest.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            modules: json.modules,\r\n        };\r\n        return AptosModuleBundlePayloadRequest.create(input);\r\n    };\r\n    AptosModuleBundlePayloadRequest.isInput = function (input) {\r\n        return [\"type\", \"modules\"].every(function (name) { return input[name] !== undefined; });\r\n    };\r\n    AptosModuleBundlePayloadRequest.isJSON = function (json) {\r\n        return [\"type\", \"modules\"].every(function (name) { return json[name] !== undefined; });\r\n    };\r\n    AptosModuleBundlePayloadRequest.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            modules: this.modules,\r\n        };\r\n    };\r\n    return AptosModuleBundlePayloadRequest;\r\n}());\n\nvar AptosPendingTransactionPayload = /** @class */ (function () {\r\n    function AptosPendingTransactionPayload() {\r\n    }\r\n    AptosPendingTransactionPayload.create = function (input) {\r\n        if (AptosEntryFunctionPayloadRequest.isInput(input)) {\r\n            return AptosEntryFunctionPayloadRequest.create(input);\r\n        }\r\n        if (AptosScriptPayloadRequest.isInput(input)) {\r\n            return AptosScriptPayloadRequest.create(input);\r\n        }\r\n        if (AptosModuleBundlePayloadRequest.isInput(input)) {\r\n            return AptosModuleBundlePayloadRequest.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosPendingTransactionPayloadInput');\r\n    };\r\n    AptosPendingTransactionPayload.fromJSON = function (json) {\r\n        if (AptosEntryFunctionPayloadRequest.isJSON(json)) {\r\n            return AptosEntryFunctionPayloadRequest.fromJSON(json);\r\n        }\r\n        if (AptosScriptPayloadRequest.isJSON(json)) {\r\n            return AptosScriptPayloadRequest.fromJSON(json);\r\n        }\r\n        if (AptosModuleBundlePayloadRequest.isJSON(json)) {\r\n            return AptosModuleBundlePayloadRequest.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosPendingTransactionPayloadJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosPendingTransactionPayload.toJSON = function (value) {\r\n        if (value instanceof AptosEntryFunctionPayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosScriptPayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosModuleBundlePayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosPendingTransactionPayloadValue');\r\n    };\r\n    return AptosPendingTransactionPayload;\r\n}());\n\n// $ref: #/components/schemas/Ed25519SignatureRequest\r\n// type: Ed25519SignatureRequest\r\n// properties:\r\n// - type ($ref: #/components/schemas/Ed25519SignatureRequest/properties/type)\r\n// - signature ($ref: #/components/schemas/Ed25519SignatureRequest/properties/signature)\r\n// - public_key ($ref: #/components/schemas/Ed25519SignatureRequest/properties/public_key)\r\nvar AptosEd25519SignatureRequest = /** @class */ (function () {\r\n    function AptosEd25519SignatureRequest(input) {\r\n        this.type = input.type;\r\n        this.signature = input.signature;\r\n        this.publicKey = input.publicKey;\r\n    }\r\n    AptosEd25519SignatureRequest.create = function (input) {\r\n        if (input instanceof AptosEd25519SignatureRequest) {\r\n            return input;\r\n        }\r\n        return new AptosEd25519SignatureRequest(input);\r\n    };\r\n    AptosEd25519SignatureRequest.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            signature: json.signature,\r\n            publicKey: json.public_key,\r\n        };\r\n        return AptosEd25519SignatureRequest.create(input);\r\n    };\r\n    AptosEd25519SignatureRequest.isInput = function (input) {\r\n        return [\"type\", \"signature\", \"publicKey\"].every(function (name) { return input[name] !== undefined; });\r\n    };\r\n    AptosEd25519SignatureRequest.isJSON = function (json) {\r\n        return [\"type\", \"signature\", \"public_key\"].every(function (name) { return json[name] !== undefined; });\r\n    };\r\n    AptosEd25519SignatureRequest.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            signature: this.signature,\r\n            public_key: this.publicKey,\r\n        };\r\n    };\r\n    return AptosEd25519SignatureRequest;\r\n}());\n\n// $ref: #/components/schemas/MultiEd25519SignatureRequest\r\n// type: MultiEd25519SignatureRequest\r\n// properties:\r\n// - type ($ref: #/components/schemas/MultiEd25519SignatureRequest/properties/type)\r\n// - public_keys ($ref: #/components/schemas/MultiEd25519SignatureRequest/properties/public_keys)\r\n// - signatures ($ref: #/components/schemas/MultiEd25519SignatureRequest/properties/signatures)\r\n// - threshold ($ref: #/components/schemas/MultiEd25519SignatureRequest/properties/threshold)\r\n// - bitmap ($ref: #/components/schemas/MultiEd25519SignatureRequest/properties/bitmap)\r\nvar AptosMultiEd25519SignatureRequest = /** @class */ (function () {\r\n    function AptosMultiEd25519SignatureRequest(input) {\r\n        this.type = input.type;\r\n        this.publicKeys = input.publicKeys;\r\n        this.signatures = input.signatures;\r\n        this.threshold = input.threshold;\r\n        this.bitmap = input.bitmap;\r\n    }\r\n    AptosMultiEd25519SignatureRequest.create = function (input) {\r\n        if (input instanceof AptosMultiEd25519SignatureRequest) {\r\n            return input;\r\n        }\r\n        return new AptosMultiEd25519SignatureRequest(input);\r\n    };\r\n    AptosMultiEd25519SignatureRequest.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            publicKeys: json.public_keys,\r\n            signatures: json.signatures,\r\n            threshold: json.threshold,\r\n            bitmap: json.bitmap,\r\n        };\r\n        return AptosMultiEd25519SignatureRequest.create(input);\r\n    };\r\n    AptosMultiEd25519SignatureRequest.isInput = function (input) {\r\n        return [\"type\", \"publicKeys\", \"signatures\", \"threshold\", \"bitmap\"].every(function (name) { return input[name] !== undefined; });\r\n    };\r\n    AptosMultiEd25519SignatureRequest.isJSON = function (json) {\r\n        return [\"type\", \"public_keys\", \"signatures\", \"threshold\", \"bitmap\"].every(function (name) { return json[name] !== undefined; });\r\n    };\r\n    AptosMultiEd25519SignatureRequest.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            public_keys: this.publicKeys,\r\n            signatures: this.signatures,\r\n            threshold: this.threshold,\r\n            bitmap: this.bitmap,\r\n        };\r\n    };\r\n    return AptosMultiEd25519SignatureRequest;\r\n}());\n\nvar AptosMultiAgentSignatureRequestSecondarySigners = /** @class */ (function () {\r\n    function AptosMultiAgentSignatureRequestSecondarySigners() {\r\n    }\r\n    AptosMultiAgentSignatureRequestSecondarySigners.create = function (input) {\r\n        if (AptosEd25519SignatureRequest.isInput(input)) {\r\n            return AptosEd25519SignatureRequest.create(input);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isInput(input)) {\r\n            return AptosMultiEd25519SignatureRequest.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersInput');\r\n    };\r\n    AptosMultiAgentSignatureRequestSecondarySigners.fromJSON = function (json) {\r\n        if (AptosEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosMultiEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosMultiAgentSignatureRequestSecondarySigners.toJSON = function (value) {\r\n        if (value instanceof AptosEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosMultiEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersValue');\r\n    };\r\n    return AptosMultiAgentSignatureRequestSecondarySigners;\r\n}());\n\nvar AptosMultiAgentSignatureRequest = /** @class */ (function () {\r\n    function AptosMultiAgentSignatureRequest(input) {\r\n        this.type = input.type;\r\n        this.sender = AptosAddress.create(input.sender);\r\n        this.secondarySignerAddresses = input.secondarySignerAddresses;\r\n        this.secondarySigners = AptosMultiAgentSignatureRequestSecondarySigners.create(input.secondarySigners);\r\n    }\r\n    AptosMultiAgentSignatureRequest.create = function (input) {\r\n        if (input instanceof AptosMultiAgentSignatureRequest) {\r\n            return input;\r\n        }\r\n        return new AptosMultiAgentSignatureRequest(input);\r\n    };\r\n    AptosMultiAgentSignatureRequest.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            sender: AptosAddress.fromJSON(json.sender),\r\n            secondarySignerAddresses: json.secondary_signer_addresses,\r\n            secondarySigners: AptosMultiAgentSignatureRequestSecondarySigners.fromJSON(json.secondary_signers),\r\n        };\r\n        return AptosMultiAgentSignatureRequest.create(input);\r\n    };\r\n    AptosMultiAgentSignatureRequest.isInput = function (input) {\r\n        return [\"type\", \"sender\", \"secondarySignerAddresses\", \"secondarySigners\"].every(function (name) { return input[name] !== undefined; });\r\n    };\r\n    AptosMultiAgentSignatureRequest.isJSON = function (json) {\r\n        return [\"type\", \"sender\", \"secondary_signer_addresses\", \"secondary_signers\"].every(function (name) { return json[name] !== undefined; });\r\n    };\r\n    AptosMultiAgentSignatureRequest.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            sender: this.sender.toJSON(),\r\n            secondary_signer_addresses: this.secondarySignerAddresses,\r\n            secondary_signers: AptosMultiAgentSignatureRequestSecondarySigners.toJSON(this.secondarySigners),\r\n        };\r\n    };\r\n    return AptosMultiAgentSignatureRequest;\r\n}());\n\nvar AptosPendingTransactionSignature = /** @class */ (function () {\r\n    function AptosPendingTransactionSignature() {\r\n    }\r\n    AptosPendingTransactionSignature.create = function (input) {\r\n        if (AptosEd25519SignatureRequest.isInput(input)) {\r\n            return AptosEd25519SignatureRequest.create(input);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isInput(input)) {\r\n            return AptosMultiEd25519SignatureRequest.create(input);\r\n        }\r\n        if (AptosMultiAgentSignatureRequest.isInput(input)) {\r\n            return AptosMultiAgentSignatureRequest.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosPendingTransactionSignatureInput');\r\n    };\r\n    AptosPendingTransactionSignature.fromJSON = function (json) {\r\n        if (AptosEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosMultiEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        if (AptosMultiAgentSignatureRequest.isJSON(json)) {\r\n            return AptosMultiAgentSignatureRequest.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosPendingTransactionSignatureJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosPendingTransactionSignature.toJSON = function (value) {\r\n        if (value instanceof AptosEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosMultiEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosMultiAgentSignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosPendingTransactionSignatureValue');\r\n    };\r\n    return AptosPendingTransactionSignature;\r\n}());\n\nvar AptosPendingTransaction = /** @class */ (function () {\r\n    function AptosPendingTransaction(input) {\r\n        this.hash = input.hash;\r\n        this.sender = AptosAddress.create(input.sender);\r\n        this.sequenceNumber = input.sequenceNumber;\r\n        this.maxGasAmount = input.maxGasAmount;\r\n        this.gasUnitPrice = input.gasUnitPrice;\r\n        this.expirationTimestampSecs = input.expirationTimestampSecs;\r\n        this.payload = AptosPendingTransactionPayload.create(input.payload);\r\n        this.signature = AptosPendingTransactionSignature.create(input.signature);\r\n    }\r\n    AptosPendingTransaction.create = function (input) {\r\n        if (input instanceof AptosPendingTransaction) {\r\n            return input;\r\n        }\r\n        return new AptosPendingTransaction(input);\r\n    };\r\n    AptosPendingTransaction.fromJSON = function (json) {\r\n        var input = {\r\n            hash: json.hash,\r\n            sender: AptosAddress.fromJSON(json.sender),\r\n            sequenceNumber: json.sequence_number,\r\n            maxGasAmount: json.max_gas_amount,\r\n            gasUnitPrice: json.gas_unit_price,\r\n            expirationTimestampSecs: json.expiration_timestamp_secs,\r\n            payload: AptosPendingTransactionPayload.fromJSON(json.payload),\r\n            signature: AptosPendingTransactionSignature.fromJSON(json.signature),\r\n        };\r\n        return AptosPendingTransaction.create(input);\r\n    };\r\n    AptosPendingTransaction.isInput = function (input) {\r\n        return input.type === 'pending_transaction';\r\n    };\r\n    AptosPendingTransaction.isJSON = function (json) {\r\n        return json.type === 'pending_transaction';\r\n    };\r\n    AptosPendingTransaction.prototype.toJSON = function () {\r\n        return {\r\n            hash: this.hash,\r\n            sender: this.sender.toJSON(),\r\n            sequence_number: this.sequenceNumber,\r\n            max_gas_amount: this.maxGasAmount,\r\n            gas_unit_price: this.gasUnitPrice,\r\n            expiration_timestamp_secs: this.expirationTimestampSecs,\r\n            payload: AptosPendingTransactionPayload.toJSON(this.payload),\r\n            signature: AptosPendingTransactionSignature.toJSON(this.signature),\r\n        };\r\n    };\r\n    return AptosPendingTransaction;\r\n}());\n\n// $ref: #/components/schemas/DeleteModuleChange/properties/module\r\n// typeName: DeleteModuleChange_module\r\nvar AptosDeleteModuleChangeModule = /** @class */ (function () {\r\n    function AptosDeleteModuleChangeModule() {\r\n    }\r\n    AptosDeleteModuleChangeModule.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosDeleteModuleChangeModule.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosDeleteModuleChangeModule;\r\n}());\n\nvar AptosDeleteModuleChange = /** @class */ (function () {\r\n    function AptosDeleteModuleChange(input) {\r\n        this.type = input.type;\r\n        this.address = AptosAddress.create(input.address);\r\n        this.stateKeyHash = input.stateKeyHash;\r\n        this.module = AptosDeleteModuleChangeModule.create(input.module);\r\n    }\r\n    AptosDeleteModuleChange.create = function (input) {\r\n        if (input instanceof AptosDeleteModuleChange) {\r\n            return input;\r\n        }\r\n        return new AptosDeleteModuleChange(input);\r\n    };\r\n    AptosDeleteModuleChange.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            address: AptosAddress.fromJSON(json.address),\r\n            stateKeyHash: json.state_key_hash,\r\n            module: AptosDeleteModuleChangeModule.fromJSON(json.module),\r\n        };\r\n        return AptosDeleteModuleChange.create(input);\r\n    };\r\n    AptosDeleteModuleChange.isInput = function (input) {\r\n        return input.type === 'delete_module';\r\n    };\r\n    AptosDeleteModuleChange.isJSON = function (json) {\r\n        return json.type === 'delete_module';\r\n    };\r\n    AptosDeleteModuleChange.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            address: this.address.toJSON(),\r\n            state_key_hash: this.stateKeyHash,\r\n            module: this.module,\r\n        };\r\n    };\r\n    return AptosDeleteModuleChange;\r\n}());\n\n// $ref: #/components/schemas/DeleteResourceChange/properties/resource\r\n// typeName: DeleteResourceChange_resource\r\nvar AptosDeleteResourceChangeResource = /** @class */ (function () {\r\n    function AptosDeleteResourceChangeResource() {\r\n    }\r\n    AptosDeleteResourceChangeResource.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosDeleteResourceChangeResource.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosDeleteResourceChangeResource;\r\n}());\n\nvar AptosDeleteResourceChange = /** @class */ (function () {\r\n    function AptosDeleteResourceChange(input) {\r\n        this.type = input.type;\r\n        this.address = AptosAddress.create(input.address);\r\n        this.stateKeyHash = input.stateKeyHash;\r\n        this.resource = AptosDeleteResourceChangeResource.create(input.resource);\r\n    }\r\n    AptosDeleteResourceChange.create = function (input) {\r\n        if (input instanceof AptosDeleteResourceChange) {\r\n            return input;\r\n        }\r\n        return new AptosDeleteResourceChange(input);\r\n    };\r\n    AptosDeleteResourceChange.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            address: AptosAddress.fromJSON(json.address),\r\n            stateKeyHash: json.state_key_hash,\r\n            resource: AptosDeleteResourceChangeResource.fromJSON(json.resource),\r\n        };\r\n        return AptosDeleteResourceChange.create(input);\r\n    };\r\n    AptosDeleteResourceChange.isInput = function (input) {\r\n        return input.type === 'delete_resource';\r\n    };\r\n    AptosDeleteResourceChange.isJSON = function (json) {\r\n        return json.type === 'delete_resource';\r\n    };\r\n    AptosDeleteResourceChange.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            address: this.address.toJSON(),\r\n            state_key_hash: this.stateKeyHash,\r\n            resource: this.resource,\r\n        };\r\n    };\r\n    return AptosDeleteResourceChange;\r\n}());\n\n// $ref: #/components/schemas/DeleteTableItemChange/properties/handle\r\n// typeName: DeleteTableItemChange_handle\r\nvar AptosDeleteTableItemChangeHandle = /** @class */ (function () {\r\n    function AptosDeleteTableItemChangeHandle() {\r\n    }\r\n    AptosDeleteTableItemChangeHandle.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosDeleteTableItemChangeHandle.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosDeleteTableItemChangeHandle;\r\n}());\n\n// $ref: #/components/schemas/DeleteTableItemChange/properties/key\r\n// typeName: DeleteTableItemChange_key\r\nvar AptosDeleteTableItemChangeKey = /** @class */ (function () {\r\n    function AptosDeleteTableItemChangeKey() {\r\n    }\r\n    AptosDeleteTableItemChangeKey.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosDeleteTableItemChangeKey.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosDeleteTableItemChangeKey;\r\n}());\n\n// $ref: #/components/schemas/DeletedTableData\r\n// type: DeletedTableData\r\n// properties:\r\n// - key ($ref: #/components/schemas/DeletedTableData/properties/key)\r\n// - key_type ($ref: #/components/schemas/DeletedTableData/properties/key_type)\r\nvar AptosDeletedTableData = /** @class */ (function () {\r\n    function AptosDeletedTableData(input) {\r\n        this.key = input.key;\r\n        this.keyType = input.keyType;\r\n    }\r\n    AptosDeletedTableData.create = function (input) {\r\n        if (input instanceof AptosDeletedTableData) {\r\n            return input;\r\n        }\r\n        return new AptosDeletedTableData(input);\r\n    };\r\n    AptosDeletedTableData.fromJSON = function (json) {\r\n        var input = {\r\n            key: json.key,\r\n            keyType: json.key_type,\r\n        };\r\n        return AptosDeletedTableData.create(input);\r\n    };\r\n    AptosDeletedTableData.prototype.toJSON = function () {\r\n        return {\r\n            key: this.key,\r\n            key_type: this.keyType,\r\n        };\r\n    };\r\n    return AptosDeletedTableData;\r\n}());\n\nvar AptosDeleteTableItemChange = /** @class */ (function () {\r\n    function AptosDeleteTableItemChange(input) {\r\n        this.type = input.type;\r\n        this.stateKeyHash = input.stateKeyHash;\r\n        this.handle = AptosDeleteTableItemChangeHandle.create(input.handle);\r\n        this.key = AptosDeleteTableItemChangeKey.create(input.key);\r\n        this.data = AptosDeletedTableData.create(input.data);\r\n    }\r\n    AptosDeleteTableItemChange.create = function (input) {\r\n        if (input instanceof AptosDeleteTableItemChange) {\r\n            return input;\r\n        }\r\n        return new AptosDeleteTableItemChange(input);\r\n    };\r\n    AptosDeleteTableItemChange.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            stateKeyHash: json.state_key_hash,\r\n            handle: AptosDeleteTableItemChangeHandle.fromJSON(json.handle),\r\n            key: AptosDeleteTableItemChangeKey.fromJSON(json.key),\r\n            data: AptosDeletedTableData.fromJSON(json.data),\r\n        };\r\n        return AptosDeleteTableItemChange.create(input);\r\n    };\r\n    AptosDeleteTableItemChange.isInput = function (input) {\r\n        return input.type === 'delete_table_item';\r\n    };\r\n    AptosDeleteTableItemChange.isJSON = function (json) {\r\n        return json.type === 'delete_table_item';\r\n    };\r\n    AptosDeleteTableItemChange.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            state_key_hash: this.stateKeyHash,\r\n            handle: this.handle,\r\n            key: this.key,\r\n            data: this.data.toJSON(),\r\n        };\r\n    };\r\n    return AptosDeleteTableItemChange;\r\n}());\n\nvar AptosWriteModuleData = /** @class */ (function () {\r\n    function AptosWriteModuleData(input) {\r\n        this.bytecode = input.bytecode;\r\n        this.abi = AptosMoveModuleAbi.create(input.abi);\r\n    }\r\n    AptosWriteModuleData.create = function (input) {\r\n        if (input instanceof AptosWriteModuleData) {\r\n            return input;\r\n        }\r\n        return new AptosWriteModuleData(input);\r\n    };\r\n    AptosWriteModuleData.fromJSON = function (json) {\r\n        var input = {\r\n            bytecode: json.bytecode,\r\n            abi: AptosMoveModuleAbi.fromJSON(json.abi),\r\n        };\r\n        return AptosWriteModuleData.create(input);\r\n    };\r\n    AptosWriteModuleData.prototype.toJSON = function () {\r\n        return {\r\n            bytecode: this.bytecode,\r\n            abi: this.abi.toJSON(),\r\n        };\r\n    };\r\n    return AptosWriteModuleData;\r\n}());\n\nvar AptosWriteOrUpdateModuleChange = /** @class */ (function () {\r\n    function AptosWriteOrUpdateModuleChange(input) {\r\n        this.type = input.type;\r\n        this.address = AptosAddress.create(input.address);\r\n        this.stateKeyHash = input.stateKeyHash;\r\n        this.data = AptosWriteModuleData.create(input.data);\r\n    }\r\n    AptosWriteOrUpdateModuleChange.create = function (input) {\r\n        if (input instanceof AptosWriteOrUpdateModuleChange) {\r\n            return input;\r\n        }\r\n        return new AptosWriteOrUpdateModuleChange(input);\r\n    };\r\n    AptosWriteOrUpdateModuleChange.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            address: AptosAddress.fromJSON(json.address),\r\n            stateKeyHash: json.state_key_hash,\r\n            data: AptosWriteModuleData.fromJSON(json.data),\r\n        };\r\n        return AptosWriteOrUpdateModuleChange.create(input);\r\n    };\r\n    AptosWriteOrUpdateModuleChange.isInput = function (input) {\r\n        return input.type === 'write_module';\r\n    };\r\n    AptosWriteOrUpdateModuleChange.isJSON = function (json) {\r\n        return json.type === 'write_module';\r\n    };\r\n    AptosWriteOrUpdateModuleChange.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            address: this.address.toJSON(),\r\n            state_key_hash: this.stateKeyHash,\r\n            data: this.data.toJSON(),\r\n        };\r\n    };\r\n    return AptosWriteOrUpdateModuleChange;\r\n}());\n\n// $ref: #/components/schemas/WriteResourceData/properties/data\r\n// typeName: WriteResourceData_data\r\nvar AptosWriteResourceDataData = /** @class */ (function () {\r\n    function AptosWriteResourceDataData() {\r\n    }\r\n    AptosWriteResourceDataData.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosWriteResourceDataData.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosWriteResourceDataData;\r\n}());\n\nvar AptosWriteResourceData = /** @class */ (function () {\r\n    function AptosWriteResourceData(input) {\r\n        this.type = input.type;\r\n        this.data = AptosWriteResourceDataData.create(input.data);\r\n    }\r\n    AptosWriteResourceData.create = function (input) {\r\n        if (input instanceof AptosWriteResourceData) {\r\n            return input;\r\n        }\r\n        return new AptosWriteResourceData(input);\r\n    };\r\n    AptosWriteResourceData.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            data: AptosWriteResourceDataData.fromJSON(json.data),\r\n        };\r\n        return AptosWriteResourceData.create(input);\r\n    };\r\n    AptosWriteResourceData.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            data: this.data,\r\n        };\r\n    };\r\n    return AptosWriteResourceData;\r\n}());\n\nvar AptosWriteResourceChange = /** @class */ (function () {\r\n    function AptosWriteResourceChange(input) {\r\n        this.type = input.type;\r\n        this.address = AptosAddress.create(input.address);\r\n        this.stateKeyHash = input.stateKeyHash;\r\n        this.data = AptosWriteResourceData.create(input.data);\r\n    }\r\n    AptosWriteResourceChange.create = function (input) {\r\n        if (input instanceof AptosWriteResourceChange) {\r\n            return input;\r\n        }\r\n        return new AptosWriteResourceChange(input);\r\n    };\r\n    AptosWriteResourceChange.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            address: AptosAddress.fromJSON(json.address),\r\n            stateKeyHash: json.state_key_hash,\r\n            data: AptosWriteResourceData.fromJSON(json.data),\r\n        };\r\n        return AptosWriteResourceChange.create(input);\r\n    };\r\n    AptosWriteResourceChange.isInput = function (input) {\r\n        return input.type === 'write_resource';\r\n    };\r\n    AptosWriteResourceChange.isJSON = function (json) {\r\n        return json.type === 'write_resource';\r\n    };\r\n    AptosWriteResourceChange.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            address: this.address.toJSON(),\r\n            state_key_hash: this.stateKeyHash,\r\n            data: this.data.toJSON(),\r\n        };\r\n    };\r\n    return AptosWriteResourceChange;\r\n}());\n\n// $ref: #/components/schemas/DecodedTableData\r\n// type: DecodedTableData\r\n// properties:\r\n// - key ($ref: #/components/schemas/DecodedTableData/properties/key)\r\n// - key_type ($ref: #/components/schemas/DecodedTableData/properties/key_type)\r\n// - value ($ref: #/components/schemas/DecodedTableData/properties/value)\r\n// - value_type ($ref: #/components/schemas/DecodedTableData/properties/value_type)\r\nvar AptosDecodedTableData = /** @class */ (function () {\r\n    function AptosDecodedTableData(input) {\r\n        this.key = input.key;\r\n        this.keyType = input.keyType;\r\n        this.value = input.value;\r\n        this.valueType = input.valueType;\r\n    }\r\n    AptosDecodedTableData.create = function (input) {\r\n        if (input instanceof AptosDecodedTableData) {\r\n            return input;\r\n        }\r\n        return new AptosDecodedTableData(input);\r\n    };\r\n    AptosDecodedTableData.fromJSON = function (json) {\r\n        var input = {\r\n            key: json.key,\r\n            keyType: json.key_type,\r\n            value: json.value,\r\n            valueType: json.value_type,\r\n        };\r\n        return AptosDecodedTableData.create(input);\r\n    };\r\n    AptosDecodedTableData.prototype.toJSON = function () {\r\n        return {\r\n            key: this.key,\r\n            key_type: this.keyType,\r\n            value: this.value,\r\n            value_type: this.valueType,\r\n        };\r\n    };\r\n    return AptosDecodedTableData;\r\n}());\n\nvar AptosWriteTableChangeSetChange = /** @class */ (function () {\r\n    function AptosWriteTableChangeSetChange(input) {\r\n        this.type = input.type;\r\n        this.stateKeyHash = input.stateKeyHash;\r\n        this.handle = input.handle;\r\n        this.key = input.key;\r\n        this.value = input.value;\r\n        this.data = AptosDecodedTableData.create(input.data);\r\n    }\r\n    AptosWriteTableChangeSetChange.create = function (input) {\r\n        if (input instanceof AptosWriteTableChangeSetChange) {\r\n            return input;\r\n        }\r\n        return new AptosWriteTableChangeSetChange(input);\r\n    };\r\n    AptosWriteTableChangeSetChange.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            stateKeyHash: json.state_key_hash,\r\n            handle: json.handle,\r\n            key: json.key,\r\n            value: json.value,\r\n            data: AptosDecodedTableData.fromJSON(json.data),\r\n        };\r\n        return AptosWriteTableChangeSetChange.create(input);\r\n    };\r\n    AptosWriteTableChangeSetChange.isInput = function (input) {\r\n        return input.type === 'write_table_item';\r\n    };\r\n    AptosWriteTableChangeSetChange.isJSON = function (json) {\r\n        return json.type === 'write_table_item';\r\n    };\r\n    AptosWriteTableChangeSetChange.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            state_key_hash: this.stateKeyHash,\r\n            handle: this.handle,\r\n            key: this.key,\r\n            value: this.value,\r\n            data: this.data.toJSON(),\r\n        };\r\n    };\r\n    return AptosWriteTableChangeSetChange;\r\n}());\n\nvar AptosUserTransactionChangesItem = /** @class */ (function () {\r\n    function AptosUserTransactionChangesItem() {\r\n    }\r\n    AptosUserTransactionChangesItem.create = function (input) {\r\n        if (AptosDeleteModuleChange.isInput(input)) {\r\n            return AptosDeleteModuleChange.create(input);\r\n        }\r\n        if (AptosDeleteResourceChange.isInput(input)) {\r\n            return AptosDeleteResourceChange.create(input);\r\n        }\r\n        if (AptosDeleteTableItemChange.isInput(input)) {\r\n            return AptosDeleteTableItemChange.create(input);\r\n        }\r\n        if (AptosWriteOrUpdateModuleChange.isInput(input)) {\r\n            return AptosWriteOrUpdateModuleChange.create(input);\r\n        }\r\n        if (AptosWriteResourceChange.isInput(input)) {\r\n            return AptosWriteResourceChange.create(input);\r\n        }\r\n        if (AptosWriteTableChangeSetChange.isInput(input)) {\r\n            return AptosWriteTableChangeSetChange.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosUserTransactionChangesItemInput');\r\n    };\r\n    AptosUserTransactionChangesItem.fromJSON = function (json) {\r\n        if (AptosDeleteModuleChange.isJSON(json)) {\r\n            return AptosDeleteModuleChange.fromJSON(json);\r\n        }\r\n        if (AptosDeleteResourceChange.isJSON(json)) {\r\n            return AptosDeleteResourceChange.fromJSON(json);\r\n        }\r\n        if (AptosDeleteTableItemChange.isJSON(json)) {\r\n            return AptosDeleteTableItemChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteOrUpdateModuleChange.isJSON(json)) {\r\n            return AptosWriteOrUpdateModuleChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteResourceChange.isJSON(json)) {\r\n            return AptosWriteResourceChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteTableChangeSetChange.isJSON(json)) {\r\n            return AptosWriteTableChangeSetChange.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosUserTransactionChangesItemJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosUserTransactionChangesItem.toJSON = function (value) {\r\n        if (value instanceof AptosDeleteModuleChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosDeleteResourceChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosDeleteTableItemChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteOrUpdateModuleChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteResourceChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteTableChangeSetChange) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosUserTransactionChangesItemValue');\r\n    };\r\n    return AptosUserTransactionChangesItem;\r\n}());\n\nvar AptosUserTransactionPayload = /** @class */ (function () {\r\n    function AptosUserTransactionPayload() {\r\n    }\r\n    AptosUserTransactionPayload.create = function (input) {\r\n        if (AptosEntryFunctionPayloadRequest.isInput(input)) {\r\n            return AptosEntryFunctionPayloadRequest.create(input);\r\n        }\r\n        if (AptosScriptPayloadRequest.isInput(input)) {\r\n            return AptosScriptPayloadRequest.create(input);\r\n        }\r\n        if (AptosModuleBundlePayloadRequest.isInput(input)) {\r\n            return AptosModuleBundlePayloadRequest.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosUserTransactionPayloadInput');\r\n    };\r\n    AptosUserTransactionPayload.fromJSON = function (json) {\r\n        if (AptosEntryFunctionPayloadRequest.isJSON(json)) {\r\n            return AptosEntryFunctionPayloadRequest.fromJSON(json);\r\n        }\r\n        if (AptosScriptPayloadRequest.isJSON(json)) {\r\n            return AptosScriptPayloadRequest.fromJSON(json);\r\n        }\r\n        if (AptosModuleBundlePayloadRequest.isJSON(json)) {\r\n            return AptosModuleBundlePayloadRequest.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosUserTransactionPayloadJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosUserTransactionPayload.toJSON = function (value) {\r\n        if (value instanceof AptosEntryFunctionPayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosScriptPayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosModuleBundlePayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosUserTransactionPayloadValue');\r\n    };\r\n    return AptosUserTransactionPayload;\r\n}());\n\nvar AptosUserTransactionSignature = /** @class */ (function () {\r\n    function AptosUserTransactionSignature() {\r\n    }\r\n    AptosUserTransactionSignature.create = function (input) {\r\n        if (AptosEd25519SignatureRequest.isInput(input)) {\r\n            return AptosEd25519SignatureRequest.create(input);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isInput(input)) {\r\n            return AptosMultiEd25519SignatureRequest.create(input);\r\n        }\r\n        if (AptosMultiAgentSignatureRequest.isInput(input)) {\r\n            return AptosMultiAgentSignatureRequest.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosUserTransactionSignatureInput');\r\n    };\r\n    AptosUserTransactionSignature.fromJSON = function (json) {\r\n        if (AptosEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosMultiEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        if (AptosMultiAgentSignatureRequest.isJSON(json)) {\r\n            return AptosMultiAgentSignatureRequest.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosUserTransactionSignatureJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosUserTransactionSignature.toJSON = function (value) {\r\n        if (value instanceof AptosEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosMultiEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosMultiAgentSignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosUserTransactionSignatureValue');\r\n    };\r\n    return AptosUserTransactionSignature;\r\n}());\n\n// $ref: #/components/schemas/TransactionEvent/properties/data\r\n// typeName: TransactionEvent_data\r\nvar AptosTransactionEventData = /** @class */ (function () {\r\n    function AptosTransactionEventData() {\r\n    }\r\n    AptosTransactionEventData.create = function (input) {\r\n        return input;\r\n    };\r\n    AptosTransactionEventData.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return AptosTransactionEventData;\r\n}());\n\nvar AptosTransactionEvent = /** @class */ (function () {\r\n    function AptosTransactionEvent(input) {\r\n        this.guid = AptosTransactionEventGuid.create(input.guid);\r\n        this.sequenceNumber = input.sequenceNumber;\r\n        this.type = input.type;\r\n        this.data = AptosTransactionEventData.create(input.data);\r\n    }\r\n    AptosTransactionEvent.create = function (input) {\r\n        if (input instanceof AptosTransactionEvent) {\r\n            return input;\r\n        }\r\n        return new AptosTransactionEvent(input);\r\n    };\r\n    AptosTransactionEvent.fromJSON = function (json) {\r\n        var input = {\r\n            guid: AptosTransactionEventGuid.fromJSON(json.guid),\r\n            sequenceNumber: json.sequence_number,\r\n            type: json.type,\r\n            data: AptosTransactionEventData.fromJSON(json.data),\r\n        };\r\n        return AptosTransactionEvent.create(input);\r\n    };\r\n    AptosTransactionEvent.prototype.toJSON = function () {\r\n        return {\r\n            guid: this.guid.toJSON(),\r\n            sequence_number: this.sequenceNumber,\r\n            type: this.type,\r\n            data: this.data,\r\n        };\r\n    };\r\n    return AptosTransactionEvent;\r\n}());\n\nvar AptosUserTransaction = /** @class */ (function () {\r\n    function AptosUserTransaction(input) {\r\n        this.type = input.type;\r\n        this.version = input.version;\r\n        this.hash = input.hash;\r\n        this.stateChangeHash = input.stateChangeHash;\r\n        this.eventRootHash = input.eventRootHash;\r\n        this.stateCheckpointHash = input.stateCheckpointHash;\r\n        this.gasUsed = input.gasUsed;\r\n        this.success = input.success;\r\n        this.vmStatus = input.vmStatus;\r\n        this.accumulatorRootHash = input.accumulatorRootHash;\r\n        this.changes = input.changes.map(function (item) { return AptosUserTransactionChangesItem.create(item); });\r\n        this.sender = AptosAddress.create(input.sender);\r\n        this.sequenceNumber = input.sequenceNumber;\r\n        this.maxGasAmount = input.maxGasAmount;\r\n        this.gasUnitPrice = input.gasUnitPrice;\r\n        this.expirationTimestampSecs = input.expirationTimestampSecs;\r\n        this.payload = AptosUserTransactionPayload.create(input.payload);\r\n        this.signature = AptosUserTransactionSignature.create(input.signature);\r\n        this.events = input.events.map(function (item) { return AptosTransactionEvent.create(item); });\r\n        this.timestamp = input.timestamp;\r\n    }\r\n    AptosUserTransaction.create = function (input) {\r\n        if (input instanceof AptosUserTransaction) {\r\n            return input;\r\n        }\r\n        return new AptosUserTransaction(input);\r\n    };\r\n    AptosUserTransaction.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            version: json.version,\r\n            hash: json.hash,\r\n            stateChangeHash: json.state_change_hash,\r\n            eventRootHash: json.event_root_hash,\r\n            stateCheckpointHash: json.state_checkpoint_hash,\r\n            gasUsed: json.gas_used,\r\n            success: json.success,\r\n            vmStatus: json.vm_status,\r\n            accumulatorRootHash: json.accumulator_root_hash,\r\n            changes: json.changes.map(function (item) { return AptosUserTransactionChangesItem.fromJSON(item); }),\r\n            sender: AptosAddress.fromJSON(json.sender),\r\n            sequenceNumber: json.sequence_number,\r\n            maxGasAmount: json.max_gas_amount,\r\n            gasUnitPrice: json.gas_unit_price,\r\n            expirationTimestampSecs: json.expiration_timestamp_secs,\r\n            payload: AptosUserTransactionPayload.fromJSON(json.payload),\r\n            signature: AptosUserTransactionSignature.fromJSON(json.signature),\r\n            events: json.events.map(function (item) { return AptosTransactionEvent.fromJSON(item); }),\r\n            timestamp: json.timestamp,\r\n        };\r\n        return AptosUserTransaction.create(input);\r\n    };\r\n    AptosUserTransaction.isInput = function (input) {\r\n        return input.type === 'user_transaction';\r\n    };\r\n    AptosUserTransaction.isJSON = function (json) {\r\n        return json.type === 'user_transaction';\r\n    };\r\n    AptosUserTransaction.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            version: this.version,\r\n            hash: this.hash,\r\n            state_change_hash: this.stateChangeHash,\r\n            event_root_hash: this.eventRootHash,\r\n            state_checkpoint_hash: this.stateCheckpointHash,\r\n            gas_used: this.gasUsed,\r\n            success: this.success,\r\n            vm_status: this.vmStatus,\r\n            accumulator_root_hash: this.accumulatorRootHash,\r\n            changes: this.changes.map(function (item) { return AptosUserTransactionChangesItem.toJSON(item); }),\r\n            sender: this.sender.toJSON(),\r\n            sequence_number: this.sequenceNumber,\r\n            max_gas_amount: this.maxGasAmount,\r\n            gas_unit_price: this.gasUnitPrice,\r\n            expiration_timestamp_secs: this.expirationTimestampSecs,\r\n            payload: AptosUserTransactionPayload.toJSON(this.payload),\r\n            signature: AptosUserTransactionSignature.toJSON(this.signature),\r\n            events: this.events.map(function (item) { return item.toJSON(); }),\r\n            timestamp: this.timestamp,\r\n        };\r\n    };\r\n    return AptosUserTransaction;\r\n}());\n\nvar AptosGenesisTransactionChangesItem = /** @class */ (function () {\r\n    function AptosGenesisTransactionChangesItem() {\r\n    }\r\n    AptosGenesisTransactionChangesItem.create = function (input) {\r\n        if (AptosDeleteModuleChange.isInput(input)) {\r\n            return AptosDeleteModuleChange.create(input);\r\n        }\r\n        if (AptosDeleteResourceChange.isInput(input)) {\r\n            return AptosDeleteResourceChange.create(input);\r\n        }\r\n        if (AptosDeleteTableItemChange.isInput(input)) {\r\n            return AptosDeleteTableItemChange.create(input);\r\n        }\r\n        if (AptosWriteOrUpdateModuleChange.isInput(input)) {\r\n            return AptosWriteOrUpdateModuleChange.create(input);\r\n        }\r\n        if (AptosWriteResourceChange.isInput(input)) {\r\n            return AptosWriteResourceChange.create(input);\r\n        }\r\n        if (AptosWriteTableChangeSetChange.isInput(input)) {\r\n            return AptosWriteTableChangeSetChange.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGenesisTransactionChangesItemInput');\r\n    };\r\n    AptosGenesisTransactionChangesItem.fromJSON = function (json) {\r\n        if (AptosDeleteModuleChange.isJSON(json)) {\r\n            return AptosDeleteModuleChange.fromJSON(json);\r\n        }\r\n        if (AptosDeleteResourceChange.isJSON(json)) {\r\n            return AptosDeleteResourceChange.fromJSON(json);\r\n        }\r\n        if (AptosDeleteTableItemChange.isJSON(json)) {\r\n            return AptosDeleteTableItemChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteOrUpdateModuleChange.isJSON(json)) {\r\n            return AptosWriteOrUpdateModuleChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteResourceChange.isJSON(json)) {\r\n            return AptosWriteResourceChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteTableChangeSetChange.isJSON(json)) {\r\n            return AptosWriteTableChangeSetChange.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosGenesisTransactionChangesItemJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosGenesisTransactionChangesItem.toJSON = function (value) {\r\n        if (value instanceof AptosDeleteModuleChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosDeleteResourceChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosDeleteTableItemChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteOrUpdateModuleChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteResourceChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteTableChangeSetChange) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGenesisTransactionChangesItemValue');\r\n    };\r\n    return AptosGenesisTransactionChangesItem;\r\n}());\n\nvar AptosScriptWriteSet = /** @class */ (function () {\r\n    function AptosScriptWriteSet(input) {\r\n        this.type = input.type;\r\n        this.executeAs = input.executeAs;\r\n        this.script = AptosScriptPayloadRequest.create(input.script);\r\n    }\r\n    AptosScriptWriteSet.create = function (input) {\r\n        if (input instanceof AptosScriptWriteSet) {\r\n            return input;\r\n        }\r\n        return new AptosScriptWriteSet(input);\r\n    };\r\n    AptosScriptWriteSet.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            executeAs: json.execute_as,\r\n            script: AptosScriptPayloadRequest.fromJSON(json.script),\r\n        };\r\n        return AptosScriptWriteSet.create(input);\r\n    };\r\n    AptosScriptWriteSet.isInput = function (input) {\r\n        return input.type === 'script_write_set';\r\n    };\r\n    AptosScriptWriteSet.isJSON = function (json) {\r\n        return json.type === 'script_write_set';\r\n    };\r\n    AptosScriptWriteSet.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            execute_as: this.executeAs,\r\n            script: this.script.toJSON(),\r\n        };\r\n    };\r\n    return AptosScriptWriteSet;\r\n}());\n\nvar AptosDirectWriteSet = /** @class */ (function () {\r\n    function AptosDirectWriteSet(input) {\r\n        this.type = input.type;\r\n        this.changes = input.changes;\r\n        this.events = input.events.map(function (item) { return AptosTransactionEvent.create(item); });\r\n    }\r\n    AptosDirectWriteSet.create = function (input) {\r\n        if (input instanceof AptosDirectWriteSet) {\r\n            return input;\r\n        }\r\n        return new AptosDirectWriteSet(input);\r\n    };\r\n    AptosDirectWriteSet.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            changes: json.changes,\r\n            events: json.events.map(function (item) { return AptosTransactionEvent.fromJSON(item); }),\r\n        };\r\n        return AptosDirectWriteSet.create(input);\r\n    };\r\n    AptosDirectWriteSet.isInput = function (input) {\r\n        return input.type === 'direct_write_set';\r\n    };\r\n    AptosDirectWriteSet.isJSON = function (json) {\r\n        return json.type === 'direct_write_set';\r\n    };\r\n    AptosDirectWriteSet.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            changes: this.changes,\r\n            events: this.events.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosDirectWriteSet;\r\n}());\n\nvar AptosWriteSetPayloadWriteSet = /** @class */ (function () {\r\n    function AptosWriteSetPayloadWriteSet() {\r\n    }\r\n    AptosWriteSetPayloadWriteSet.create = function (input) {\r\n        if (AptosScriptWriteSet.isInput(input)) {\r\n            return AptosScriptWriteSet.create(input);\r\n        }\r\n        if (AptosDirectWriteSet.isInput(input)) {\r\n            return AptosDirectWriteSet.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosWriteSetPayloadWriteSetInput');\r\n    };\r\n    AptosWriteSetPayloadWriteSet.fromJSON = function (json) {\r\n        if (AptosScriptWriteSet.isJSON(json)) {\r\n            return AptosScriptWriteSet.fromJSON(json);\r\n        }\r\n        if (AptosDirectWriteSet.isJSON(json)) {\r\n            return AptosDirectWriteSet.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosWriteSetPayloadWriteSetJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosWriteSetPayloadWriteSet.toJSON = function (value) {\r\n        if (value instanceof AptosScriptWriteSet) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosDirectWriteSet) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosWriteSetPayloadWriteSetValue');\r\n    };\r\n    return AptosWriteSetPayloadWriteSet;\r\n}());\n\nvar AptosWriteSetPayload = /** @class */ (function () {\r\n    function AptosWriteSetPayload(input) {\r\n        this.type = input.type;\r\n        this.writeSet = AptosWriteSetPayloadWriteSet.create(input.writeSet);\r\n    }\r\n    AptosWriteSetPayload.create = function (input) {\r\n        if (input instanceof AptosWriteSetPayload) {\r\n            return input;\r\n        }\r\n        return new AptosWriteSetPayload(input);\r\n    };\r\n    AptosWriteSetPayload.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            writeSet: AptosWriteSetPayloadWriteSet.fromJSON(json.write_set),\r\n        };\r\n        return AptosWriteSetPayload.create(input);\r\n    };\r\n    AptosWriteSetPayload.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            write_set: AptosWriteSetPayloadWriteSet.toJSON(this.writeSet),\r\n        };\r\n    };\r\n    return AptosWriteSetPayload;\r\n}());\n\nvar AptosGenesisTransaction = /** @class */ (function () {\r\n    function AptosGenesisTransaction(input) {\r\n        this.type = input.type;\r\n        this.version = input.version;\r\n        this.hash = input.hash;\r\n        this.stateChangeHash = input.stateChangeHash;\r\n        this.eventRootHash = input.eventRootHash;\r\n        this.stateCheckpointHash = input.stateCheckpointHash;\r\n        this.gasUsed = input.gasUsed;\r\n        this.success = input.success;\r\n        this.vmStatus = input.vmStatus;\r\n        this.accumulatorRootHash = input.accumulatorRootHash;\r\n        this.changes = input.changes.map(function (item) { return AptosGenesisTransactionChangesItem.create(item); });\r\n        this.payload = AptosWriteSetPayload.create(input.payload);\r\n        this.events = input.events.map(function (item) { return AptosTransactionEvent.create(item); });\r\n    }\r\n    AptosGenesisTransaction.create = function (input) {\r\n        if (input instanceof AptosGenesisTransaction) {\r\n            return input;\r\n        }\r\n        return new AptosGenesisTransaction(input);\r\n    };\r\n    AptosGenesisTransaction.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            version: json.version,\r\n            hash: json.hash,\r\n            stateChangeHash: json.state_change_hash,\r\n            eventRootHash: json.event_root_hash,\r\n            stateCheckpointHash: json.state_checkpoint_hash,\r\n            gasUsed: json.gas_used,\r\n            success: json.success,\r\n            vmStatus: json.vm_status,\r\n            accumulatorRootHash: json.accumulator_root_hash,\r\n            changes: json.changes.map(function (item) { return AptosGenesisTransactionChangesItem.fromJSON(item); }),\r\n            payload: AptosWriteSetPayload.fromJSON(json.payload),\r\n            events: json.events.map(function (item) { return AptosTransactionEvent.fromJSON(item); }),\r\n        };\r\n        return AptosGenesisTransaction.create(input);\r\n    };\r\n    AptosGenesisTransaction.isInput = function (input) {\r\n        return input.type === 'genesis_transaction';\r\n    };\r\n    AptosGenesisTransaction.isJSON = function (json) {\r\n        return json.type === 'genesis_transaction';\r\n    };\r\n    AptosGenesisTransaction.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            version: this.version,\r\n            hash: this.hash,\r\n            state_change_hash: this.stateChangeHash,\r\n            event_root_hash: this.eventRootHash,\r\n            state_checkpoint_hash: this.stateCheckpointHash,\r\n            gas_used: this.gasUsed,\r\n            success: this.success,\r\n            vm_status: this.vmStatus,\r\n            accumulator_root_hash: this.accumulatorRootHash,\r\n            changes: this.changes.map(function (item) { return AptosGenesisTransactionChangesItem.toJSON(item); }),\r\n            payload: this.payload.toJSON(),\r\n            events: this.events.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return AptosGenesisTransaction;\r\n}());\n\nvar AptosBlockMetadataTransactionChangesItem = /** @class */ (function () {\r\n    function AptosBlockMetadataTransactionChangesItem() {\r\n    }\r\n    AptosBlockMetadataTransactionChangesItem.create = function (input) {\r\n        if (AptosDeleteModuleChange.isInput(input)) {\r\n            return AptosDeleteModuleChange.create(input);\r\n        }\r\n        if (AptosDeleteResourceChange.isInput(input)) {\r\n            return AptosDeleteResourceChange.create(input);\r\n        }\r\n        if (AptosDeleteTableItemChange.isInput(input)) {\r\n            return AptosDeleteTableItemChange.create(input);\r\n        }\r\n        if (AptosWriteOrUpdateModuleChange.isInput(input)) {\r\n            return AptosWriteOrUpdateModuleChange.create(input);\r\n        }\r\n        if (AptosWriteResourceChange.isInput(input)) {\r\n            return AptosWriteResourceChange.create(input);\r\n        }\r\n        if (AptosWriteTableChangeSetChange.isInput(input)) {\r\n            return AptosWriteTableChangeSetChange.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosBlockMetadataTransactionChangesItemInput');\r\n    };\r\n    AptosBlockMetadataTransactionChangesItem.fromJSON = function (json) {\r\n        if (AptosDeleteModuleChange.isJSON(json)) {\r\n            return AptosDeleteModuleChange.fromJSON(json);\r\n        }\r\n        if (AptosDeleteResourceChange.isJSON(json)) {\r\n            return AptosDeleteResourceChange.fromJSON(json);\r\n        }\r\n        if (AptosDeleteTableItemChange.isJSON(json)) {\r\n            return AptosDeleteTableItemChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteOrUpdateModuleChange.isJSON(json)) {\r\n            return AptosWriteOrUpdateModuleChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteResourceChange.isJSON(json)) {\r\n            return AptosWriteResourceChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteTableChangeSetChange.isJSON(json)) {\r\n            return AptosWriteTableChangeSetChange.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosBlockMetadataTransactionChangesItemJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosBlockMetadataTransactionChangesItem.toJSON = function (value) {\r\n        if (value instanceof AptosDeleteModuleChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosDeleteResourceChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosDeleteTableItemChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteOrUpdateModuleChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteResourceChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteTableChangeSetChange) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosBlockMetadataTransactionChangesItemValue');\r\n    };\r\n    return AptosBlockMetadataTransactionChangesItem;\r\n}());\n\nvar AptosBlockMetadataTransaction = /** @class */ (function () {\r\n    function AptosBlockMetadataTransaction(input) {\r\n        this.type = input.type;\r\n        this.version = input.version;\r\n        this.hash = input.hash;\r\n        this.stateChangeHash = input.stateChangeHash;\r\n        this.eventRootHash = input.eventRootHash;\r\n        this.stateCheckpointHash = input.stateCheckpointHash;\r\n        this.gasUsed = input.gasUsed;\r\n        this.success = input.success;\r\n        this.vmStatus = input.vmStatus;\r\n        this.accumulatorRootHash = input.accumulatorRootHash;\r\n        this.changes = input.changes.map(function (item) { return AptosBlockMetadataTransactionChangesItem.create(item); });\r\n        this.id = input.id;\r\n        this.epoch = input.epoch;\r\n        this.round = input.round;\r\n        this.events = input.events.map(function (item) { return AptosTransactionEvent.create(item); });\r\n        this.previousBlockVotesBitvec = input.previousBlockVotesBitvec;\r\n        this.proposer = AptosAddress.create(input.proposer);\r\n        this.failedProposerIndices = input.failedProposerIndices;\r\n        this.timestamp = input.timestamp;\r\n    }\r\n    AptosBlockMetadataTransaction.create = function (input) {\r\n        if (input instanceof AptosBlockMetadataTransaction) {\r\n            return input;\r\n        }\r\n        return new AptosBlockMetadataTransaction(input);\r\n    };\r\n    AptosBlockMetadataTransaction.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            version: json.version,\r\n            hash: json.hash,\r\n            stateChangeHash: json.state_change_hash,\r\n            eventRootHash: json.event_root_hash,\r\n            stateCheckpointHash: json.state_checkpoint_hash,\r\n            gasUsed: json.gas_used,\r\n            success: json.success,\r\n            vmStatus: json.vm_status,\r\n            accumulatorRootHash: json.accumulator_root_hash,\r\n            changes: json.changes.map(function (item) { return AptosBlockMetadataTransactionChangesItem.fromJSON(item); }),\r\n            id: json.id,\r\n            epoch: json.epoch,\r\n            round: json.round,\r\n            events: json.events.map(function (item) { return AptosTransactionEvent.fromJSON(item); }),\r\n            previousBlockVotesBitvec: json.previous_block_votes_bitvec,\r\n            proposer: AptosAddress.fromJSON(json.proposer),\r\n            failedProposerIndices: json.failed_proposer_indices,\r\n            timestamp: json.timestamp,\r\n        };\r\n        return AptosBlockMetadataTransaction.create(input);\r\n    };\r\n    AptosBlockMetadataTransaction.isInput = function (input) {\r\n        return input.type === 'block_metadata_transaction';\r\n    };\r\n    AptosBlockMetadataTransaction.isJSON = function (json) {\r\n        return json.type === 'block_metadata_transaction';\r\n    };\r\n    AptosBlockMetadataTransaction.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            version: this.version,\r\n            hash: this.hash,\r\n            state_change_hash: this.stateChangeHash,\r\n            event_root_hash: this.eventRootHash,\r\n            state_checkpoint_hash: this.stateCheckpointHash,\r\n            gas_used: this.gasUsed,\r\n            success: this.success,\r\n            vm_status: this.vmStatus,\r\n            accumulator_root_hash: this.accumulatorRootHash,\r\n            changes: this.changes.map(function (item) { return AptosBlockMetadataTransactionChangesItem.toJSON(item); }),\r\n            id: this.id,\r\n            epoch: this.epoch,\r\n            round: this.round,\r\n            events: this.events.map(function (item) { return item.toJSON(); }),\r\n            previous_block_votes_bitvec: this.previousBlockVotesBitvec,\r\n            proposer: this.proposer.toJSON(),\r\n            failed_proposer_indices: this.failedProposerIndices,\r\n            timestamp: this.timestamp,\r\n        };\r\n    };\r\n    return AptosBlockMetadataTransaction;\r\n}());\n\nvar AptosStateCheckpointTransactionChangesItem = /** @class */ (function () {\r\n    function AptosStateCheckpointTransactionChangesItem() {\r\n    }\r\n    AptosStateCheckpointTransactionChangesItem.create = function (input) {\r\n        if (AptosDeleteModuleChange.isInput(input)) {\r\n            return AptosDeleteModuleChange.create(input);\r\n        }\r\n        if (AptosDeleteResourceChange.isInput(input)) {\r\n            return AptosDeleteResourceChange.create(input);\r\n        }\r\n        if (AptosDeleteTableItemChange.isInput(input)) {\r\n            return AptosDeleteTableItemChange.create(input);\r\n        }\r\n        if (AptosWriteOrUpdateModuleChange.isInput(input)) {\r\n            return AptosWriteOrUpdateModuleChange.create(input);\r\n        }\r\n        if (AptosWriteResourceChange.isInput(input)) {\r\n            return AptosWriteResourceChange.create(input);\r\n        }\r\n        if (AptosWriteTableChangeSetChange.isInput(input)) {\r\n            return AptosWriteTableChangeSetChange.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosStateCheckpointTransactionChangesItemInput');\r\n    };\r\n    AptosStateCheckpointTransactionChangesItem.fromJSON = function (json) {\r\n        if (AptosDeleteModuleChange.isJSON(json)) {\r\n            return AptosDeleteModuleChange.fromJSON(json);\r\n        }\r\n        if (AptosDeleteResourceChange.isJSON(json)) {\r\n            return AptosDeleteResourceChange.fromJSON(json);\r\n        }\r\n        if (AptosDeleteTableItemChange.isJSON(json)) {\r\n            return AptosDeleteTableItemChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteOrUpdateModuleChange.isJSON(json)) {\r\n            return AptosWriteOrUpdateModuleChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteResourceChange.isJSON(json)) {\r\n            return AptosWriteResourceChange.fromJSON(json);\r\n        }\r\n        if (AptosWriteTableChangeSetChange.isJSON(json)) {\r\n            return AptosWriteTableChangeSetChange.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosStateCheckpointTransactionChangesItemJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosStateCheckpointTransactionChangesItem.toJSON = function (value) {\r\n        if (value instanceof AptosDeleteModuleChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosDeleteResourceChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosDeleteTableItemChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteOrUpdateModuleChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteResourceChange) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosWriteTableChangeSetChange) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosStateCheckpointTransactionChangesItemValue');\r\n    };\r\n    return AptosStateCheckpointTransactionChangesItem;\r\n}());\n\nvar AptosStateCheckpointTransaction = /** @class */ (function () {\r\n    function AptosStateCheckpointTransaction(input) {\r\n        this.type = input.type;\r\n        this.version = input.version;\r\n        this.hash = input.hash;\r\n        this.stateChangeHash = input.stateChangeHash;\r\n        this.eventRootHash = input.eventRootHash;\r\n        this.stateCheckpointHash = input.stateCheckpointHash;\r\n        this.gasUsed = input.gasUsed;\r\n        this.success = input.success;\r\n        this.vmStatus = input.vmStatus;\r\n        this.accumulatorRootHash = input.accumulatorRootHash;\r\n        this.changes = input.changes.map(function (item) { return AptosStateCheckpointTransactionChangesItem.create(item); });\r\n        this.timestamp = input.timestamp;\r\n    }\r\n    AptosStateCheckpointTransaction.create = function (input) {\r\n        if (input instanceof AptosStateCheckpointTransaction) {\r\n            return input;\r\n        }\r\n        return new AptosStateCheckpointTransaction(input);\r\n    };\r\n    AptosStateCheckpointTransaction.fromJSON = function (json) {\r\n        var input = {\r\n            type: json.type,\r\n            version: json.version,\r\n            hash: json.hash,\r\n            stateChangeHash: json.state_change_hash,\r\n            eventRootHash: json.event_root_hash,\r\n            stateCheckpointHash: json.state_checkpoint_hash,\r\n            gasUsed: json.gas_used,\r\n            success: json.success,\r\n            vmStatus: json.vm_status,\r\n            accumulatorRootHash: json.accumulator_root_hash,\r\n            changes: json.changes.map(function (item) { return AptosStateCheckpointTransactionChangesItem.fromJSON(item); }),\r\n            timestamp: json.timestamp,\r\n        };\r\n        return AptosStateCheckpointTransaction.create(input);\r\n    };\r\n    AptosStateCheckpointTransaction.isInput = function (input) {\r\n        return input.type === 'state_checkpoint_transaction';\r\n    };\r\n    AptosStateCheckpointTransaction.isJSON = function (json) {\r\n        return json.type === 'state_checkpoint_transaction';\r\n    };\r\n    AptosStateCheckpointTransaction.prototype.toJSON = function () {\r\n        return {\r\n            type: this.type,\r\n            version: this.version,\r\n            hash: this.hash,\r\n            state_change_hash: this.stateChangeHash,\r\n            event_root_hash: this.eventRootHash,\r\n            state_checkpoint_hash: this.stateCheckpointHash,\r\n            gas_used: this.gasUsed,\r\n            success: this.success,\r\n            vm_status: this.vmStatus,\r\n            accumulator_root_hash: this.accumulatorRootHash,\r\n            changes: this.changes.map(function (item) { return AptosStateCheckpointTransactionChangesItem.toJSON(item); }),\r\n            timestamp: this.timestamp,\r\n        };\r\n    };\r\n    return AptosStateCheckpointTransaction;\r\n}());\n\nvar AptosGetTransactionsItem = /** @class */ (function () {\r\n    function AptosGetTransactionsItem() {\r\n    }\r\n    AptosGetTransactionsItem.create = function (input) {\r\n        if (AptosPendingTransaction.isInput(input)) {\r\n            return AptosPendingTransaction.create(input);\r\n        }\r\n        if (AptosUserTransaction.isInput(input)) {\r\n            return AptosUserTransaction.create(input);\r\n        }\r\n        if (AptosGenesisTransaction.isInput(input)) {\r\n            return AptosGenesisTransaction.create(input);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isInput(input)) {\r\n            return AptosBlockMetadataTransaction.create(input);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isInput(input)) {\r\n            return AptosStateCheckpointTransaction.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGetTransactionsItemInput');\r\n    };\r\n    AptosGetTransactionsItem.fromJSON = function (json) {\r\n        if (AptosPendingTransaction.isJSON(json)) {\r\n            return AptosPendingTransaction.fromJSON(json);\r\n        }\r\n        if (AptosUserTransaction.isJSON(json)) {\r\n            return AptosUserTransaction.fromJSON(json);\r\n        }\r\n        if (AptosGenesisTransaction.isJSON(json)) {\r\n            return AptosGenesisTransaction.fromJSON(json);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isJSON(json)) {\r\n            return AptosBlockMetadataTransaction.fromJSON(json);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isJSON(json)) {\r\n            return AptosStateCheckpointTransaction.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosGetTransactionsItemJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosGetTransactionsItem.toJSON = function (value) {\r\n        if (value instanceof AptosPendingTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosUserTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosGenesisTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosBlockMetadataTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosStateCheckpointTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGetTransactionsItemValue');\r\n    };\r\n    return AptosGetTransactionsItem;\r\n}());\n\nvar GetTransactionsOperation = {\r\n    operationId: \"getTransactions\",\r\n    groupName: \"transactions\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/transactions\",\r\n    parameterNames: [\"limit\", \"start\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return AptosGetTransactionsItem.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        var limit = request.limit;\r\n        var start = request.start;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            limit: limit,\r\n            start: start,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosSubmitTransactionRequestPayload = /** @class */ (function () {\r\n    function AptosSubmitTransactionRequestPayload() {\r\n    }\r\n    AptosSubmitTransactionRequestPayload.create = function (input) {\r\n        if (AptosEntryFunctionPayloadRequest.isInput(input)) {\r\n            return AptosEntryFunctionPayloadRequest.create(input);\r\n        }\r\n        if (AptosScriptPayloadRequest.isInput(input)) {\r\n            return AptosScriptPayloadRequest.create(input);\r\n        }\r\n        if (AptosModuleBundlePayloadRequest.isInput(input)) {\r\n            return AptosModuleBundlePayloadRequest.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosSubmitTransactionRequestPayloadInput');\r\n    };\r\n    AptosSubmitTransactionRequestPayload.fromJSON = function (json) {\r\n        if (AptosEntryFunctionPayloadRequest.isJSON(json)) {\r\n            return AptosEntryFunctionPayloadRequest.fromJSON(json);\r\n        }\r\n        if (AptosScriptPayloadRequest.isJSON(json)) {\r\n            return AptosScriptPayloadRequest.fromJSON(json);\r\n        }\r\n        if (AptosModuleBundlePayloadRequest.isJSON(json)) {\r\n            return AptosModuleBundlePayloadRequest.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosSubmitTransactionRequestPayloadJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosSubmitTransactionRequestPayload.toJSON = function (value) {\r\n        if (value instanceof AptosEntryFunctionPayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosScriptPayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosModuleBundlePayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosSubmitTransactionRequestPayloadValue');\r\n    };\r\n    return AptosSubmitTransactionRequestPayload;\r\n}());\n\nvar AptosSubmitTransactionRequestSignature = /** @class */ (function () {\r\n    function AptosSubmitTransactionRequestSignature() {\r\n    }\r\n    AptosSubmitTransactionRequestSignature.create = function (input) {\r\n        if (AptosEd25519SignatureRequest.isInput(input)) {\r\n            return AptosEd25519SignatureRequest.create(input);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isInput(input)) {\r\n            return AptosMultiEd25519SignatureRequest.create(input);\r\n        }\r\n        if (AptosMultiAgentSignatureRequest.isInput(input)) {\r\n            return AptosMultiAgentSignatureRequest.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosSubmitTransactionRequestSignatureInput');\r\n    };\r\n    AptosSubmitTransactionRequestSignature.fromJSON = function (json) {\r\n        if (AptosEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosMultiEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        if (AptosMultiAgentSignatureRequest.isJSON(json)) {\r\n            return AptosMultiAgentSignatureRequest.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosSubmitTransactionRequestSignatureJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosSubmitTransactionRequestSignature.toJSON = function (value) {\r\n        if (value instanceof AptosEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosMultiEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosMultiAgentSignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosSubmitTransactionRequestSignatureValue');\r\n    };\r\n    return AptosSubmitTransactionRequestSignature;\r\n}());\n\nvar AptosSubmitTransactionRequest = /** @class */ (function () {\r\n    function AptosSubmitTransactionRequest(input) {\r\n        this.sender = AptosAddress.create(input.sender);\r\n        this.sequenceNumber = input.sequenceNumber;\r\n        this.maxGasAmount = input.maxGasAmount;\r\n        this.gasUnitPrice = input.gasUnitPrice;\r\n        this.expirationTimestampSecs = input.expirationTimestampSecs;\r\n        this.payload = AptosSubmitTransactionRequestPayload.create(input.payload);\r\n        this.signature = AptosSubmitTransactionRequestSignature.create(input.signature);\r\n    }\r\n    AptosSubmitTransactionRequest.create = function (input) {\r\n        if (input instanceof AptosSubmitTransactionRequest) {\r\n            return input;\r\n        }\r\n        return new AptosSubmitTransactionRequest(input);\r\n    };\r\n    AptosSubmitTransactionRequest.fromJSON = function (json) {\r\n        var input = {\r\n            sender: AptosAddress.fromJSON(json.sender),\r\n            sequenceNumber: json.sequence_number,\r\n            maxGasAmount: json.max_gas_amount,\r\n            gasUnitPrice: json.gas_unit_price,\r\n            expirationTimestampSecs: json.expiration_timestamp_secs,\r\n            payload: AptosSubmitTransactionRequestPayload.fromJSON(json.payload),\r\n            signature: AptosSubmitTransactionRequestSignature.fromJSON(json.signature),\r\n        };\r\n        return AptosSubmitTransactionRequest.create(input);\r\n    };\r\n    AptosSubmitTransactionRequest.prototype.toJSON = function () {\r\n        return {\r\n            sender: this.sender.toJSON(),\r\n            sequence_number: this.sequenceNumber,\r\n            max_gas_amount: this.maxGasAmount,\r\n            gas_unit_price: this.gasUnitPrice,\r\n            expiration_timestamp_secs: this.expirationTimestampSecs,\r\n            payload: AptosSubmitTransactionRequestPayload.toJSON(this.payload),\r\n            signature: AptosSubmitTransactionRequestSignature.toJSON(this.signature),\r\n        };\r\n    };\r\n    return AptosSubmitTransactionRequest;\r\n}());\n\nvar SubmitTransactionOperation = {\r\n    operationId: \"submitTransaction\",\r\n    groupName: \"transactions\",\r\n    httpMethod: \"post\",\r\n    routePattern: \"/transactions\",\r\n    parameterNames: [\"network\"],\r\n    hasResponse: true,\r\n    hasBody: true,\r\n    parseResponse: function (json) {\r\n        return AptosPendingTransaction.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n    serializeBody: function (body) {\r\n        var value = AptosSubmitTransactionRequest.create(body);\r\n        return value.toJSON();\r\n    },\r\n};\n\nvar AptosGetTransactionByHash = /** @class */ (function () {\r\n    function AptosGetTransactionByHash() {\r\n    }\r\n    AptosGetTransactionByHash.create = function (input) {\r\n        if (AptosPendingTransaction.isInput(input)) {\r\n            return AptosPendingTransaction.create(input);\r\n        }\r\n        if (AptosUserTransaction.isInput(input)) {\r\n            return AptosUserTransaction.create(input);\r\n        }\r\n        if (AptosGenesisTransaction.isInput(input)) {\r\n            return AptosGenesisTransaction.create(input);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isInput(input)) {\r\n            return AptosBlockMetadataTransaction.create(input);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isInput(input)) {\r\n            return AptosStateCheckpointTransaction.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGetTransactionByHashInput');\r\n    };\r\n    AptosGetTransactionByHash.fromJSON = function (json) {\r\n        if (AptosPendingTransaction.isJSON(json)) {\r\n            return AptosPendingTransaction.fromJSON(json);\r\n        }\r\n        if (AptosUserTransaction.isJSON(json)) {\r\n            return AptosUserTransaction.fromJSON(json);\r\n        }\r\n        if (AptosGenesisTransaction.isJSON(json)) {\r\n            return AptosGenesisTransaction.fromJSON(json);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isJSON(json)) {\r\n            return AptosBlockMetadataTransaction.fromJSON(json);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isJSON(json)) {\r\n            return AptosStateCheckpointTransaction.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosGetTransactionByHashJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosGetTransactionByHash.toJSON = function (value) {\r\n        if (value instanceof AptosPendingTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosUserTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosGenesisTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosBlockMetadataTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosStateCheckpointTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGetTransactionByHashValue');\r\n    };\r\n    return AptosGetTransactionByHash;\r\n}());\n\nvar GetTransactionByHashOperation = {\r\n    operationId: \"getTransactionByHash\",\r\n    groupName: \"transactions\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/transactions/by_hash/{txn_hash}\",\r\n    parameterNames: [\"txn_hash\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetTransactionByHash.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var txnHash = request.txnHash;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            txn_hash: txnHash,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetTransactionByVersion = /** @class */ (function () {\r\n    function AptosGetTransactionByVersion() {\r\n    }\r\n    AptosGetTransactionByVersion.create = function (input) {\r\n        if (AptosPendingTransaction.isInput(input)) {\r\n            return AptosPendingTransaction.create(input);\r\n        }\r\n        if (AptosUserTransaction.isInput(input)) {\r\n            return AptosUserTransaction.create(input);\r\n        }\r\n        if (AptosGenesisTransaction.isInput(input)) {\r\n            return AptosGenesisTransaction.create(input);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isInput(input)) {\r\n            return AptosBlockMetadataTransaction.create(input);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isInput(input)) {\r\n            return AptosStateCheckpointTransaction.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGetTransactionByVersionInput');\r\n    };\r\n    AptosGetTransactionByVersion.fromJSON = function (json) {\r\n        if (AptosPendingTransaction.isJSON(json)) {\r\n            return AptosPendingTransaction.fromJSON(json);\r\n        }\r\n        if (AptosUserTransaction.isJSON(json)) {\r\n            return AptosUserTransaction.fromJSON(json);\r\n        }\r\n        if (AptosGenesisTransaction.isJSON(json)) {\r\n            return AptosGenesisTransaction.fromJSON(json);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isJSON(json)) {\r\n            return AptosBlockMetadataTransaction.fromJSON(json);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isJSON(json)) {\r\n            return AptosStateCheckpointTransaction.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosGetTransactionByVersionJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosGetTransactionByVersion.toJSON = function (value) {\r\n        if (value instanceof AptosPendingTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosUserTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosGenesisTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosBlockMetadataTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosStateCheckpointTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGetTransactionByVersionValue');\r\n    };\r\n    return AptosGetTransactionByVersion;\r\n}());\n\nvar GetTransactionByVersionOperation = {\r\n    operationId: \"getTransactionByVersion\",\r\n    groupName: \"transactions\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/transactions/by_version/{txn_version}\",\r\n    parameterNames: [\"txn_version\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosGetTransactionByVersion.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var txnVersion = request.txnVersion;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            txn_version: txnVersion,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosGetAccountTransactionsItem = /** @class */ (function () {\r\n    function AptosGetAccountTransactionsItem() {\r\n    }\r\n    AptosGetAccountTransactionsItem.create = function (input) {\r\n        if (AptosPendingTransaction.isInput(input)) {\r\n            return AptosPendingTransaction.create(input);\r\n        }\r\n        if (AptosUserTransaction.isInput(input)) {\r\n            return AptosUserTransaction.create(input);\r\n        }\r\n        if (AptosGenesisTransaction.isInput(input)) {\r\n            return AptosGenesisTransaction.create(input);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isInput(input)) {\r\n            return AptosBlockMetadataTransaction.create(input);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isInput(input)) {\r\n            return AptosStateCheckpointTransaction.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGetAccountTransactionsItemInput');\r\n    };\r\n    AptosGetAccountTransactionsItem.fromJSON = function (json) {\r\n        if (AptosPendingTransaction.isJSON(json)) {\r\n            return AptosPendingTransaction.fromJSON(json);\r\n        }\r\n        if (AptosUserTransaction.isJSON(json)) {\r\n            return AptosUserTransaction.fromJSON(json);\r\n        }\r\n        if (AptosGenesisTransaction.isJSON(json)) {\r\n            return AptosGenesisTransaction.fromJSON(json);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isJSON(json)) {\r\n            return AptosBlockMetadataTransaction.fromJSON(json);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isJSON(json)) {\r\n            return AptosStateCheckpointTransaction.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosGetAccountTransactionsItemJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosGetAccountTransactionsItem.toJSON = function (value) {\r\n        if (value instanceof AptosPendingTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosUserTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosGenesisTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosBlockMetadataTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosStateCheckpointTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosGetAccountTransactionsItemValue');\r\n    };\r\n    return AptosGetAccountTransactionsItem;\r\n}());\n\nvar GetAccountTransactionsOperation = {\r\n    operationId: \"getAccountTransactions\",\r\n    groupName: \"transactions\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/accounts/{address}/transactions\",\r\n    parameterNames: [\"address\", \"limit\", \"start\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return AptosGetAccountTransactionsItem.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        var address = request.address;\r\n        var limit = request.limit;\r\n        var start = request.start;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            address: address,\r\n            limit: limit,\r\n            start: start,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\n// $ref: #/components/schemas/SubmitBatchTransactionResult\r\n// type: SubmitBatchTransactionResult\r\n// properties:\r\n// - transaction_failures ($ref: #/components/schemas/SubmitBatchTransactionResult/properties/transaction_failures)\r\nvar AptosSubmitBatchTransactionResult = /** @class */ (function () {\r\n    function AptosSubmitBatchTransactionResult(input) {\r\n        this.transactionFailures = input.transactionFailures;\r\n    }\r\n    AptosSubmitBatchTransactionResult.create = function (input) {\r\n        if (input instanceof AptosSubmitBatchTransactionResult) {\r\n            return input;\r\n        }\r\n        return new AptosSubmitBatchTransactionResult(input);\r\n    };\r\n    AptosSubmitBatchTransactionResult.fromJSON = function (json) {\r\n        var input = {\r\n            transactionFailures: json.transaction_failures,\r\n        };\r\n        return AptosSubmitBatchTransactionResult.create(input);\r\n    };\r\n    AptosSubmitBatchTransactionResult.prototype.toJSON = function () {\r\n        return {\r\n            transaction_failures: this.transactionFailures,\r\n        };\r\n    };\r\n    return AptosSubmitBatchTransactionResult;\r\n}());\n\nvar SubmitBatchTransactionsOperation = {\r\n    operationId: \"submitBatchTransactions\",\r\n    groupName: \"transactions\",\r\n    httpMethod: \"post\",\r\n    routePattern: \"/transactions/batch\",\r\n    parameterNames: [\"network\"],\r\n    hasResponse: true,\r\n    hasBody: true,\r\n    parseResponse: function (json) {\r\n        return AptosSubmitBatchTransactionResult.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n    serializeBody: function (body) {\r\n        var value = body.map(function (item) { return AptosSubmitTransactionRequest.create(item); });\r\n        return value.map(function (item) { return item.toJSON(); });\r\n    },\r\n};\n\nvar AptosSimulateTransaction = /** @class */ (function () {\r\n    function AptosSimulateTransaction() {\r\n    }\r\n    AptosSimulateTransaction.create = function (input) {\r\n        if (AptosPendingTransaction.isInput(input)) {\r\n            return AptosPendingTransaction.create(input);\r\n        }\r\n        if (AptosUserTransaction.isInput(input)) {\r\n            return AptosUserTransaction.create(input);\r\n        }\r\n        if (AptosGenesisTransaction.isInput(input)) {\r\n            return AptosGenesisTransaction.create(input);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isInput(input)) {\r\n            return AptosBlockMetadataTransaction.create(input);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isInput(input)) {\r\n            return AptosStateCheckpointTransaction.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosSimulateTransactionInput');\r\n    };\r\n    AptosSimulateTransaction.fromJSON = function (json) {\r\n        if (AptosPendingTransaction.isJSON(json)) {\r\n            return AptosPendingTransaction.fromJSON(json);\r\n        }\r\n        if (AptosUserTransaction.isJSON(json)) {\r\n            return AptosUserTransaction.fromJSON(json);\r\n        }\r\n        if (AptosGenesisTransaction.isJSON(json)) {\r\n            return AptosGenesisTransaction.fromJSON(json);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isJSON(json)) {\r\n            return AptosBlockMetadataTransaction.fromJSON(json);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isJSON(json)) {\r\n            return AptosStateCheckpointTransaction.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosSimulateTransactionJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosSimulateTransaction.toJSON = function (value) {\r\n        if (value instanceof AptosPendingTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosUserTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosGenesisTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosBlockMetadataTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosStateCheckpointTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosSimulateTransactionValue');\r\n    };\r\n    return AptosSimulateTransaction;\r\n}());\n\nvar SimulateTransactionOperation = {\r\n    operationId: \"simulateTransaction\",\r\n    groupName: \"transactions\",\r\n    httpMethod: \"post\",\r\n    routePattern: \"/transactions/simulate\",\r\n    parameterNames: [\"network\"],\r\n    hasResponse: true,\r\n    hasBody: true,\r\n    parseResponse: function (json) {\r\n        return AptosSimulateTransaction.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n    serializeBody: function (body) {\r\n        var value = AptosSubmitTransactionRequest.create(body);\r\n        return value.toJSON();\r\n    },\r\n};\n\nvar AptosEncodeSubmissionRequestPayload = /** @class */ (function () {\r\n    function AptosEncodeSubmissionRequestPayload() {\r\n    }\r\n    AptosEncodeSubmissionRequestPayload.create = function (input) {\r\n        if (AptosEntryFunctionPayloadRequest.isInput(input)) {\r\n            return AptosEntryFunctionPayloadRequest.create(input);\r\n        }\r\n        if (AptosScriptPayloadRequest.isInput(input)) {\r\n            return AptosScriptPayloadRequest.create(input);\r\n        }\r\n        if (AptosModuleBundlePayloadRequest.isInput(input)) {\r\n            return AptosModuleBundlePayloadRequest.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosEncodeSubmissionRequestPayloadInput');\r\n    };\r\n    AptosEncodeSubmissionRequestPayload.fromJSON = function (json) {\r\n        if (AptosEntryFunctionPayloadRequest.isJSON(json)) {\r\n            return AptosEntryFunctionPayloadRequest.fromJSON(json);\r\n        }\r\n        if (AptosScriptPayloadRequest.isJSON(json)) {\r\n            return AptosScriptPayloadRequest.fromJSON(json);\r\n        }\r\n        if (AptosModuleBundlePayloadRequest.isJSON(json)) {\r\n            return AptosModuleBundlePayloadRequest.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosEncodeSubmissionRequestPayloadJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosEncodeSubmissionRequestPayload.toJSON = function (value) {\r\n        if (value instanceof AptosEntryFunctionPayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosScriptPayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosModuleBundlePayloadRequest) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosEncodeSubmissionRequestPayloadValue');\r\n    };\r\n    return AptosEncodeSubmissionRequestPayload;\r\n}());\n\nvar AptosEncodeSubmissionRequest = /** @class */ (function () {\r\n    function AptosEncodeSubmissionRequest(input) {\r\n        this.sender = AptosAddress.create(input.sender);\r\n        this.sequenceNumber = input.sequenceNumber;\r\n        this.maxGasAmount = input.maxGasAmount;\r\n        this.gasUnitPrice = input.gasUnitPrice;\r\n        this.expirationTimestampSecs = input.expirationTimestampSecs;\r\n        this.payload = AptosEncodeSubmissionRequestPayload.create(input.payload);\r\n        this.secondarySigners = input.secondarySigners;\r\n    }\r\n    AptosEncodeSubmissionRequest.create = function (input) {\r\n        if (input instanceof AptosEncodeSubmissionRequest) {\r\n            return input;\r\n        }\r\n        return new AptosEncodeSubmissionRequest(input);\r\n    };\r\n    AptosEncodeSubmissionRequest.fromJSON = function (json) {\r\n        var input = {\r\n            sender: AptosAddress.fromJSON(json.sender),\r\n            sequenceNumber: json.sequence_number,\r\n            maxGasAmount: json.max_gas_amount,\r\n            gasUnitPrice: json.gas_unit_price,\r\n            expirationTimestampSecs: json.expiration_timestamp_secs,\r\n            payload: AptosEncodeSubmissionRequestPayload.fromJSON(json.payload),\r\n            secondarySigners: json.secondary_signers,\r\n        };\r\n        return AptosEncodeSubmissionRequest.create(input);\r\n    };\r\n    AptosEncodeSubmissionRequest.prototype.toJSON = function () {\r\n        return {\r\n            sender: this.sender.toJSON(),\r\n            sequence_number: this.sequenceNumber,\r\n            max_gas_amount: this.maxGasAmount,\r\n            gas_unit_price: this.gasUnitPrice,\r\n            expiration_timestamp_secs: this.expirationTimestampSecs,\r\n            payload: AptosEncodeSubmissionRequestPayload.toJSON(this.payload),\r\n            secondary_signers: this.secondarySigners,\r\n        };\r\n    };\r\n    return AptosEncodeSubmissionRequest;\r\n}());\n\nvar EncodeSubmissionOperation = {\r\n    operationId: \"encodeSubmission\",\r\n    groupName: \"transactions\",\r\n    httpMethod: \"post\",\r\n    routePattern: \"/transactions/encode_submission\",\r\n    parameterNames: [\"network\"],\r\n    hasResponse: true,\r\n    hasBody: true,\r\n    parseResponse: function (json) {\r\n        return json;\r\n    },\r\n    serializeRequest: function (request) {\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n    serializeBody: function (body) {\r\n        var value = AptosEncodeSubmissionRequest.create(body);\r\n        return value.toJSON();\r\n    },\r\n};\n\n// $ref: #/components/schemas/EstimateGasPriceResult\r\n// type: EstimateGasPriceResult\r\n// properties:\r\n// - deprioritized_gas_estimate ($ref: #/components/schemas/EstimateGasPriceResult/properties/deprioritized_gas_estimate)\r\n// - gas_estimate ($ref: #/components/schemas/EstimateGasPriceResult/properties/gas_estimate)\r\n// - prioritized_gas_estimate ($ref: #/components/schemas/EstimateGasPriceResult/properties/prioritized_gas_estimate)\r\nvar AptosEstimateGasPriceResult = /** @class */ (function () {\r\n    function AptosEstimateGasPriceResult(input) {\r\n        this.deprioritizedGasEstimate = input.deprioritizedGasEstimate;\r\n        this.gasEstimate = input.gasEstimate;\r\n        this.prioritizedGasEstimate = input.prioritizedGasEstimate;\r\n    }\r\n    AptosEstimateGasPriceResult.create = function (input) {\r\n        if (input instanceof AptosEstimateGasPriceResult) {\r\n            return input;\r\n        }\r\n        return new AptosEstimateGasPriceResult(input);\r\n    };\r\n    AptosEstimateGasPriceResult.fromJSON = function (json) {\r\n        var input = {\r\n            deprioritizedGasEstimate: json.deprioritized_gas_estimate,\r\n            gasEstimate: json.gas_estimate,\r\n            prioritizedGasEstimate: json.prioritized_gas_estimate,\r\n        };\r\n        return AptosEstimateGasPriceResult.create(input);\r\n    };\r\n    AptosEstimateGasPriceResult.prototype.toJSON = function () {\r\n        return {\r\n            deprioritized_gas_estimate: this.deprioritizedGasEstimate,\r\n            gas_estimate: this.gasEstimate,\r\n            prioritized_gas_estimate: this.prioritizedGasEstimate,\r\n        };\r\n    };\r\n    return AptosEstimateGasPriceResult;\r\n}());\n\nvar EstimateGasPriceOperation = {\r\n    operationId: \"estimateGasPrice\",\r\n    groupName: \"transactions\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/transactions/estimate_gas_price\",\r\n    parameterNames: [\"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosEstimateGasPriceResult.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AptosBlockTransactionsItem = /** @class */ (function () {\r\n    function AptosBlockTransactionsItem() {\r\n    }\r\n    AptosBlockTransactionsItem.create = function (input) {\r\n        if (AptosPendingTransaction.isInput(input)) {\r\n            return AptosPendingTransaction.create(input);\r\n        }\r\n        if (AptosUserTransaction.isInput(input)) {\r\n            return AptosUserTransaction.create(input);\r\n        }\r\n        if (AptosGenesisTransaction.isInput(input)) {\r\n            return AptosGenesisTransaction.create(input);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isInput(input)) {\r\n            return AptosBlockMetadataTransaction.create(input);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isInput(input)) {\r\n            return AptosStateCheckpointTransaction.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosBlockTransactionsItemInput');\r\n    };\r\n    AptosBlockTransactionsItem.fromJSON = function (json) {\r\n        if (AptosPendingTransaction.isJSON(json)) {\r\n            return AptosPendingTransaction.fromJSON(json);\r\n        }\r\n        if (AptosUserTransaction.isJSON(json)) {\r\n            return AptosUserTransaction.fromJSON(json);\r\n        }\r\n        if (AptosGenesisTransaction.isJSON(json)) {\r\n            return AptosGenesisTransaction.fromJSON(json);\r\n        }\r\n        if (AptosBlockMetadataTransaction.isJSON(json)) {\r\n            return AptosBlockMetadataTransaction.fromJSON(json);\r\n        }\r\n        if (AptosStateCheckpointTransaction.isJSON(json)) {\r\n            return AptosStateCheckpointTransaction.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosBlockTransactionsItemJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosBlockTransactionsItem.toJSON = function (value) {\r\n        if (value instanceof AptosPendingTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosUserTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosGenesisTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosBlockMetadataTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosStateCheckpointTransaction) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosBlockTransactionsItemValue');\r\n    };\r\n    return AptosBlockTransactionsItem;\r\n}());\n\nvar AptosBlock = /** @class */ (function () {\r\n    function AptosBlock(input) {\r\n        this.blockHeight = input.blockHeight;\r\n        this.blockHash = input.blockHash;\r\n        this.blockTimestamp = input.blockTimestamp;\r\n        this.firstVersion = input.firstVersion;\r\n        this.lastVersion = input.lastVersion;\r\n        this.transactions = input.transactions ? input.transactions.map(function (item) { return AptosBlockTransactionsItem.create(item); }) : undefined;\r\n    }\r\n    AptosBlock.create = function (input) {\r\n        if (input instanceof AptosBlock) {\r\n            return input;\r\n        }\r\n        return new AptosBlock(input);\r\n    };\r\n    AptosBlock.fromJSON = function (json) {\r\n        var input = {\r\n            blockHeight: json.block_height,\r\n            blockHash: json.block_hash,\r\n            blockTimestamp: json.block_timestamp,\r\n            firstVersion: json.first_version,\r\n            lastVersion: json.last_version,\r\n            transactions: json.transactions ? json.transactions.map(function (item) { return AptosBlockTransactionsItem.fromJSON(item); }) : undefined,\r\n        };\r\n        return AptosBlock.create(input);\r\n    };\r\n    AptosBlock.prototype.toJSON = function () {\r\n        return {\r\n            block_height: this.blockHeight,\r\n            block_hash: this.blockHash,\r\n            block_timestamp: this.blockTimestamp,\r\n            first_version: this.firstVersion,\r\n            last_version: this.lastVersion,\r\n            transactions: this.transactions ? this.transactions.map(function (item) { return AptosBlockTransactionsItem.toJSON(item); }) : undefined,\r\n        };\r\n    };\r\n    return AptosBlock;\r\n}());\n\nvar GetBlockByHeightOperation = {\r\n    operationId: \"getBlockByHeight\",\r\n    groupName: \"blocks\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/blocks/{block_height}\",\r\n    parameterNames: [\"block_height\", \"with_transactions\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosBlock.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var blockHeight = request.blockHeight;\r\n        var withTransactions = request.withTransactions;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            block_height: blockHeight,\r\n            with_transactions: withTransactions,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar GetBlockByVersionOperation = {\r\n    operationId: \"getBlockByVersion\",\r\n    groupName: \"blocks\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/blocks/by_version/{version}\",\r\n    parameterNames: [\"version\", \"with_transactions\", \"network\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return AptosBlock.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var version = request.version;\r\n        var withTransactions = request.withTransactions;\r\n        var network = request.network ? AptosNetwork.create(request.network) : undefined;\r\n        return {\r\n            version: version,\r\n            with_transactions: withTransactions,\r\n            network: network ? network.toJSON() : undefined,\r\n        };\r\n    },\r\n};\n\nvar AbstractClient = /** @class */ (function () {\r\n    function AbstractClient() {\r\n        this.accounts = {\r\n            /**\r\n             * @description Get account\r\n             * @param request Request with parameters.\r\n             * @param {String} request.address Address of account with or without a 0x prefix\r\n             * @param {String} [request.ledgerVersion] Ledger version to get state of account.\r\n             * If not provided, it will be the latest version (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getAccount: this.createEndpoint(GetAccountOperation),\r\n            /**\r\n             * @description Get account resources\r\n             * @param request Request with parameters.\r\n             * @param {String} request.address Address of account with or without a 0x prefix\r\n             * @param {String} [request.ledgerVersion] Ledger version to get state of account.\r\n             * If not provided, it will be the latest version (optional)\r\n             * @param {Number} [request.limit] Max number of account resources to retrieve.\r\n             * If not provided, defaults to default page size. (optional)\r\n             * @param {String} [request.start] Cursor specifying where to start for pagination\r\n             * This cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response. (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object[]} Response for the request.\r\n             */\r\n            getAccountResources: this.createEndpoint(GetAccountResourcesOperation),\r\n            /**\r\n             * @description Get account modules\r\n             * @param request Request with parameters.\r\n             * @param {String} request.address Address of account with or without a 0x prefix\r\n             * @param {String} [request.ledgerVersion] Ledger version to get state of account.\r\n             * If not provided, it will be the latest version (optional)\r\n             * @param {Number} [request.limit] Max number of account resources to retrieve.\r\n             * If not provided, defaults to default page size. (optional)\r\n             * @param {String} [request.start] Cursor specifying where to start for pagination\r\n             * This cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response. (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object[]} Response for the request.\r\n             */\r\n            getAccountModules: this.createEndpoint(GetAccountModulesOperation),\r\n            /**\r\n             * @description Get account resource\r\n             * @param request Request with parameters.\r\n             * @param {String} request.address Address of account with or without a 0x prefix\r\n             * @param {String} request.resourceType Name of struct to retrieve e.g. 0x1::account::Account\r\n             * @param {String} [request.ledgerVersion] Ledger version to get state of account.\r\n             * If not provided, it will be the latest version (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getAccountResource: this.createEndpoint(GetAccountResourceOperation),\r\n            /**\r\n             * @description Get account module\r\n             * @param request Request with parameters.\r\n             * @param {String} request.address Address of account with or without a 0x prefix\r\n             * @param {String} request.moduleName Name of module to retrieve\r\n             * @param {String} [request.ledgerVersion] Ledger version to get state of account.\r\n             * If not provided, it will be the latest version (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getAccountModule: this.createEndpoint(GetAccountModuleOperation),\r\n            /**\r\n             * @description Get events by creation number\r\n             * @param request Request with parameters.\r\n             * @param {String} request.address Address of account with or without a 0x prefix\r\n             * @param {String} request.creationNumber Creation number corresponding to the event stream originating from the given account.\r\n             * @param {Number} [request.limit] Max number of account resources to retrieve.\r\n             * If not provided, defaults to default page size. (optional)\r\n             * @param {String} [request.start] Starting sequence number of events.\r\n             * If unspecified, by default will retrieve the most recent events (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object[]} Response for the request.\r\n             */\r\n            getEventsByCreationNumber: this.createEndpoint(GetEventsByCreationNumberOperation),\r\n            /**\r\n             * @description Get events by event handle\r\n             * @param request Request with parameters.\r\n             * @param {String} request.address Hex-encoded 32 byte Aptos account, with or without a 0x prefix, for which events are queried. This refers to the account that events were emitted to, not the account hosting the move module that emits that event type.\r\n             * @param {String} request.eventHandle Name of struct to lookup event handle.\r\n             * @param {String} request.fieldName Name of field to lookup event handle.\r\n             * @param {Number} [request.limit] Max number of account resources to retrieve.\r\n             * If not provided, defaults to default page size. (optional)\r\n             * @param {String} [request.start] Starting sequence number of events.\r\n             * If unspecified, by default will retrieve the most recent events (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object[]} Response for the request.\r\n             */\r\n            getEventsByEventHandle: this.createEndpoint(GetEventsByEventHandleOperation),\r\n        };\r\n        this.blocks = {\r\n            /**\r\n             * @description Get block by height\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.blockHeight Block height to lookup. Starts at 0\r\n             * @param {Boolean} [request.withTransactions] If set to true, include all transactions in the block (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getBlockByHeight: this.createEndpoint(GetBlockByHeightOperation),\r\n            /**\r\n             * @description Get block by version\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.version Ledger version to lookup block information for.\r\n             * @param {Boolean} [request.withTransactions] If set to true, include all transactions in the block (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getBlockByVersion: this.createEndpoint(GetBlockByVersionOperation),\r\n        };\r\n        this.coins = {\r\n            /**\r\n             * @description Get Coin Metadata by Coin Type Hashes\r\n             * @param request Request with parameters.\r\n             * @param {String[]} request.coinTypeHashes The coin type hashes to fetch info about\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object[]} Response for the request.\r\n             */\r\n            getCoinInfoByCoinTypeHashes: this.createEndpoint(GetCoinInfoByCoinTypeHashesOperation),\r\n            /**\r\n             * @description Get latest deployed coins\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getLatestCoins: this.createEndpoint(GetLatestCoinsOperation),\r\n            /**\r\n             * @description Get Coin Metadata by name range\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String} [request.fromName] The name of the coin to start from (inclusive and case sensitive) (optional)\r\n             * @param {String} [request.toName] The name of the coin to end at (inclusive and case sensitive) (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getCoinsByNameRange: this.createEndpoint(GetCoinsByNameRangeOperation),\r\n            /**\r\n             * @description Get Coin Metadata by symbol range\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String} [request.fromSymbol] The name of the coin to start from (inclusive and case sensitive) (optional)\r\n             * @param {String} [request.toSymbol] The name of the coin to end at (inclusive and case sensitive) (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getCoinsBySymbolRange: this.createEndpoint(GetCoinsBySymbolRangeOperation),\r\n            /**\r\n             * @description Get Coin Metadata by creator addresses\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Object[]} request.creatorAddresses The addresses of the creators\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getCoinsByCreators: this.createEndpoint(GetCoinsByCreatorsOperation),\r\n            /**\r\n             * @description Get Coin Transfers by wallet addresses\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)\r\n             * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)\r\n             * @param {String[]} [request.coinTypeBlacklist] The coin types of the coins to whitelist (optional)\r\n             * @param {String[]} [request.coinTypeWhitelist] The coin types of the coins to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getCoinTransfersByOwnerAddresses: this.createEndpoint(GetCoinTransfersByOwnerAddressesOperation),\r\n            /**\r\n             * @description Get Coin Transfers by block heights\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {String[]} request.blockHeights The coin types to fetch info about\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getCoinTransfersByBlockHeights: this.createEndpoint(GetCoinTransfersByBlockHeightsOperation),\r\n            /**\r\n             * @description Get Coin Transfers by Coin Type\r\n             * @param request Request with parameters.\r\n             * @param {String} request.coinType The coin type to fetch info about\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)\r\n             * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getCoinTransfersByCoinType: this.createEndpoint(GetCoinTransfersByCoinTypeOperation),\r\n            /**\r\n             * @description Get top Holders of Coin\r\n             * @param request Request with parameters.\r\n             * @param {String} request.coinTypeHash The coin type hash to fetch info about\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {Object} [request.minAmount] The minimum amount of coins required for a wallet to be included in the results (optional)\r\n             * @param {Number} [request.minVersion] The minimum version on when the balance was last updated (optional)\r\n             * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)\r\n             * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getTopHoldersByCoin: this.createEndpoint(GetTopHoldersByCoinOperation),\r\n        };\r\n        this.collections = {\r\n            /**\r\n             * @description Get NFT Collections\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String} [request.fromName] The name of the collection to start from (inclusive and case sensitive) (optional)\r\n             * @param {String} [request.toName] The name of the collection to end at (inclusive and case sensitive) (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTCollections: this.createEndpoint(GetNFTCollectionsOperation),\r\n            /**\r\n             * @description Get NFT Collections by ids\r\n             * @param request Request with parameters.\r\n             * @param {String[]} request.ids The identifiers of the collections to get\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object[]} Response for the request.\r\n             */\r\n            getNFTCollectionsByIds: this.createEndpoint(GetNFTCollectionsByIdsOperation),\r\n            /**\r\n             * @description Get NFT Collections by creator\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Object} request.creatorAddress The address of the creator\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTCollectionsByCreator: this.createEndpoint(GetNFTCollectionsByCreatorOperation),\r\n        };\r\n        this.nfts = {\r\n            /**\r\n             * @description Get NFTs by ids\r\n             * @param request Request with parameters.\r\n             * @param {String[]} request.tokenIds The identifiers of the tokens to get\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object[]} Response for the request.\r\n             */\r\n            getNFTsByIds: this.createEndpoint(GetNFTsByIdsOperation),\r\n            /**\r\n             * @description Get NFTs by Collection\r\n             * @param request Request with parameters.\r\n             * @param {String} request.collectionDataIdHash The collection data id hash of the collection\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTsByCollection: this.createEndpoint(GetNFTsByCollectionOperation),\r\n            /**\r\n             * @description Get NFTs by creators\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of tokens to return\r\n             * @param {Object[]} request.creatorAddresses The addresses of the creators\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTsByCreators: this.createEndpoint(GetNFTsByCreatorsOperation),\r\n            /**\r\n             * @description Get NFT Owners by tokens\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {String[]} request.tokenIds The identifiers of the tokens to get owners for\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTOwnersByTokens: this.createEndpoint(GetNFTOwnersByTokensOperation),\r\n            /**\r\n             * @description Get NFT Owners by Collection\r\n             * @param request Request with parameters.\r\n             * @param {String} request.collectionDataIdHash The id of the token\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)\r\n             * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTOwnersByCollection: this.createEndpoint(GetNFTOwnersByCollectionOperation),\r\n            /**\r\n             * @description Get NFT Owners of Collection\r\n             * @param request Request with parameters.\r\n             * @param {String} request.collectionDataIdHash The id of the token\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTOwnersOfCollection: this.createEndpoint(GetNFTOwnersOfCollectionOperation),\r\n            /**\r\n             * @description Get NFT Transfers by Token ids\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of tokens to return\r\n             * @param {String[]} request.tokenIds The identifiers of the tokens to get\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)\r\n             * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTTransfersByIds: this.createEndpoint(GetNFTTransfersByIdsOperation),\r\n            /**\r\n             * @description Get NFT Transfers by Collection\r\n             * @param request Request with parameters.\r\n             * @param {String} request.collectionDataIdHash The collection data id hash of the token\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)\r\n             * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTTransfersByCollection: this.createEndpoint(GetNFTTransfersByCollectionOperation),\r\n            /**\r\n             * @description Get NFT Transfers by creators\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Object[]} request.creatorAddresses The addresses of the creators\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)\r\n             * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTTransfersByCreators: this.createEndpoint(GetNFTTransfersByCreatorsOperation),\r\n            /**\r\n             * @description Get NFT Transfers by wallets\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of tokens to return\r\n             * @param {Object[]} request.walletAddresses The addresses of the wallets to get transfers for\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)\r\n             * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTTransfersByWallets: this.createEndpoint(GetNFTTransfersByWalletsOperation),\r\n        };\r\n        this.transactions = {\r\n            /**\r\n             * @description Get transactions\r\n             * @param request Request with parameters.\r\n             * @param {Number} [request.limit] Max number of transactions to retrieve.\r\n             * If not provided, defaults to default page size (optional)\r\n             * @param {String} [request.start] Account sequence number to start list of transactions.\r\n             * If not provided, defaults to showing the latest transactions (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object[]} Response for the request.\r\n             */\r\n            getTransactions: this.createEndpoint(GetTransactionsOperation),\r\n            /**\r\n             * @description Submit transaction\r\n             * @param request Request with parameters.\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @param body Request body.\r\n             * @param {Object} body.sender A hex encoded 32 byte Aptos account address.\r\n             * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.\r\n             * @param {Object} body.payload An enum of the possible transaction payloads\r\n             * @param {Object} body.signature\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            submitTransaction: this.createEndpointWithBody(SubmitTransactionOperation),\r\n            /**\r\n             * @description Get transaction by hash\r\n             * @param request Request with parameters.\r\n             * @param {String} request.txnHash Hash of transaction to retrieve\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getTransactionByHash: this.createEndpoint(GetTransactionByHashOperation),\r\n            /**\r\n             * @description Get transaction by version\r\n             * @param request Request with parameters.\r\n             * @param {String} request.txnVersion Version of transaction to retrieve\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getTransactionByVersion: this.createEndpoint(GetTransactionByVersionOperation),\r\n            /**\r\n             * @description Get account transactions\r\n             * @param request Request with parameters.\r\n             * @param {String} request.address Address of account with or without a 0x prefix\r\n             * @param {Number} [request.limit] Max number of transactions to retrieve.\r\n             * If not provided, defaults to default page size (optional)\r\n             * @param {String} [request.start] Account sequence number to start list of transactions.\r\n             * If not provided, defaults to showing the latest transactions (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object[]} Response for the request.\r\n             */\r\n            getAccountTransactions: this.createEndpoint(GetAccountTransactionsOperation),\r\n            /**\r\n             * @description Submit batch transactions\r\n             * @param request Request with parameters.\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @param body Request body.\r\n             * @param {Object} body.sender A hex encoded 32 byte Aptos account address.\r\n             * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.\r\n             * @param {Object} body.payload An enum of the possible transaction payloads\r\n             * @param {Object} body.signature\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            submitBatchTransactions: this.createEndpointWithBody(SubmitBatchTransactionsOperation),\r\n            /**\r\n             * @description Simulate transaction\r\n             * @param request Request with parameters.\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @param body Request body.\r\n             * @param {Object} body.sender A hex encoded 32 byte Aptos account address.\r\n             * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.\r\n             * @param {Object} body.payload An enum of the possible transaction payloads\r\n             * @param {Object} body.signature\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            simulateTransaction: this.createEndpointWithBody(SimulateTransactionOperation),\r\n            /**\r\n             * @description Encode submission\r\n             * @param request Request with parameters.\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @param body Request body.\r\n             * @param {Object} body.sender A hex encoded 32 byte Aptos account address.\r\n             * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.\r\n             * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.\r\n             * @param {Object} body.payload An enum of the possible transaction payloads\r\n             * @param {String[]} body.secondarySigners Secondary signer accounts of the request for Multi-agent\r\n             * @returns {String} Response for the request.\r\n             */\r\n            encodeSubmission: this.createEndpointWithBody(EncodeSubmissionOperation),\r\n            /**\r\n             * @description Estimate gas price\r\n             * @param request Request with parameters.\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            estimateGasPrice: this.createEndpoint(EstimateGasPriceOperation),\r\n        };\r\n        this.wallets = {\r\n            /**\r\n             * @description Get Coin Balances by wallet addresses\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Object[]} request.ownerAddresses The addresses of the owners to get coin balances for\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String[]} [request.coinTypeHashBlacklist] The coin type hashes of the coins to whitelist (optional)\r\n             * @param {String[]} [request.coinTypeHashWhitelist] The coin type hashes of the coins to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getCoinBalancesByWallets: this.createEndpoint(GetCoinBalancesByWalletsOperation),\r\n            /**\r\n             * @description Get Historical Coin Balances by wallet addresses\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Object[]} request.ownerAddresses The addresses of the owner addresses to get historical balances for\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String[]} [request.coinTypeHashBlacklist] The coin type hash of the coins to whitelist (optional)\r\n             * @param {String[]} [request.coinTypeHashWhitelist] The coin type hash of the coins to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getHistoricalCoinBalancesByWallets: this.createEndpoint(GetHistoricalCoinBalancesByWalletsOperation),\r\n            /**\r\n             * @description Get Coin Transfers by wallet addresses\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)\r\n             * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)\r\n             * @param {String[]} [request.coinTypeBlacklist] The coin types of the coins to whitelist (optional)\r\n             * @param {String[]} [request.coinTypeWhitelist] The coin types of the coins to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getCoinTransfersByWalletAddresses: this.createEndpoint(GetCoinTransfersByWalletAddressesOperation),\r\n            /**\r\n             * @description Get NFTs by wallet addresses\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of results to return\r\n             * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String[]} [request.collectionBlacklist] The collection data id hashes of the collections to whitelist (optional)\r\n             * @param {String[]} [request.collectionWhitelist] The collection data id hashes of the collections to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getNFTByOwners: this.createEndpoint(GetNFTByOwnersOperation),\r\n            /**\r\n             * @description Get NFT Transfers by wallets\r\n             * @param request Request with parameters.\r\n             * @param {Number} request.limit The number of tokens to return\r\n             * @param {Object[]} request.walletAddresses The addresses of the wallets to get transfers for\r\n             * @param {Number} [request.offset] The number of results to skip (optional)\r\n             * @param {String} [request.cursor] The cursor to use for getting the next page (optional)\r\n             * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)\r\n             * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)\r\n             * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)\r\n             * @returns {Object} Response for the request.\r\n             */\r\n            getWalletsNFTTransfers: this.createEndpoint(GetWalletsNFTTransfersOperation),\r\n        };\r\n    }\r\n    return AbstractClient;\r\n}());\n\nvar operations = [\r\n    GetNFTsByIdsOperation,\r\n    GetNFTsByCollectionOperation,\r\n    GetNFTsByCreatorsOperation,\r\n    GetNFTCollectionsOperation,\r\n    GetNFTCollectionsByIdsOperation,\r\n    GetNFTCollectionsByCreatorOperation,\r\n    GetNFTOwnersByTokensOperation,\r\n    GetNFTOwnersByCollectionOperation,\r\n    GetNFTOwnersOfCollectionOperation,\r\n    GetNFTTransfersByIdsOperation,\r\n    GetNFTTransfersByCollectionOperation,\r\n    GetNFTTransfersByCreatorsOperation,\r\n    GetNFTTransfersByWalletsOperation,\r\n    GetCoinInfoByCoinTypeHashesOperation,\r\n    GetLatestCoinsOperation,\r\n    GetCoinsByNameRangeOperation,\r\n    GetCoinsBySymbolRangeOperation,\r\n    GetCoinsByCreatorsOperation,\r\n    GetCoinTransfersByOwnerAddressesOperation,\r\n    GetCoinTransfersByBlockHeightsOperation,\r\n    GetCoinTransfersByCoinTypeOperation,\r\n    GetTopHoldersByCoinOperation,\r\n    GetCoinBalancesByWalletsOperation,\r\n    GetHistoricalCoinBalancesByWalletsOperation,\r\n    GetCoinTransfersByWalletAddressesOperation,\r\n    GetNFTByOwnersOperation,\r\n    GetWalletsNFTTransfersOperation,\r\n    GetAccountOperation,\r\n    GetAccountResourcesOperation,\r\n    GetAccountModulesOperation,\r\n    GetAccountResourceOperation,\r\n    GetAccountModuleOperation,\r\n    GetEventsByCreationNumberOperation,\r\n    GetEventsByEventHandleOperation,\r\n    GetTransactionsOperation,\r\n    SubmitTransactionOperation,\r\n    GetTransactionByHashOperation,\r\n    GetTransactionByVersionOperation,\r\n    GetAccountTransactionsOperation,\r\n    SubmitBatchTransactionsOperation,\r\n    SimulateTransactionOperation,\r\n    EncodeSubmissionOperation,\r\n    EstimateGasPriceOperation,\r\n    GetBlockByHeightOperation,\r\n    GetBlockByVersionOperation,\r\n];\n\nvar AptosMultiAgentSignatureRequestSender = /** @class */ (function () {\r\n    function AptosMultiAgentSignatureRequestSender() {\r\n    }\r\n    AptosMultiAgentSignatureRequestSender.create = function (input) {\r\n        if (AptosEd25519SignatureRequest.isInput(input)) {\r\n            return AptosEd25519SignatureRequest.create(input);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isInput(input)) {\r\n            return AptosMultiEd25519SignatureRequest.create(input);\r\n        }\r\n        throw new Error('Cannot resolve union from AptosMultiAgentSignatureRequestSenderInput');\r\n    };\r\n    AptosMultiAgentSignatureRequestSender.fromJSON = function (json) {\r\n        if (AptosEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        if (AptosMultiEd25519SignatureRequest.isJSON(json)) {\r\n            return AptosMultiEd25519SignatureRequest.fromJSON(json);\r\n        }\r\n        var keys = Object.keys(json).join(', ');\r\n        var type = json.type;\r\n        throw new Error(\"Cannot resolve union from AptosMultiAgentSignatureRequestSenderJSON (keys: \".concat(keys, \", type: \").concat(type, \")\"));\r\n    };\r\n    AptosMultiAgentSignatureRequestSender.toJSON = function (value) {\r\n        if (value instanceof AptosEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        if (value instanceof AptosMultiEd25519SignatureRequest) {\r\n            return value.toJSON();\r\n        }\r\n        throw new Error('Cannot resolve union from AptosMultiAgentSignatureRequestSenderValue');\r\n    };\r\n    return AptosMultiAgentSignatureRequestSender;\r\n}());\n\nexports.AbstractClient = AbstractClient;\nexports.AptosAddress = AptosAddress;\nexports.AptosBlock = AptosBlock;\nexports.AptosBlockMetadataTransaction = AptosBlockMetadataTransaction;\nexports.AptosBlockMetadataTransactionChangesItem = AptosBlockMetadataTransactionChangesItem;\nexports.AptosBlockTransactionsItem = AptosBlockTransactionsItem;\nexports.AptosCoinInfoDto = AptosCoinInfoDto;\nexports.AptosCoinTransferDto = AptosCoinTransferDto;\nexports.AptosCurrentCoinBalanceDto = AptosCurrentCoinBalanceDto;\nexports.AptosDecodedTableData = AptosDecodedTableData;\nexports.AptosDeleteModuleChange = AptosDeleteModuleChange;\nexports.AptosDeleteModuleChangeModule = AptosDeleteModuleChangeModule;\nexports.AptosDeleteResourceChange = AptosDeleteResourceChange;\nexports.AptosDeleteResourceChangeResource = AptosDeleteResourceChangeResource;\nexports.AptosDeleteTableItemChange = AptosDeleteTableItemChange;\nexports.AptosDeleteTableItemChangeHandle = AptosDeleteTableItemChangeHandle;\nexports.AptosDeleteTableItemChangeKey = AptosDeleteTableItemChangeKey;\nexports.AptosDeletedTableData = AptosDeletedTableData;\nexports.AptosDirectWriteSet = AptosDirectWriteSet;\nexports.AptosEd25519SignatureRequest = AptosEd25519SignatureRequest;\nexports.AptosEncodeSubmissionRequest = AptosEncodeSubmissionRequest;\nexports.AptosEncodeSubmissionRequestPayload = AptosEncodeSubmissionRequestPayload;\nexports.AptosEntryFunctionPayloadRequest = AptosEntryFunctionPayloadRequest;\nexports.AptosEstimateGasPriceResult = AptosEstimateGasPriceResult;\nexports.AptosGenericTypeParam = AptosGenericTypeParam;\nexports.AptosGenesisTransaction = AptosGenesisTransaction;\nexports.AptosGenesisTransactionChangesItem = AptosGenesisTransactionChangesItem;\nexports.AptosGetAccountModuleResponse = AptosGetAccountModuleResponse;\nexports.AptosGetAccountResourceResponse = AptosGetAccountResourceResponse;\nexports.AptosGetAccountResourceResponseData = AptosGetAccountResourceResponseData;\nexports.AptosGetAccountResponse = AptosGetAccountResponse;\nexports.AptosGetAccountTransactionsItem = AptosGetAccountTransactionsItem;\nexports.AptosGetCoinBalancesByWalletsResponse = AptosGetCoinBalancesByWalletsResponse;\nexports.AptosGetCoinTransfersByBlockHeightsResponse = AptosGetCoinTransfersByBlockHeightsResponse;\nexports.AptosGetCoinTransfersByCoinTypeResponse = AptosGetCoinTransfersByCoinTypeResponse;\nexports.AptosGetCoinTransfersByOwnerAddressesResponse = AptosGetCoinTransfersByOwnerAddressesResponse;\nexports.AptosGetCoinsByCreatorsResponse = AptosGetCoinsByCreatorsResponse;\nexports.AptosGetCoinsByNameRangeResponse = AptosGetCoinsByNameRangeResponse;\nexports.AptosGetCoinsBySymbolRangeResponse = AptosGetCoinsBySymbolRangeResponse;\nexports.AptosGetEventsByCreationNumberResponse = AptosGetEventsByCreationNumberResponse;\nexports.AptosGetEventsByCreationNumberResponseData = AptosGetEventsByCreationNumberResponseData;\nexports.AptosGetEventsByEventHandleResponse = AptosGetEventsByEventHandleResponse;\nexports.AptosGetEventsByEventHandleResponseData = AptosGetEventsByEventHandleResponseData;\nexports.AptosGetHistoricalCoinBalancesByWalletsResponse = AptosGetHistoricalCoinBalancesByWalletsResponse;\nexports.AptosGetLatestCoinsResponse = AptosGetLatestCoinsResponse;\nexports.AptosGetNFTTransfersByCollectionResponse = AptosGetNFTTransfersByCollectionResponse;\nexports.AptosGetNFTTransfersByCreatorsResponse = AptosGetNFTTransfersByCreatorsResponse;\nexports.AptosGetTopHoldersByCoinResponse = AptosGetTopHoldersByCoinResponse;\nexports.AptosGetTransactionByHash = AptosGetTransactionByHash;\nexports.AptosGetTransactionByVersion = AptosGetTransactionByVersion;\nexports.AptosGetTransactionsItem = AptosGetTransactionsItem;\nexports.AptosHistoricalCoinBalanceDto = AptosHistoricalCoinBalanceDto;\nexports.AptosModuleBundlePayloadRequest = AptosModuleBundlePayloadRequest;\nexports.AptosModuleExposedFunction = AptosModuleExposedFunction;\nexports.AptosModuleStruct = AptosModuleStruct;\nexports.AptosModuleStructField = AptosModuleStructField;\nexports.AptosMoveModuleAbi = AptosMoveModuleAbi;\nexports.AptosMultiAgentSignatureRequest = AptosMultiAgentSignatureRequest;\nexports.AptosMultiAgentSignatureRequestSecondarySigners = AptosMultiAgentSignatureRequestSecondarySigners;\nexports.AptosMultiAgentSignatureRequestSender = AptosMultiAgentSignatureRequestSender;\nexports.AptosMultiEd25519SignatureRequest = AptosMultiEd25519SignatureRequest;\nexports.AptosNFTCollectionItemResponse = AptosNFTCollectionItemResponse;\nexports.AptosNFTCollectionsByCreatorResponse = AptosNFTCollectionsByCreatorResponse;\nexports.AptosNFTCollectionsByNameRangeResponse = AptosNFTCollectionsByNameRangeResponse;\nexports.AptosNFTOwnerResponse = AptosNFTOwnerResponse;\nexports.AptosNFTOwnerResponseTokenProperties = AptosNFTOwnerResponseTokenProperties;\nexports.AptosNFTOwnersByCollectionResponse = AptosNFTOwnersByCollectionResponse;\nexports.AptosNFTOwnersByTokensResponse = AptosNFTOwnersByTokensResponse;\nexports.AptosNFTOwnersOfCollectionResponse = AptosNFTOwnersOfCollectionResponse;\nexports.AptosNFTTokenResponse = AptosNFTTokenResponse;\nexports.AptosNFTTokenResponseDefaultProperties = AptosNFTTokenResponseDefaultProperties;\nexports.AptosNFTTokensByCollectionResponse = AptosNFTTokensByCollectionResponse;\nexports.AptosNFTTokensByCreatorsResponse = AptosNFTTokensByCreatorsResponse;\nexports.AptosNFTTransferResponse = AptosNFTTransferResponse;\nexports.AptosNFTTransfersByTokensResponse = AptosNFTTransfersByTokensResponse;\nexports.AptosNFTTransfersByWalletsResponse = AptosNFTTransfersByWalletsResponse;\nexports.AptosNFTsByOwnersResponse = AptosNFTsByOwnersResponse;\nexports.AptosNative = AptosNative;\nexports.AptosNetwork = AptosNetwork;\nexports.AptosNetworkResolver = AptosNetworkResolver;\nexports.AptosPendingTransaction = AptosPendingTransaction;\nexports.AptosPendingTransactionPayload = AptosPendingTransactionPayload;\nexports.AptosPendingTransactionSignature = AptosPendingTransactionSignature;\nexports.AptosScriptPayloadRequest = AptosScriptPayloadRequest;\nexports.AptosScriptPayloadRequestCode = AptosScriptPayloadRequestCode;\nexports.AptosScriptWriteSet = AptosScriptWriteSet;\nexports.AptosSimulateTransaction = AptosSimulateTransaction;\nexports.AptosStateCheckpointTransaction = AptosStateCheckpointTransaction;\nexports.AptosStateCheckpointTransactionChangesItem = AptosStateCheckpointTransactionChangesItem;\nexports.AptosSubmitBatchTransactionResult = AptosSubmitBatchTransactionResult;\nexports.AptosSubmitTransactionRequest = AptosSubmitTransactionRequest;\nexports.AptosSubmitTransactionRequestPayload = AptosSubmitTransactionRequestPayload;\nexports.AptosSubmitTransactionRequestSignature = AptosSubmitTransactionRequestSignature;\nexports.AptosTransactionEvent = AptosTransactionEvent;\nexports.AptosTransactionEventData = AptosTransactionEventData;\nexports.AptosTransactionEventGuid = AptosTransactionEventGuid;\nexports.AptosUserTransaction = AptosUserTransaction;\nexports.AptosUserTransactionChangesItem = AptosUserTransactionChangesItem;\nexports.AptosUserTransactionPayload = AptosUserTransactionPayload;\nexports.AptosUserTransactionSignature = AptosUserTransactionSignature;\nexports.AptosWriteModuleData = AptosWriteModuleData;\nexports.AptosWriteOrUpdateModuleChange = AptosWriteOrUpdateModuleChange;\nexports.AptosWriteResourceChange = AptosWriteResourceChange;\nexports.AptosWriteResourceData = AptosWriteResourceData;\nexports.AptosWriteResourceDataData = AptosWriteResourceDataData;\nexports.AptosWriteSetPayload = AptosWriteSetPayload;\nexports.AptosWriteSetPayloadWriteSet = AptosWriteSetPayloadWriteSet;\nexports.AptosWriteTableChangeSetChange = AptosWriteTableChangeSetChange;\nexports.CommonAptosUtils = CommonAptosUtils;\nexports.CommonAptosUtilsConfig = CommonAptosUtilsConfig;\nexports.CommonAptosUtilsConfigSetup = CommonAptosUtilsConfigSetup;\nexports.EncodeSubmissionOperation = EncodeSubmissionOperation;\nexports.EstimateGasPriceOperation = EstimateGasPriceOperation;\nexports.GetAccountModuleOperation = GetAccountModuleOperation;\nexports.GetAccountModulesOperation = GetAccountModulesOperation;\nexports.GetAccountOperation = GetAccountOperation;\nexports.GetAccountResourceOperation = GetAccountResourceOperation;\nexports.GetAccountResourcesOperation = GetAccountResourcesOperation;\nexports.GetAccountTransactionsOperation = GetAccountTransactionsOperation;\nexports.GetBlockByHeightOperation = GetBlockByHeightOperation;\nexports.GetBlockByVersionOperation = GetBlockByVersionOperation;\nexports.GetCoinBalancesByWalletsOperation = GetCoinBalancesByWalletsOperation;\nexports.GetCoinInfoByCoinTypeHashesOperation = GetCoinInfoByCoinTypeHashesOperation;\nexports.GetCoinTransfersByBlockHeightsOperation = GetCoinTransfersByBlockHeightsOperation;\nexports.GetCoinTransfersByCoinTypeOperation = GetCoinTransfersByCoinTypeOperation;\nexports.GetCoinTransfersByOwnerAddressesOperation = GetCoinTransfersByOwnerAddressesOperation;\nexports.GetCoinTransfersByWalletAddressesOperation = GetCoinTransfersByWalletAddressesOperation;\nexports.GetCoinsByCreatorsOperation = GetCoinsByCreatorsOperation;\nexports.GetCoinsByNameRangeOperation = GetCoinsByNameRangeOperation;\nexports.GetCoinsBySymbolRangeOperation = GetCoinsBySymbolRangeOperation;\nexports.GetEventsByCreationNumberOperation = GetEventsByCreationNumberOperation;\nexports.GetEventsByEventHandleOperation = GetEventsByEventHandleOperation;\nexports.GetHistoricalCoinBalancesByWalletsOperation = GetHistoricalCoinBalancesByWalletsOperation;\nexports.GetLatestCoinsOperation = GetLatestCoinsOperation;\nexports.GetNFTByOwnersOperation = GetNFTByOwnersOperation;\nexports.GetNFTCollectionsByCreatorOperation = GetNFTCollectionsByCreatorOperation;\nexports.GetNFTCollectionsByIdsOperation = GetNFTCollectionsByIdsOperation;\nexports.GetNFTCollectionsOperation = GetNFTCollectionsOperation;\nexports.GetNFTOwnersByCollectionOperation = GetNFTOwnersByCollectionOperation;\nexports.GetNFTOwnersByTokensOperation = GetNFTOwnersByTokensOperation;\nexports.GetNFTOwnersOfCollectionOperation = GetNFTOwnersOfCollectionOperation;\nexports.GetNFTTransfersByCollectionOperation = GetNFTTransfersByCollectionOperation;\nexports.GetNFTTransfersByCreatorsOperation = GetNFTTransfersByCreatorsOperation;\nexports.GetNFTTransfersByIdsOperation = GetNFTTransfersByIdsOperation;\nexports.GetNFTTransfersByWalletsOperation = GetNFTTransfersByWalletsOperation;\nexports.GetNFTsByCollectionOperation = GetNFTsByCollectionOperation;\nexports.GetNFTsByCreatorsOperation = GetNFTsByCreatorsOperation;\nexports.GetNFTsByIdsOperation = GetNFTsByIdsOperation;\nexports.GetTopHoldersByCoinOperation = GetTopHoldersByCoinOperation;\nexports.GetTransactionByHashOperation = GetTransactionByHashOperation;\nexports.GetTransactionByVersionOperation = GetTransactionByVersionOperation;\nexports.GetTransactionsOperation = GetTransactionsOperation;\nexports.GetWalletsNFTTransfersOperation = GetWalletsNFTTransfersOperation;\nexports.SimulateTransactionOperation = SimulateTransactionOperation;\nexports.SubmitBatchTransactionsOperation = SubmitBatchTransactionsOperation;\nexports.SubmitTransactionOperation = SubmitTransactionOperation;\nexports.operations = operations;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/common-aptos-utils/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/common-auth-utils/lib/cjs/index.cjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@moralisweb3/common-auth-utils/lib/cjs/index.cjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonAptosUtils = __webpack_require__(/*! @moralisweb3/common-aptos-utils */ \"(ssr)/./node_modules/@moralisweb3/common-aptos-utils/lib/cjs/index.cjs\");\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar commonEvmUtils = __webpack_require__(/*! @moralisweb3/common-evm-utils */ \"(ssr)/./node_modules/@moralisweb3/common-evm-utils/lib/cjs/index.cjs\");\nvar commonSolUtils = __webpack_require__(/*! @moralisweb3/common-sol-utils */ \"(ssr)/./node_modules/@moralisweb3/common-sol-utils/lib/cjs/index.cjs\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nvar verifyChallengeAptosOperation = {\r\n    method: 'POST',\r\n    name: 'verifyChallengeAptos',\r\n    id: 'verifyChallengeAptos',\r\n    groupName: 'aptos',\r\n    urlPathPattern: '/challenge/verify/aptos',\r\n    bodyParamNames: ['message', 'signature'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$a,\r\n    getRequestBody: getRequestBody$9,\r\n    serializeRequest: serializeRequest$a,\r\n    deserializeRequest: deserializeRequest$a,\r\n    deserializeResponse: deserializeResponse$a,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$a() {\r\n    return {};\r\n}\r\nfunction getRequestBody$9(request) {\r\n    return {\r\n        message: request.message,\r\n        signature: request.signature,\r\n    };\r\n}\r\nfunction deserializeResponse$a(_a) {\r\n    var network = _a.network, jsonResponse = __rest(_a, [\"network\"]);\r\n    return __assign(__assign({}, jsonResponse), { network: commonAptosUtils.AptosNetwork.create(network), address: commonAptosUtils.AptosAddress.create(jsonResponse.address), expirationTime: commonCore.maybe(jsonResponse.expirationTime, function (value) { return new Date(value); }), notBefore: commonCore.maybe(jsonResponse.notBefore, function (value) { return new Date(value); }) });\r\n}\r\nfunction serializeRequest$a(request) {\r\n    return {\r\n        message: request.message,\r\n        signature: request.signature,\r\n    };\r\n}\r\nfunction deserializeRequest$a(jsonRequest) {\r\n    return {\r\n        message: jsonRequest.message,\r\n        signature: jsonRequest.signature,\r\n    };\r\n}\n\n/** The back channel challenge containing the id to store on the api and the message to be signed by the user */\r\nvar requestChallengeAptosOperation = {\r\n    method: 'POST',\r\n    name: 'requestChallengeAptos',\r\n    id: 'requestChallengeAptos',\r\n    groupName: 'aptos',\r\n    urlPathPattern: '/challenge/request/aptos',\r\n    bodyParamNames: [\r\n        'domain',\r\n        'network',\r\n        'address',\r\n        'statement',\r\n        'uri',\r\n        'expirationTime',\r\n        'notBefore',\r\n        'resources',\r\n        'timeout',\r\n        'publicKey',\r\n    ],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$9,\r\n    getRequestBody: getRequestBody$8,\r\n    serializeRequest: serializeRequest$9,\r\n    deserializeRequest: deserializeRequest$9,\r\n    deserializeResponse: deserializeResponse$9,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$9() {\r\n    return {};\r\n}\r\nfunction getRequestBody$8(request) {\r\n    return {\r\n        domain: request.domain,\r\n        network: commonAptosUtils.AptosNetwork.create(request.network).toString(),\r\n        address: commonAptosUtils.AptosAddress.create(request.address).toString(),\r\n        publicKey: request.publicKey,\r\n        statement: request.statement,\r\n        uri: request.uri,\r\n        expirationTime: request.expirationTime,\r\n        notBefore: request.notBefore,\r\n        resources: request.resources,\r\n        timeout: request.timeout,\r\n    };\r\n}\r\nfunction deserializeResponse$9(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$9(request, core) {\r\n    return {\r\n        domain: request.domain,\r\n        network: commonAptosUtils.AptosNetworkResolver.resolve(request.network, core),\r\n        address: commonAptosUtils.AptosAddress.create(request.address).toString(),\r\n        publicKey: request.publicKey,\r\n        statement: request.statement,\r\n        uri: request.uri,\r\n        expirationTime: request.expirationTime,\r\n        notBefore: request.notBefore,\r\n        resources: request.resources,\r\n        timeout: request.timeout,\r\n    };\r\n}\r\nfunction deserializeRequest$9(jsonRequest) {\r\n    return {\r\n        domain: jsonRequest.domain,\r\n        network: commonAptosUtils.AptosNetwork.create(jsonRequest.network),\r\n        address: commonAptosUtils.AptosAddress.create(jsonRequest.address),\r\n        publicKey: jsonRequest.publicKey,\r\n        statement: jsonRequest.statement,\r\n        uri: jsonRequest.uri,\r\n        expirationTime: jsonRequest.expirationTime,\r\n        notBefore: jsonRequest.notBefore,\r\n        resources: jsonRequest.resources,\r\n        timeout: jsonRequest.timeout,\r\n    };\r\n}\n\nvar verifyChallengeEvmOperation = {\r\n    method: 'POST',\r\n    name: 'verifyChallengeEvm',\r\n    id: 'verifyChallengeEvm',\r\n    groupName: 'evm',\r\n    urlPathPattern: '/challenge/verify/evm',\r\n    bodyParamNames: ['message', 'signature'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$8,\r\n    getRequestBody: getRequestBody$7,\r\n    serializeRequest: serializeRequest$8,\r\n    deserializeRequest: deserializeRequest$8,\r\n    deserializeResponse: deserializeResponse$8,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$8() {\r\n    return {};\r\n}\r\nfunction getRequestBody$7(request) {\r\n    return {\r\n        message: request.message,\r\n        signature: request.signature,\r\n    };\r\n}\r\nfunction deserializeResponse$8(_a) {\r\n    var chainId = _a.chainId, jsonResponse = __rest(_a, [\"chainId\"]);\r\n    return __assign(__assign({}, jsonResponse), { chain: commonEvmUtils.EvmChain.create(chainId), address: commonEvmUtils.EvmAddress.create(jsonResponse.address), expirationTime: commonCore.maybe(jsonResponse.expirationTime, function (value) { return new Date(value); }), notBefore: commonCore.maybe(jsonResponse.notBefore, function (value) { return new Date(value); }) });\r\n}\r\nfunction serializeRequest$8(request) {\r\n    return {\r\n        message: request.message,\r\n        signature: request.signature,\r\n    };\r\n}\r\nfunction deserializeRequest$8(jsonRequest) {\r\n    return {\r\n        message: jsonRequest.message,\r\n        signature: jsonRequest.signature,\r\n    };\r\n}\n\n/** The back channel challenge containing the id to store on the api and the message to be signed by the user */\r\nvar requestChallengeEvmOperation = {\r\n    method: 'POST',\r\n    name: 'requestChallengeEvm',\r\n    id: 'requestChallengeEvm',\r\n    groupName: 'evm',\r\n    urlPathPattern: '/challenge/request/evm',\r\n    bodyParamNames: [\r\n        'domain',\r\n        'chainId',\r\n        'address',\r\n        'statement',\r\n        'uri',\r\n        'expirationTime',\r\n        'notBefore',\r\n        'resources',\r\n        'timeout',\r\n    ],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$7,\r\n    getRequestBody: getRequestBody$6,\r\n    serializeRequest: serializeRequest$7,\r\n    deserializeRequest: deserializeRequest$7,\r\n    deserializeResponse: deserializeResponse$7,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$7() {\r\n    return {};\r\n}\r\nfunction getRequestBody$6(request, core) {\r\n    return {\r\n        domain: request.domain,\r\n        chainId: commonEvmUtils.EvmChainResolver.resolve(request.chainId, core).hex,\r\n        address: commonEvmUtils.EvmAddress.create(request.address).checksum,\r\n        statement: request.statement,\r\n        uri: request.uri,\r\n        expirationTime: request.expirationTime,\r\n        notBefore: request.notBefore,\r\n        resources: request.resources,\r\n        timeout: request.timeout,\r\n    };\r\n}\r\nfunction deserializeResponse$7(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$7(request, core) {\r\n    return {\r\n        domain: request.domain,\r\n        chainId: commonEvmUtils.EvmChainResolver.resolve(request.chainId, core).decimal.toString(),\r\n        address: commonEvmUtils.EvmAddress.create(request.address).checksum,\r\n        statement: request.statement,\r\n        uri: request.uri,\r\n        expirationTime: request.expirationTime,\r\n        notBefore: request.notBefore,\r\n        resources: request.resources,\r\n        timeout: request.timeout,\r\n    };\r\n}\r\nfunction deserializeRequest$7(jsonRequest, core) {\r\n    return {\r\n        domain: jsonRequest.domain,\r\n        chainId: commonEvmUtils.EvmChainResolver.resolve(jsonRequest.chainId, core),\r\n        address: commonEvmUtils.EvmAddress.create(jsonRequest.address),\r\n        statement: jsonRequest.statement,\r\n        uri: jsonRequest.uri,\r\n        expirationTime: jsonRequest.expirationTime,\r\n        notBefore: jsonRequest.notBefore,\r\n        resources: jsonRequest.resources,\r\n        timeout: jsonRequest.timeout,\r\n    };\r\n}\n\nvar getAddressesOperation = {\r\n    method: 'GET',\r\n    name: 'getAddresses',\r\n    id: 'getAddresses',\r\n    groupName: 'evm',\r\n    urlPathPattern: '/profile/{profileId}/addresses',\r\n    urlPathParamNames: ['profileId'],\r\n    getRequestUrlParams: getRequestUrlParams$6,\r\n    serializeRequest: serializeRequest$6,\r\n    deserializeRequest: deserializeRequest$6,\r\n    deserializeResponse: deserializeResponse$6,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$6(request) {\r\n    return {\r\n        profileId: request.profileId,\r\n    };\r\n}\r\nfunction deserializeResponse$6(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$6(request) {\r\n    return request;\r\n}\r\nfunction deserializeRequest$6(jsonRequest) {\r\n    return jsonRequest;\r\n}\n\nvar removeBindOperation = {\r\n    method: 'POST',\r\n    name: 'removeBind',\r\n    id: 'removeBind',\r\n    groupName: 'evm',\r\n    urlPathPattern: '/bind/remove',\r\n    bodyParamNames: ['blockchainType', 'address', 'profileId', 'publicKey'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$5,\r\n    getRequestBody: getRequestBody$5,\r\n    serializeRequest: serializeRequest$5,\r\n    deserializeRequest: deserializeRequest$5,\r\n    deserializeResponse: deserializeResponse$5,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$5() {\r\n    return {};\r\n}\r\nfunction getRequestBody$5(request) {\r\n    return {\r\n        blockchainType: request.blockchainType,\r\n        address: commonEvmUtils.EvmAddress.create(request.address).checksum,\r\n        profileId: request.profileId,\r\n        publicKey: request.publicKey,\r\n    };\r\n}\r\nfunction deserializeResponse$5(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$5(request) {\r\n    return {\r\n        blockchainType: request.blockchainType,\r\n        address: commonEvmUtils.EvmAddress.create(request.address).checksum,\r\n        profileId: request.profileId,\r\n        publicKey: request.publicKey,\r\n    };\r\n}\r\nfunction deserializeRequest$5(jsonRequest) {\r\n    return {\r\n        blockchainType: jsonRequest.blockchainType,\r\n        address: commonEvmUtils.EvmAddress.create(jsonRequest.address),\r\n        profileId: jsonRequest.profileId,\r\n        publicKey: jsonRequest.publicKey,\r\n    };\r\n}\n\nvar requestBindOperation = {\r\n    method: 'POST',\r\n    name: 'requestBind',\r\n    id: 'requestBind',\r\n    groupName: 'evm',\r\n    urlPathPattern: '/bind/request',\r\n    bodyParamNames: ['addresses'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$4,\r\n    getRequestBody: getRequestBody$4,\r\n    serializeRequest: serializeRequest$4,\r\n    deserializeRequest: deserializeRequest$4,\r\n    deserializeResponse: deserializeResponse$4,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$4() {\r\n    return {};\r\n}\r\nfunction getRequestBody$4(request) {\r\n    return {\r\n        addresses: request.addresses.map(function (address) { return ({\r\n            blockchainType: address.blockchainType,\r\n            address: commonEvmUtils.EvmAddress.create(address.address).checksum,\r\n        }); }),\r\n    };\r\n}\r\nfunction deserializeResponse$4(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$4(request) {\r\n    return {\r\n        addresses: request.addresses.map(function (address) { return ({\r\n            blockchainType: address.blockchainType,\r\n            address: commonEvmUtils.EvmAddress.create(address.address).checksum,\r\n        }); }),\r\n    };\r\n}\r\nfunction deserializeRequest$4(jsonRequest) {\r\n    return {\r\n        addresses: jsonRequest.addresses.map(function (address) { return ({\r\n            blockchainType: address.blockchainType,\r\n            address: commonEvmUtils.EvmAddress.create(address.address),\r\n        }); }),\r\n    };\r\n}\n\nvar verifyRemoveBindOperation = {\r\n    method: 'POST',\r\n    name: 'verifyRemoveBind',\r\n    id: 'verifyRemoveBind',\r\n    groupName: 'evm',\r\n    urlPathPattern: '/bind/remove/verify',\r\n    bodyParamNames: ['message', 'signature'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$3,\r\n    getRequestBody: getRequestBody$3,\r\n    serializeRequest: serializeRequest$3,\r\n    deserializeRequest: deserializeRequest$3,\r\n    deserializeResponse: deserializeResponse$3,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$3() {\r\n    return {};\r\n}\r\nfunction getRequestBody$3(request) {\r\n    return {\r\n        message: request.message,\r\n        signature: request.signature,\r\n    };\r\n}\r\nfunction deserializeResponse$3(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$3(request) {\r\n    return {\r\n        message: request.message,\r\n        signature: request.signature,\r\n    };\r\n}\r\nfunction deserializeRequest$3(jsonRequest) {\r\n    return {\r\n        message: jsonRequest.message,\r\n        signature: jsonRequest.signature,\r\n    };\r\n}\n\nvar verifyRequestBindOperation = {\r\n    method: 'POST',\r\n    name: 'verifyRequestBind',\r\n    id: 'verifyRequestBind',\r\n    groupName: 'evm',\r\n    urlPathPattern: '/bind/request/verify',\r\n    bodyParamNames: ['verifications'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$2,\r\n    getRequestBody: getRequestBody$2,\r\n    serializeRequest: serializeRequest$2,\r\n    deserializeRequest: deserializeRequest$2,\r\n    deserializeResponse: deserializeResponse$2,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$2() {\r\n    return {};\r\n}\r\nfunction getRequestBody$2(request) {\r\n    return {\r\n        verifications: request.verifications,\r\n    };\r\n}\r\nfunction deserializeResponse$2(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$2(request) {\r\n    return {\r\n        verifications: request.verifications,\r\n    };\r\n}\r\nfunction deserializeRequest$2(jsonRequest) {\r\n    return {\r\n        verifications: jsonRequest.verifications,\r\n    };\r\n}\n\nvar verifyChallengeSolanaOperation = {\r\n    method: 'POST',\r\n    name: 'verifyChallengeSolana',\r\n    id: 'verifyChallengeSolana',\r\n    groupName: 'solana',\r\n    urlPathPattern: '/challenge/verify/solana',\r\n    bodyParamNames: ['message', 'signature'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$1,\r\n    getRequestBody: getRequestBody$1,\r\n    serializeRequest: serializeRequest$1,\r\n    deserializeRequest: deserializeRequest$1,\r\n    deserializeResponse: deserializeResponse$1,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$1() {\r\n    return {};\r\n}\r\nfunction getRequestBody$1(request) {\r\n    return {\r\n        message: request.message,\r\n        signature: request.signature,\r\n    };\r\n}\r\nfunction deserializeResponse$1(_a) {\r\n    var network = _a.network, jsonResponse = __rest(_a, [\"network\"]);\r\n    return __assign(__assign({}, jsonResponse), { solNetwork: commonSolUtils.SolNetwork.create(network), address: commonSolUtils.SolAddress.create(jsonResponse.address), expirationTime: commonCore.maybe(jsonResponse.expirationTime, function (value) { return new Date(value); }), notBefore: commonCore.maybe(jsonResponse.notBefore, function (value) { return new Date(value); }) });\r\n}\r\nfunction serializeRequest$1(request) {\r\n    return {\r\n        message: request.message,\r\n        signature: request.signature,\r\n    };\r\n}\r\nfunction deserializeRequest$1(jsonRequest) {\r\n    return {\r\n        message: jsonRequest.message,\r\n        signature: jsonRequest.signature,\r\n    };\r\n}\n\n/** The back channel challenge containing the id to store on the api and the message to be signed by the user */\r\nvar requestChallengeSolanaOperation = {\r\n    method: 'POST',\r\n    name: 'requestChallengeSolana',\r\n    id: 'requestChallengeSolana',\r\n    groupName: 'solana',\r\n    urlPathPattern: '/challenge/request/solana',\r\n    bodyParamNames: [\r\n        'domain',\r\n        'network',\r\n        'address',\r\n        'statement',\r\n        'uri',\r\n        'expirationTime',\r\n        'notBefore',\r\n        'resources',\r\n        'timeout',\r\n    ],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams,\r\n    getRequestBody: getRequestBody,\r\n    serializeRequest: serializeRequest,\r\n    deserializeRequest: deserializeRequest,\r\n    deserializeResponse: deserializeResponse,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams() {\r\n    return {};\r\n}\r\nfunction getRequestBody(request) {\r\n    return {\r\n        domain: request.domain,\r\n        network: commonSolUtils.SolNetwork.create(request.network).network,\r\n        address: commonSolUtils.SolAddress.create(request.address).address,\r\n        statement: request.statement,\r\n        uri: request.uri,\r\n        expirationTime: request.expirationTime,\r\n        notBefore: request.notBefore,\r\n        resources: request.resources,\r\n        timeout: request.timeout,\r\n    };\r\n}\r\nfunction deserializeResponse(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest(request) {\r\n    return {\r\n        domain: request.domain,\r\n        network: commonSolUtils.SolNetwork.create(request.network).network,\r\n        address: commonSolUtils.SolAddress.create(request.address).address,\r\n        statement: request.statement,\r\n        uri: request.uri,\r\n        expirationTime: request.expirationTime,\r\n        notBefore: request.notBefore,\r\n        resources: request.resources,\r\n        timeout: request.timeout,\r\n    };\r\n}\r\nfunction deserializeRequest(jsonRequest) {\r\n    return {\r\n        domain: jsonRequest.domain,\r\n        network: commonSolUtils.SolNetwork.create(jsonRequest.network),\r\n        address: commonSolUtils.SolAddress.create(jsonRequest.address),\r\n        statement: jsonRequest.statement,\r\n        uri: jsonRequest.uri,\r\n        expirationTime: jsonRequest.expirationTime,\r\n        notBefore: jsonRequest.notBefore,\r\n        resources: jsonRequest.resources,\r\n        timeout: jsonRequest.timeout,\r\n    };\r\n}\n\nvar operations = [\r\n    requestChallengeSolanaOperation,\r\n    requestChallengeEvmOperation,\r\n    requestChallengeAptosOperation,\r\n    verifyChallengeSolanaOperation,\r\n    verifyChallengeEvmOperation,\r\n    verifyChallengeAptosOperation,\r\n    getAddressesOperation,\r\n    removeBindOperation,\r\n    requestBindOperation,\r\n    verifyRemoveBindOperation,\r\n    verifyRequestBindOperation,\r\n];\n\nexports.getAddressesOperation = getAddressesOperation;\nexports.operations = operations;\nexports.removeBindOperation = removeBindOperation;\nexports.requestBindOperation = requestBindOperation;\nexports.requestChallengeAptosOperation = requestChallengeAptosOperation;\nexports.requestChallengeEvmOperation = requestChallengeEvmOperation;\nexports.requestChallengeSolanaOperation = requestChallengeSolanaOperation;\nexports.verifyChallengeAptosOperation = verifyChallengeAptosOperation;\nexports.verifyChallengeEvmOperation = verifyChallengeEvmOperation;\nexports.verifyChallengeSolanaOperation = verifyChallengeSolanaOperation;\nexports.verifyRemoveBindOperation = verifyRemoveBindOperation;\nexports.verifyRequestBindOperation = verifyRequestBindOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/common-auth-utils/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar axios = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }\n\nvar axios__default = /*#__PURE__*/_interopDefault(axios);\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nexports.ModuleType = void 0;\r\n(function (ModuleType) {\r\n    ModuleType[\"API\"] = \"api\";\r\n    ModuleType[\"DEFAULT\"] = \"default\";\r\n})(exports.ModuleType || (exports.ModuleType = {}));\n\n/**\r\n * Verify if the provided class is a api type.\r\n * Should be used as a Typescript type-guard\r\n *\r\n * @example\r\n * ```\r\n * if(isApiModule(module)){\r\n *  // module is types as ApiModule here\r\n * }\r\n * ```\r\n */\r\nvar isApiModule = function (moralisClass) {\r\n    if (moralisClass.type === exports.ModuleType.API) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\n\nexports.CoreErrorCode = void 0;\r\n(function (CoreErrorCode) {\r\n    // Generic Core error\r\n    CoreErrorCode[\"GENERIC_CORE_ERROR\"] = \"C0001\";\r\n    // A module wants to register with a name that already is registered\r\n    CoreErrorCode[\"DUPLICATE_MODULE\"] = \"C0002\";\r\n    // The module is not registered\r\n    CoreErrorCode[\"MODULE_NOT_FOUND\"] = \"C0003\";\r\n    // Error in validation check\r\n    CoreErrorCode[\"VALIDATION_ERROR\"] = \"C0004\";\r\n    CoreErrorCode[\"INVALID_ARGUMENT\"] = \"C0005\";\r\n    CoreErrorCode[\"REQUEST_ERROR\"] = \"C0006\";\r\n    CoreErrorCode[\"NO_DATA_FOUND\"] = \"C0007\";\r\n    CoreErrorCode[\"NOT_INITIALIZED\"] = \"C0008\";\r\n    CoreErrorCode[\"ALREADY_INITIALIZED\"] = \"C0009\";\r\n    CoreErrorCode[\"METHOD_FAILED\"] = \"C0010\";\r\n    CoreErrorCode[\"STATE_MACHINE_STARTED\"] = \"C0011\";\r\n    CoreErrorCode[\"STATE_MACHINE_NOT_STARTED\"] = \"C0012\";\r\n    CoreErrorCode[\"CONFIG_KEY_NOT_EXIST\"] = \"C0013\";\r\n    CoreErrorCode[\"CONFIG_INVALID_VALUE\"] = \"C0014\";\r\n    CoreErrorCode[\"CONFIG_KEY_ALREADY_EXIST\"] = \"C0015\";\r\n    CoreErrorCode[\"INVALID_DATA\"] = \"C0016\";\r\n    CoreErrorCode[\"BIG_NUMBER_ERROR\"] = \"C0500\";\r\n    CoreErrorCode[\"NOT_IMPLEMENTED\"] = \"C9000\";\r\n})(exports.CoreErrorCode || (exports.CoreErrorCode = {}));\r\nexports.ApiErrorCode = void 0;\r\n(function (ApiErrorCode) {\r\n    ApiErrorCode[\"GENERIC_API_ERROR\"] = \"A0001\";\r\n    ApiErrorCode[\"PAGE_LIMIT_EXCEEDED\"] = \"A0002\";\r\n    ApiErrorCode[\"API_KEY_NOT_SET\"] = \"A0003\";\r\n    ApiErrorCode[\"INVALID_PARAMS\"] = \"A0004\";\r\n    ApiErrorCode[\"NOT_FOUND\"] = \"A0404\";\r\n    ApiErrorCode[\"NOT_IMPLEMENTED\"] = \"A9000\";\r\n})(exports.ApiErrorCode || (exports.ApiErrorCode = {}));\r\nexports.AuthErrorCode = void 0;\r\n(function (AuthErrorCode) {\r\n    AuthErrorCode[\"GENERIC_AUTH_ERROR\"] = \"U0001\";\r\n    AuthErrorCode[\"INCORRECT_NETWORK\"] = \"U0002\";\r\n    AuthErrorCode[\"INCORRECT_PARAMETER\"] = \"U0003\";\r\n    AuthErrorCode[\"NOT_IMPLEMENTED\"] = \"U9000\";\r\n})(exports.AuthErrorCode || (exports.AuthErrorCode = {}));\r\nexports.StreamErrorCode = void 0;\r\n(function (StreamErrorCode) {\r\n    StreamErrorCode[\"GENERIC_STREAM_ERROR\"] = \"S0001\";\r\n    StreamErrorCode[\"INCORRECT_NETWORK\"] = \"S0002\";\r\n    StreamErrorCode[\"INCORRECT_PARAMETER\"] = \"S0003\";\r\n    StreamErrorCode[\"INVALID_SIGNATURE\"] = \"S0004\";\r\n    StreamErrorCode[\"NOT_IMPLEMENTED\"] = \"S9000\";\r\n})(exports.StreamErrorCode || (exports.StreamErrorCode = {}));\n\nvar MoralisError = /** @class */ (function (_super) {\r\n    __extends(MoralisError, _super);\r\n    function MoralisError(_a) {\r\n        var message = _a.message, code = _a.code, details = _a.details, cause = _a.cause;\r\n        var _this = \r\n        // @ts-ignore Typescript does not recognise 'cause' ? OR we have wrong TS version\r\n        _super.call(this, MoralisError.makeMessage(message, code), { cause: cause }) || this;\r\n        _this.name = 'Moralis SDK Error';\r\n        _this.isMoralisError = true;\r\n        // Set prototype manually, as required since Typescript 2.2: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example\r\n        Object.setPrototypeOf(_this, MoralisError.prototype);\r\n        _this.code = code;\r\n        _this.details = details;\r\n        if (cause) {\r\n            _this.cause = cause;\r\n            if ('stack' in cause) {\r\n                _this.stack = \"\".concat(_this.stack, \"\\nCAUSE: \").concat(cause.stack);\r\n            }\r\n        }\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(_this, MoralisError);\r\n        }\r\n        return _this;\r\n    }\r\n    MoralisError.makeMessage = function (message, code) { return \"[\".concat(code, \"] \").concat(message); };\r\n    return MoralisError;\r\n}(Error));\r\nvar CoreError = /** @class */ (function (_super) {\r\n    __extends(CoreError, _super);\r\n    function CoreError(options) {\r\n        var _this = _super.call(this, options) || this;\r\n        _this.name = 'Moralis SDK Core Error';\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(_this, CoreError);\r\n        }\r\n        return _this;\r\n    }\r\n    return CoreError;\r\n}(MoralisError));\r\nvar MoralisApiError = /** @class */ (function (_super) {\r\n    __extends(MoralisApiError, _super);\r\n    function MoralisApiError(options) {\r\n        var _this = _super.call(this, options) || this;\r\n        _this.name = 'Moralis SDK API Error';\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(_this, MoralisApiError);\r\n        }\r\n        return _this;\r\n    }\r\n    return MoralisApiError;\r\n}(MoralisError));\r\nvar MoralisAuthError = /** @class */ (function (_super) {\r\n    __extends(MoralisAuthError, _super);\r\n    function MoralisAuthError(options) {\r\n        var _this = _super.call(this, options) || this;\r\n        _this.name = 'Moralis Auth Error';\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(_this, MoralisAuthError);\r\n        }\r\n        return _this;\r\n    }\r\n    return MoralisAuthError;\r\n}(MoralisError));\r\nvar MoralisStreamError = /** @class */ (function (_super) {\r\n    __extends(MoralisStreamError, _super);\r\n    function MoralisStreamError(options) {\r\n        var _this = _super.call(this, options) || this;\r\n        _this.name = 'Moralis Stream Error';\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(_this, MoralisStreamError);\r\n        }\r\n        return _this;\r\n    }\r\n    return MoralisStreamError;\r\n}(MoralisError));\n\nvar isMoralisError = function (error) {\r\n    if (!(error instanceof Error)) {\r\n        return false;\r\n    }\r\n    if (!error.isMoralisError) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\n\n/**\r\n * MoralisModues handles all registered modules.\r\n * Any package that is used in Moralis, should register itself via this class.\r\n * This allows cross-communication between modules and easy management of the modules\r\n *\r\n * This class is responsible for:\r\n * - registering new modules\r\n * - removing modules (in theory possible for exotic usecases, but might break the app if done after initialisation)\r\n * - getting individual modules by name, type or everything\r\n */\r\nvar Modules = /** @class */ (function () {\r\n    function Modules() {\r\n        this.modules = new Map();\r\n    }\r\n    /**\r\n     * Register and setup a new module by providing a module that is extended from BaseClass.\r\n     * This will throw an error if the name is not unique\r\n     * @param module the module that needs to be registered\r\n     */\r\n    Modules.prototype.register = function (module) {\r\n        if (this.modules.has(module.name)) {\r\n            throw new CoreError({\r\n                code: exports.CoreErrorCode.DUPLICATE_MODULE,\r\n                message: \"The module \\\"\".concat(module.name, \"\\\" has already been registered.\"),\r\n            });\r\n        }\r\n        this.modules.set(module.name, module);\r\n        module.setup();\r\n    };\r\n    /**\r\n     * Returns the module with the given name.\r\n     * This module should have been registered with `register`\r\n     * @param name the module name\r\n     * @returns a valid BaseModule\r\n     * @throws a CoreError if no module with the given name has been registered\r\n     */\r\n    Modules.prototype.get = function (name) {\r\n        var module = this.modules.get(name);\r\n        if (!module) {\r\n            throw new CoreError({ code: exports.CoreErrorCode.MODULE_NOT_FOUND, message: \"Module \\\"\".concat(name, \"\\\" does not exist.\") });\r\n        }\r\n        return module;\r\n    };\r\n    /**\r\n     * Tries to return the module with the given name if exist. Otherwise returns null.\r\n     * @param name the module name\r\n     * @returns a valid BaseModule or null\r\n     */\r\n    Modules.prototype.tryGet = function (name) {\r\n        return this.modules.get(name) || null;\r\n    };\r\n    Modules.prototype.has = function (name) {\r\n        return this.modules.has(name);\r\n    };\r\n    /**\r\n     * Returns the network module with the provided name.\r\n     * @param name the module name\r\n     * @returns a valid ApiModule\r\n     * @throws a CoreError if no network module with the given name has been registered\r\n     */\r\n    Modules.prototype.getApi = function (name) {\r\n        var module = this.modules.get(name);\r\n        if (!module || !isApiModule(module)) {\r\n            throw new CoreError({\r\n                code: exports.CoreErrorCode.MODULE_NOT_FOUND,\r\n                message: \"No ApiModule found with the name \\\"\".concat(name, \"\\\"\"),\r\n            });\r\n        }\r\n        return module;\r\n    };\r\n    /**\r\n     * Remove the module with the provided name, if it has been registered,\r\n     * @param name the module name\r\n     * @throws a CoreError if the module cannot be found.\r\n     */\r\n    Modules.prototype.remove = function (name) {\r\n        var isRemoved = this.modules.delete(name);\r\n        if (!isRemoved) {\r\n            throw new CoreError({ code: exports.CoreErrorCode.MODULE_NOT_FOUND, message: \"Module \\\"\".concat(name, \"\\\" does not exist.\") });\r\n        }\r\n    };\r\n    /**\r\n     * List all the registered modules\r\n     * @returns an array of BaseModule that have been registered\r\n     */\r\n    Modules.prototype.list = function () {\r\n        return Array.from(this.modules.values());\r\n    };\r\n    /**\r\n     * Returns the names of all registered modules\r\n     */\r\n    Modules.prototype.listNames = function () {\r\n        return this.list().map(function (module) { return module.name; });\r\n    };\r\n    /**\r\n     * List all the registered api modules (eg. modules with the type CoreModuleType.API)\r\n     */\r\n    Modules.prototype.listApis = function () {\r\n        return this.list().filter(isApiModule);\r\n    };\r\n    return Modules;\r\n}());\n\nvar CoreConfig = {\r\n    logLevel: {\r\n        name: 'logLevel',\r\n        defaultValue: 'info',\r\n    },\r\n    buidEnvironment: {\r\n        name: 'buidEnvironment',\r\n        defaultValue: 'browser',\r\n    },\r\n    defaultNetwork: {\r\n        name: 'defaultNetwork',\r\n        defaultValue: 'Evm',\r\n    },\r\n    product: {\r\n        name: 'product',\r\n        defaultValue: undefined,\r\n    },\r\n    /**\r\n     * @description Maximal number of request retries.\r\n     */\r\n    maxRetries: {\r\n        name: 'maxRetries',\r\n        defaultValue: 2,\r\n    },\r\n};\n\n/* eslint-disable no-console */\r\nvar logLevelMap = {\r\n    verbose: 5,\r\n    debug: 4,\r\n    info: 3,\r\n    warning: 2,\r\n    error: 1,\r\n    off: 0,\r\n};\r\n/**\r\n * LoggerController, responsible to create log messages for each module.\r\n * It should be created with the name of the module like `new Logger('module-name')`\r\n * It will then prefix any logs with that module-name for easy debugging\r\n * It will show only logs up to the specified `logLevel` in the MoralisConfig\r\n */\r\nvar LoggerController = /** @class */ (function () {\r\n    function LoggerController(moduleName, config) {\r\n        this.moduleName = moduleName;\r\n        this.config = config;\r\n    }\r\n    LoggerController.create = function (moduleName, core) {\r\n        return new LoggerController(moduleName, core.config);\r\n    };\r\n    Object.defineProperty(LoggerController.prototype, \"level\", {\r\n        get: function () {\r\n            return this.config.get(CoreConfig.logLevel);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    LoggerController.prototype._transport = function (level, message, details) {\r\n        var logMessage = this._makeLogMessage(message);\r\n        var args = [logMessage, details].filter(function (arg) { return arg != null; });\r\n        switch (level) {\r\n            case 'error':\r\n                console.error.apply(console, args);\r\n                break;\r\n            case 'warn':\r\n                console.warn.apply(console, args);\r\n                break;\r\n            case 'log':\r\n                console.log.apply(console, args);\r\n                break;\r\n        }\r\n    };\r\n    LoggerController.prototype._shouldLog = function (logLevel) {\r\n        var level = logLevelMap[logLevel];\r\n        var acceptedLevel = logLevelMap[this.level];\r\n        if (level > acceptedLevel) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    LoggerController.prototype._makeLogMessage = function (message) {\r\n        return \"Moralis[\".concat(this.moduleName, \"]: \").concat(message);\r\n    };\r\n    LoggerController.prototype.error = function (error, details) {\r\n        if (!this._shouldLog('error')) {\r\n            return;\r\n        }\r\n        var message = '';\r\n        if (typeof error === 'string') {\r\n            message = error;\r\n        }\r\n        else if (isMoralisError(error)) {\r\n            message = error.message;\r\n            if (error.details) {\r\n                if (details) {\r\n                    details._errorDetails = error.details;\r\n                }\r\n                else {\r\n                    details = {\r\n                        _errorDetails: error.details,\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            message = error.message;\r\n        }\r\n        this._transport('error', message, details);\r\n    };\r\n    LoggerController.prototype.warn = function (message, details) {\r\n        if (!this._shouldLog('warning')) {\r\n            return;\r\n        }\r\n        this._transport('warn', message, details);\r\n    };\r\n    LoggerController.prototype.info = function (message, details) {\r\n        if (!this._shouldLog('info')) {\r\n            return;\r\n        }\r\n        this._transport('log', message, details);\r\n    };\r\n    LoggerController.prototype.debug = function (message, details) {\r\n        if (!this._shouldLog('debug')) {\r\n            return;\r\n        }\r\n        this._transport('log', message, details);\r\n    };\r\n    LoggerController.prototype.verbose = function (message, details) {\r\n        if (!this._shouldLog('verbose')) {\r\n            return;\r\n        }\r\n        this._transport('log', message, details);\r\n    };\r\n    return LoggerController;\r\n}());\n\nvar Config = /** @class */ (function () {\r\n    function Config() {\r\n        this.items = new Map();\r\n    }\r\n    Config.prototype.registerKey = function (key, validator) {\r\n        if (this.items.has(key.name)) {\r\n            throw new CoreError({\r\n                code: exports.CoreErrorCode.CONFIG_KEY_ALREADY_EXIST,\r\n                message: \"Key \\\"\".concat(key.name, \"\\\" is already registered\"),\r\n            });\r\n        }\r\n        this.items.set(key.name, { key: key, value: key.defaultValue, validator: validator });\r\n    };\r\n    Config.prototype.getKeys = function () {\r\n        return Array.from(this.items.keys());\r\n    };\r\n    Config.prototype.hasKey = function (key) {\r\n        return this.items.has(key.name);\r\n    };\r\n    Config.prototype.get = function (keyOrName) {\r\n        return this.getItem(keyOrName).value;\r\n    };\r\n    Config.prototype.set = function (keyOrName, value) {\r\n        var item = this.getItem(keyOrName);\r\n        var error = item.validator ? item.validator(value) : null;\r\n        if (error) {\r\n            throw new CoreError({\r\n                code: exports.CoreErrorCode.CONFIG_INVALID_VALUE,\r\n                message: \"Cannot set this config. Invalid value for \\\"\".concat(item.key.name, \"\\\". \").concat(error),\r\n            });\r\n        }\r\n        item.value = value;\r\n    };\r\n    Config.prototype.merge = function (values) {\r\n        var _this = this;\r\n        Object.keys(values).forEach(function (keyName) {\r\n            _this.set(keyName, values[keyName]);\r\n        });\r\n    };\r\n    Config.prototype.reset = function () {\r\n        this.items.forEach(function (item) {\r\n            item.value = item.key.defaultValue;\r\n        });\r\n    };\r\n    Config.prototype.getItem = function (keyOrName) {\r\n        var keyName = typeof keyOrName === 'string' ? keyOrName : keyOrName.name;\r\n        var item = this.items.get(keyName);\r\n        if (!item) {\r\n            // This error occurs when a user tries to set a value for a specific key, but the key is not registered.\r\n            // That situation may occur, when a moralis module is not registered (all keys are registered in the module setup step).\r\n            // If you have this error, you should fix your code. Firstly, you should register all modules, later you can modify the configuration.\r\n            throw new CoreError({\r\n                code: exports.CoreErrorCode.CONFIG_KEY_NOT_EXIST,\r\n                message: \"Key \\\"\".concat(keyName, \"\\\" is unregistered. Have you registered all required modules?\"),\r\n            });\r\n        }\r\n        return item;\r\n    };\r\n    return Config;\r\n}());\n\nvar CoreConfigSetup = /** @class */ (function () {\r\n    function CoreConfigSetup() {\r\n    }\r\n    CoreConfigSetup.register = function (config) {\r\n        config.registerKey(CoreConfig.logLevel);\r\n        config.registerKey(CoreConfig.buidEnvironment);\r\n        config.registerKey(CoreConfig.defaultNetwork);\r\n        config.registerKey(CoreConfig.product);\r\n        config.registerKey(CoreConfig.maxRetries);\r\n    };\r\n    return CoreConfigSetup;\r\n}());\n\nvar LIB_VERSION = \"2.23.2\";\n\n/**\r\n * The MoralisData class represents the value of a native currency (like ETH, SOL, BNB etc.)\r\n *\r\n * @internal\r\n * @category DataType\r\n */\r\nvar MoralisData = /** @class */ (function () {\r\n    function MoralisData() {\r\n    }\r\n    return MoralisData;\r\n}());\n\nvar MoralisDataObject = /** @class */ (function (_super) {\r\n    __extends(MoralisDataObject, _super);\r\n    function MoralisDataObject() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return MoralisDataObject;\r\n}(MoralisData));\n\nvar BigNumberFormatter = /** @class */ (function () {\r\n    function BigNumberFormatter() {\r\n    }\r\n    BigNumberFormatter.toDecimal = function (value, decimals) {\r\n        if (decimals < 0) {\r\n            throw new CoreError({\r\n                code: exports.CoreErrorCode.BIG_NUMBER_ERROR,\r\n                message: 'Invalid decimals',\r\n            });\r\n        }\r\n        var result = value.toString();\r\n        if (decimals === 0) {\r\n            return result;\r\n        }\r\n        var isNegative = result.startsWith('-');\r\n        if (isNegative) {\r\n            result = result.substring(1);\r\n        }\r\n        result = result.padStart(decimals, '0');\r\n        var dot = result.length - decimals;\r\n        var whole = dot === 0 ? '0' : result.substring(0, dot);\r\n        var fraction = result.substring(dot);\r\n        result = \"\".concat(whole, \".\").concat(fraction);\r\n        while (result[result.length - 1] === '0' && result[result.length - 2] !== '.') {\r\n            result = result.substring(0, result.length - 1);\r\n        }\r\n        if (isNegative) {\r\n            result = \"-\".concat(result);\r\n        }\r\n        return result;\r\n    };\r\n    BigNumberFormatter.toHex = function (value) {\r\n        var result = value.toString(16);\r\n        var isNegative = result.startsWith('-');\r\n        if (isNegative) {\r\n            result = result.substring(1);\r\n        }\r\n        if (result.length % 2 !== 0) {\r\n            result = \"0\".concat(result);\r\n        }\r\n        result = \"0x\".concat(result);\r\n        if (isNegative) {\r\n            result = \"-\".concat(result);\r\n        }\r\n        return result;\r\n    };\r\n    return BigNumberFormatter;\r\n}());\n\nvar BigNumberParser = /** @class */ (function () {\r\n    function BigNumberParser() {\r\n    }\r\n    BigNumberParser.parseInt = function (value) {\r\n        assertNotEmpty(value);\r\n        if (typeof value === 'string') {\r\n            if (value.length === 0) {\r\n                throw createError('Value is empty');\r\n            }\r\n            var isNegativeHex = value.startsWith('-0x');\r\n            if (isNegativeHex) {\r\n                value = value.substring(1);\r\n            }\r\n            var result = BigInt(value);\r\n            if (isNegativeHex) {\r\n                result *= BigInt(-1);\r\n            }\r\n            return result;\r\n        }\r\n        return BigInt(value);\r\n    };\r\n    // TODO: refactor to reduce complexity\r\n    // eslint-disable-next-line complexity\r\n    BigNumberParser.parseDecimal = function (value, decimals) {\r\n        assertNotEmpty(value);\r\n        var multiplier = getMultiplier(decimals);\r\n        if (typeof value === 'number') {\r\n            return BigInt(value) * multiplier;\r\n        }\r\n        if (typeof value === 'bigint') {\r\n            return value * multiplier;\r\n        }\r\n        var isNegative = value.startsWith('-');\r\n        if (isNegative) {\r\n            value = value.substring(1);\r\n        }\r\n        var fragments = value.split('.');\r\n        if (fragments.length > 2) {\r\n            throw createError('Value has more than one dot');\r\n        }\r\n        if (fragments.some(function (fragment) { return !fragment; })) {\r\n            throw createError('Value has empty fragments');\r\n        }\r\n        var result;\r\n        if (fragments.length === 1) {\r\n            result = BigInt(fragments[0]) * multiplier;\r\n        }\r\n        else {\r\n            var whole = fragments[0];\r\n            var fraction = fragments[1];\r\n            if (fraction.length > decimals) {\r\n                throw createError(\"Value has too long fractional part: \".concat(fraction.length, \", max: \").concat(decimals));\r\n            }\r\n            if (fraction.length < decimals) {\r\n                fraction = fraction.padEnd(decimals, '0');\r\n            }\r\n            result = BigInt(whole) * multiplier + BigInt(fraction);\r\n        }\r\n        if (isNegative) {\r\n            result *= BigInt(-1);\r\n        }\r\n        return result;\r\n    };\r\n    return BigNumberParser;\r\n}());\r\nfunction assertNotEmpty(value) {\r\n    if (value === null) {\r\n        throw createError('Value is null');\r\n    }\r\n    if (value === undefined) {\r\n        throw createError('Value is undefined');\r\n    }\r\n}\r\nfunction getMultiplier(decimals) {\r\n    if (decimals < 0) {\r\n        throw createError('Invalid decimals');\r\n    }\r\n    // decimals = 0, multiplier = 1\r\n    // decimals = 1, multiplier = 10\r\n    // decimals = 2, multiplier = 100\r\n    // ...\r\n    var ten = BigInt(10);\r\n    var multiplier = BigInt(1);\r\n    while (decimals-- > 0) {\r\n        multiplier *= ten;\r\n    }\r\n    return multiplier;\r\n}\r\nfunction createError(message) {\r\n    return new CoreError({\r\n        code: exports.CoreErrorCode.BIG_NUMBER_ERROR,\r\n        message: message,\r\n    });\r\n}\n\n/**\r\n * The BigNumber class is a MoralisData that references to a the value of a BigNumber\r\n *\r\n * @category DataType\r\n */\r\nvar BigNumber = /** @class */ (function () {\r\n    function BigNumber(value) {\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Create a new instance of BigNumber from any valid address input.\r\n     *\r\n     * @param value - the BigNumberish type\r\n     * @example BigNumber.create(12);\r\n     * @example BigNumber.create(\"20\");\r\n     * @returns a new BigNumber instance\r\n     */\r\n    BigNumber.create = function (value) {\r\n        if (value instanceof BigNumber) {\r\n            return value;\r\n        }\r\n        return new BigNumber(BigNumberParser.parseInt(value));\r\n    };\r\n    BigNumber.fromJSON = function (json) {\r\n        return BigNumber.create(json);\r\n    };\r\n    /**\r\n     * Creates a new BigNumber from given decimals.\r\n     * @param value\r\n     * @param decimals - This is optional and defaults to 0\r\n     * @example BigNumber.fromDecimal(\"1.23456789\", 18);\r\n     */\r\n    BigNumber.fromDecimal = function (value, decimals) {\r\n        if (decimals === void 0) { decimals = 0; }\r\n        return new BigNumber(BigNumberParser.parseDecimal(value, decimals));\r\n    };\r\n    /**\r\n     * @returns the value of this BigNumber as a BigInt\r\n     * @example BigNumber.create(12).toBigInt();\r\n     */\r\n    BigNumber.prototype.toBigInt = function () {\r\n        return this.value;\r\n    };\r\n    /**\r\n     * Adds a BigNumber to current BigNumber instance.\r\n     * @param value - the BigNumberish to add\r\n     * @returns the result of the addition\r\n     * @example BigNumber.create(12).add(7);\r\n     * @example BigNumber.create(12).add(\"1000000000000000000\");\r\n     */\r\n    BigNumber.prototype.add = function (value) {\r\n        return new BigNumber(this.value + asBigInt(value));\r\n    };\r\n    /**\r\n     * Subtracts a BigNumber from current BigNumber instance.\r\n     * @param value - the BigNumberish to subtract\r\n     * @returns the result of the subtraction\r\n     * @example BigNumber.create(12).sub(7);\r\n     * @example BigNumber.create(\"1000000000000000000\").sub(20);\r\n     */\r\n    BigNumber.prototype.sub = function (value) {\r\n        return new BigNumber(this.value - asBigInt(value));\r\n    };\r\n    /**\r\n     * Multiplies a BigNumber with current BigNumber instance.\r\n     * @param value - the BigNumberish to multiply\r\n     * @returns the result of the multiplication\r\n     * @example BigNumber.create(12).mul(7);\r\n     * @example BigNumber.create(12).mul(\"1000000000000000000\");\r\n     */\r\n    BigNumber.prototype.mul = function (value) {\r\n        return new BigNumber(this.value * asBigInt(value));\r\n    };\r\n    /**\r\n     * Divides a BigNumber with current BigNumber instance.\r\n     * @param value - the BigNumberish to divide\r\n     * @returns the result of the division\r\n     * @example BigNumber.create(12).div(7);\r\n     * @example BigNumber.create(1).div(\"1000000000000000000\");\r\n     */\r\n    BigNumber.prototype.div = function (value) {\r\n        return new BigNumber(this.value / asBigInt(value));\r\n    };\r\n    /**\r\n     * Checks the equality of the current BigNumber with another BigNumber.\r\n     * @param value - the BigNumberish to compare\r\n     * @returns true if the BigNumbers are equal\r\n     * @example BigNumber.create(12).equals(BigNumber.create(12)); // true\r\n     */\r\n    BigNumber.prototype.equals = function (value) {\r\n        return this.value === value.toBigInt();\r\n    };\r\n    /**\r\n     * Converts BigNumber instance to value in given decimals.\r\n     * @param decimals - The decimals to convert to\r\n     * @example BigNumber.create(12).toDecimal(18);\r\n     */\r\n    BigNumber.prototype.toDecimal = function (decimals) {\r\n        return BigNumberFormatter.toDecimal(this.value, decimals);\r\n    };\r\n    /**\r\n     * Converts BigNumber instance to string.\r\n     * @example BigNumber.create(12).toString();\r\n     */\r\n    BigNumber.prototype.toString = function () {\r\n        return this.value.toString();\r\n    };\r\n    /**\r\n     * Converts BigNumber instance to hex string.\r\n     * @example BigNumber.create(12).toHex();\r\n     */\r\n    BigNumber.prototype.toHex = function () {\r\n        return BigNumberFormatter.toHex(this.value);\r\n    };\r\n    /**\r\n     * Converts BigNumber instance to hex string.\r\n     * @example BigNumber.create(12).toJSON();\r\n     */\r\n    BigNumber.prototype.toJSON = function () {\r\n        return this.toHex();\r\n    };\r\n    return BigNumber;\r\n}());\r\nfunction asBigInt(value) {\r\n    return BigNumber.create(value).toBigInt();\r\n}\n\nvar dateInputToDate = function (value) { return (typeof value === 'string' ? new Date(value) : value); };\n\n/**\r\n * Core is used in all Moralis applications\r\n * This class is **required** to be implemented in every app\r\n *\r\n * This class is responsible for:\r\n * - registering, removing and accessing modules\r\n * - accessing and changing the config\r\n */\r\nvar Core = /** @class */ (function () {\r\n    function Core(modules, config, logger) {\r\n        var _this = this;\r\n        this.modules = modules;\r\n        this.config = config;\r\n        this.logger = logger;\r\n        this.name = Core.moduleName;\r\n        this._isStarted = false;\r\n        /**\r\n         * Register all specified modules and configurations\r\n         * @params array of all modules (any module that is extended from BaseModule) that you want to include\r\n         */\r\n        this.registerModules = function (modules) {\r\n            modules.forEach(_this.registerModule);\r\n        };\r\n        /**\r\n         * Register a new module\r\n         */\r\n        this.registerModule = function (module) {\r\n            if ('create' in module) {\r\n                module = module.create(_this);\r\n            }\r\n            _this.modules.register(module);\r\n            _this.logger.verbose('Module registered', { module: module.name });\r\n        };\r\n        this.getModule = function (name) {\r\n            return _this.modules.get(name);\r\n        };\r\n        /**\r\n         * Start all modules, this function should be called before any interaction with a module,\r\n         * as it is responsible for initialising the modules.\r\n         *\r\n         * This will call `start()` on every registered module\r\n         */\r\n        this.start = function (providedConfig) { return __awaiter(_this, void 0, void 0, function () {\r\n            var allModules;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (this._isStarted) {\r\n                            throw new MoralisError({\r\n                                message: 'Modules are started already. This method should be called only one time.',\r\n                                code: exports.CoreErrorCode.ALREADY_INITIALIZED,\r\n                            });\r\n                        }\r\n                        this._isStarted = true;\r\n                        allModules = this.modules.list();\r\n                        if (providedConfig) {\r\n                            this.config.merge(providedConfig);\r\n                        }\r\n                        this.logger.verbose('Starting all registered modules', {\r\n                            moduleNames: this.modules.listNames(),\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(allModules.map(function (module) { return module.start(); }))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.logger.verbose('Finished starting all registered modules', {\r\n                            moduleNames: this.modules.listNames(),\r\n                        });\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); };\r\n    }\r\n    Core.create = function () {\r\n        var modules = new Modules();\r\n        var config = new Config();\r\n        var logger = new LoggerController(Core.moduleName, config);\r\n        var core = new Core(modules, config, logger);\r\n        CoreConfigSetup.register(config);\r\n        return core;\r\n    };\r\n    Object.defineProperty(Core.prototype, \"isStarted\", {\r\n        get: function () {\r\n            return this._isStarted;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Core.prototype, \"BigNumber\", {\r\n        get: function () {\r\n            return BigNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Core.moduleName = 'core';\r\n    Core.libVersion = LIB_VERSION;\r\n    return Core;\r\n}());\n\nvar CoreProvider = /** @class */ (function () {\r\n    function CoreProvider() {\r\n    }\r\n    CoreProvider.getDefault = function () {\r\n        if (!this.core) {\r\n            throw new CoreError({\r\n                code: exports.CoreErrorCode.NOT_INITIALIZED,\r\n                message: 'Default instance of Core is not set',\r\n            });\r\n        }\r\n        return this.core;\r\n    };\r\n    CoreProvider.setDefault = function (core) {\r\n        if (this.core) {\r\n            throw new CoreError({\r\n                code: exports.CoreErrorCode.ALREADY_INITIALIZED,\r\n                message: 'Default instance of Core is already set',\r\n            });\r\n        }\r\n        this.core = core;\r\n    };\r\n    return CoreProvider;\r\n}());\n\n/**\r\n * The base class of every Moralis class that gets registered as a module via MoralisModules\r\n * It should always be created with:\r\n * - `name`: name of the module (should be unique)\r\n * - `core`: the Core instance\r\n * - `type`: (optional) CoreModuleType, defaults to CoreModuleType.DEFAULT\r\n *\r\n * When creating an api, or network module, you should use the ApiModule or NetworkModule\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nvar Module = /** @class */ (function () {\r\n    function Module(name, core, type) {\r\n        if (type === void 0) { type = exports.ModuleType.DEFAULT; }\r\n        this.name = name;\r\n        this.core = core;\r\n        this.type = type;\r\n        this.logger = LoggerController.create(this.name, this.core);\r\n    }\r\n    /**\r\n     * Any cleanup that needs to be done for removing this module.\r\n     * It also should remove the module via `this.core.modules.remove(this.name)`\r\n     */\r\n    Module.prototype.cleanUp = function () {\r\n        this.core.modules.remove(this.name);\r\n    };\r\n    return Module;\r\n}());\n\n/**\r\n * The base class of every Moralis Api class that gets registered as a module via MoralisModules\r\n * It should always be created with:\r\n * - `name`: name of the module (should be unique)\r\n * - `core`: the Core instance\r\n * - `baseUrlProvider`: the provider of the base URL.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nvar ApiModule = /** @class */ (function (_super) {\r\n    __extends(ApiModule, _super);\r\n    function ApiModule(name, core, baseUrlProvider) {\r\n        var _this = _super.call(this, name, core, exports.ModuleType.API) || this;\r\n        _this.baseUrlProvider = baseUrlProvider;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ApiModule.prototype, \"baseUrl\", {\r\n        /**\r\n         * @description The base URL of the API.\r\n         */\r\n        get: function () {\r\n            if (!this._baseUrl) {\r\n                this._baseUrl = this.baseUrlProvider();\r\n            }\r\n            return this._baseUrl;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return ApiModule;\r\n}(Module));\n\n/**\r\n * Note this is just an interface, used in the core config.\r\n * The implementations are located in the @moralisweb3/common-sol-utils package.\r\n */\r\nvar solNetworkNames = ['mainnet', 'devnet'];\n\nvar UnreachableError = new CoreError({\r\n    code: exports.CoreErrorCode.GENERIC_CORE_ERROR,\r\n    message: \"Incorrect type provided, code should not reach here\",\r\n});\r\n/**\r\n * Typesafe check, to make sure that code never reaches a certain point.\r\n * Can be used as an exhaustive check in swtich/if-else statements\r\n *\r\n * When used properly with Typescript, this code should never reach, as it is typed as 'never'\r\n *\r\n * If the code does reach this assertion an UnreachableError is thrown\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nvar assertUnreachable = function (x) {\r\n    throw UnreachableError;\r\n};\n\nvar AxiosRetry = /** @class */ (function () {\r\n    function AxiosRetry() {\r\n    }\r\n    // TODO: refactor to reduce complexity\r\n    // eslint-disable-next-line complexity\r\n    AxiosRetry.request = function (retryConfig, requestConfig) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var attempt, response, e_1, axiosError;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        attempt = 1;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, axios__default.default.request(requestConfig)];\r\n                    case 2:\r\n                        response = _b.sent();\r\n                        return [2 /*return*/, response];\r\n                    case 3:\r\n                        e_1 = _b.sent();\r\n                        if (attempt >= retryConfig.maxRetries) {\r\n                            throw e_1;\r\n                        }\r\n                        if (!requestConfig.method || !retryConfig.allowedMethods.includes(requestConfig.method.toUpperCase())) {\r\n                            throw e_1;\r\n                        }\r\n                        if (!axios__default.default.isAxiosError(e_1)) {\r\n                            throw e_1;\r\n                        }\r\n                        axiosError = e_1;\r\n                        if (!((_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.status) || !retryConfig.allowedResponseStatuses.includes(axiosError.response.status)) {\r\n                            throw e_1;\r\n                        }\r\n                        if (retryConfig.beforeRetry) {\r\n                            retryConfig.beforeRetry(attempt, axiosError);\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 4:\r\n                        attempt++;\r\n                        return [3 /*break*/, 1];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return AxiosRetry;\r\n}());\n\n/**\r\n * Verify if the error is an AxiosError that is caused by a HTTP API error.\r\n */\r\nvar isApiRequestError = function (error) {\r\n    // Check if the error is an axios error\r\n    if (!(error instanceof axios.AxiosError)) {\r\n        return false;\r\n    }\r\n    // Check if the error is a result of a 400 or 500 response\r\n    if (error.code !== axios.AxiosError.ERR_BAD_REQUEST && error.code !== axios.AxiosError.ERR_BAD_RESPONSE) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n/**\r\n * Extract the message from a ApiRequestError. Note that this is implemented based on how the Moralis APIs return Errors.\r\n * This can be in the form:\r\n * - { message: 'some message' }\r\n * - { message: ['some message', 'some other message'] }\r\n * - { }\r\n */\r\nvar getMessageFromApiRequestError = function (error) {\r\n    var _a = error.response.data, message = _a.message, details = _a.details;\r\n    var result = 'Unknown error (no error info returned from API)';\r\n    if (Array.isArray(message)) {\r\n        result = message.join(', ');\r\n    }\r\n    else if (typeof message === 'string') {\r\n        result = message;\r\n    }\r\n    if (details) {\r\n        result += \" \".concat(JSON.stringify(details));\r\n    }\r\n    return result;\r\n};\n\n/**\r\n * A controller responsible to handle all requests in Moralis,\r\n * compatible with browser, nodejJs and react-native\r\n */\r\nvar RequestController = /** @class */ (function () {\r\n    function RequestController(config, logger) {\r\n        this.config = config;\r\n        this.logger = logger;\r\n    }\r\n    RequestController.create = function (core) {\r\n        return new RequestController(core.config, core.logger);\r\n    };\r\n    RequestController.prototype.request = function (config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var maxRetries, retryConfig, response, e_1, error;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.verbose('[RequestController] request started', {\r\n                            url: config.url,\r\n                            method: config.method,\r\n                            body: config.data,\r\n                        });\r\n                        maxRetries = this.config.get(CoreConfig.maxRetries);\r\n                        retryConfig = {\r\n                            maxRetries: maxRetries,\r\n                            allowedMethods: ['GET', 'OPTIONS'],\r\n                            allowedResponseStatuses: [408, 413, 429, 500, 502, 503, 504],\r\n                            beforeRetry: function (attempt, error) {\r\n                                _this.logger.verbose('[RequestController] request retry', {\r\n                                    url: config.url,\r\n                                    method: config.method,\r\n                                    body: config.data,\r\n                                    error: error,\r\n                                    attempt: attempt,\r\n                                });\r\n                            },\r\n                        };\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, AxiosRetry.request(retryConfig, __assign(__assign({}, config), { timeout: 20000, maxContentLength: Infinity, maxBodyLength: Infinity }))];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, response.data];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        error = this.makeError(e_1);\r\n                        this.logger.verbose('[RequestController] request error', {\r\n                            url: config.url,\r\n                            method: config.method,\r\n                            body: config.data,\r\n                            cause: error.cause,\r\n                            name: error.name,\r\n                            details: error.details,\r\n                        });\r\n                        throw error;\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    RequestController.prototype.makeError = function (error) {\r\n        if (isApiRequestError(error)) {\r\n            var _a = error.response, status_1 = _a.status, statusText = _a.statusText;\r\n            var apiMessage = getMessageFromApiRequestError(error);\r\n            return new CoreError({\r\n                code: exports.CoreErrorCode.REQUEST_ERROR,\r\n                message: \"Request failed, \".concat(statusText, \"(\").concat(status_1, \"): \").concat(apiMessage),\r\n                cause: error,\r\n                details: {\r\n                    status: status_1,\r\n                    response: error.response,\r\n                },\r\n            });\r\n        }\r\n        var err = error instanceof Error ? error : new Error(\"\".concat(error));\r\n        return new CoreError({\r\n            code: exports.CoreErrorCode.REQUEST_ERROR,\r\n            message: \"Request failed: \".concat(err.message),\r\n            cause: err,\r\n        });\r\n    };\r\n    RequestController.prototype.post = function (url, searchParams, body, options, abortSignal) {\r\n        return this.request({\r\n            url: url,\r\n            params: searchParams,\r\n            method: 'POST',\r\n            data: body,\r\n            headers: options === null || options === void 0 ? void 0 : options.headers,\r\n            signal: abortSignal,\r\n        });\r\n    };\r\n    RequestController.prototype.put = function (url, searchParams, body, options, abortSignal) {\r\n        return this.request({\r\n            url: url,\r\n            params: searchParams,\r\n            method: 'PUT',\r\n            data: body,\r\n            headers: options === null || options === void 0 ? void 0 : options.headers,\r\n            signal: abortSignal,\r\n        });\r\n    };\r\n    RequestController.prototype.get = function (url, searchParams, options, abortSignal) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.request({\r\n                        url: url,\r\n                        params: searchParams,\r\n                        method: 'GET',\r\n                        headers: options === null || options === void 0 ? void 0 : options.headers,\r\n                        signal: abortSignal,\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    RequestController.prototype.delete = function (url, searchParams, body, options, abortSignal) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.request({\r\n                        url: url,\r\n                        params: searchParams,\r\n                        method: 'DELETE',\r\n                        data: body,\r\n                        headers: options === null || options === void 0 ? void 0 : options.headers,\r\n                        signal: abortSignal,\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    return RequestController;\r\n}());\n\nvar OperationRequestValidator = /** @class */ (function () {\r\n    function OperationRequestValidator(operation) {\r\n        this.allParamNames = __spreadArray(__spreadArray(__spreadArray([], (operation.urlPathParamNames || []), true), (operation.urlSearchParamNames || []), true), (operation.bodyParamNames || []), true);\r\n    }\r\n    OperationRequestValidator.prototype.validate = function (request) {\r\n        var requestParamNames = Object.keys(request);\r\n        for (var _i = 0, requestParamNames_1 = requestParamNames; _i < requestParamNames_1.length; _i++) {\r\n            var paramName = requestParamNames_1[_i];\r\n            if (!this.allParamNames.includes(paramName)) {\r\n                var allParamsNames = this.allParamNames.join(', ');\r\n                throw new MoralisError({\r\n                    code: exports.CoreErrorCode.INVALID_ARGUMENT,\r\n                    message: \"Request contains unknown parameter: \".concat(paramName, \". This operation supports the following parameters: \").concat(allParamsNames),\r\n                });\r\n            }\r\n        }\r\n    };\r\n    return OperationRequestValidator;\r\n}());\n\nexports.OperationType = void 0;\r\n(function (OperationType) {\r\n    OperationType[\"NON_NULLABLE\"] = \"nonNullable\";\r\n    OperationType[\"NULLABLE\"] = \"nullable\";\r\n    OperationType[\"PAGINATED\"] = \"paginated\";\r\n})(exports.OperationType || (exports.OperationType = {}));\r\nfunction determineOperationType(operation) {\r\n    if (operation.firstPageIndex === 0 || operation.firstPageIndex === 1) {\r\n        return exports.OperationType.PAGINATED;\r\n    }\r\n    if (operation.isNullable) {\r\n        return exports.OperationType.NULLABLE;\r\n    }\r\n    return exports.OperationType.NON_NULLABLE;\r\n}\n\nvar NextPaginatedRequestResolver = /** @class */ (function () {\r\n    function NextPaginatedRequestResolver() {\r\n    }\r\n    NextPaginatedRequestResolver.resolve = function (firstPageIndex, request, pagination) {\r\n        if (pagination.cursor) {\r\n            return __assign(__assign({}, request), { cursor: pagination.cursor });\r\n        }\r\n        if (typeof pagination.total === 'number') {\r\n            var currentPage = firstPageIndex === 1 ? pagination.page : pagination.page + 1;\r\n            var hasNextPage = pagination.total > pagination.pageSize * currentPage;\r\n            if (hasNextPage) {\r\n                var offset = (pagination.page + 1) * (request.limit || 500);\r\n                return __assign(__assign({}, request), { offset: offset });\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return NextPaginatedRequestResolver;\r\n}());\n\nvar PaginationReader = /** @class */ (function () {\r\n    function PaginationReader() {\r\n    }\r\n    PaginationReader.read = function (jsonResponse) {\r\n        var _a, _b;\r\n        return {\r\n            page: (_a = jsonResponse.page) !== null && _a !== void 0 ? _a : 0,\r\n            pageSize: (_b = jsonResponse.page_size) !== null && _b !== void 0 ? _b : 0,\r\n            total: jsonResponse.total,\r\n            cursor: jsonResponse.cursor,\r\n        };\r\n    };\r\n    return PaginationReader;\r\n}());\n\nvar ResponseAdapter = /** @class */ (function () {\r\n    function ResponseAdapter(jsonResponse, getResponse) {\r\n        this.jsonResponse = jsonResponse;\r\n        this.getResponse = getResponse;\r\n    }\r\n    Object.defineProperty(ResponseAdapter.prototype, \"result\", {\r\n        get: function () {\r\n            return this.getResponse();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAdapter.prototype, \"raw\", {\r\n        get: function () {\r\n            return this.jsonResponse;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    ResponseAdapter.prototype.toJSON = function () {\r\n        return this.jsonResponse;\r\n    };\r\n    return ResponseAdapter;\r\n}());\n\nvar PaginatedResponseAdapter = /** @class */ (function () {\r\n    function PaginatedResponseAdapter(pagination, jsonResponse, getResult, nextHandler) {\r\n        var _this = this;\r\n        this.pagination = pagination;\r\n        this.jsonResponse = jsonResponse;\r\n        this.getResult = getResult;\r\n        this.nextHandler = nextHandler;\r\n        this.hasNext = function () { return !!_this.nextHandler; };\r\n        this.next = function () {\r\n            if (!_this.nextHandler) {\r\n                throw new MoralisError({\r\n                    code: exports.CoreErrorCode.NO_DATA_FOUND,\r\n                    message: 'Page limit exceeded! Before call this method check an existence of the next page by .hasNext() method.',\r\n                });\r\n            }\r\n            return _this.nextHandler();\r\n        };\r\n    }\r\n    Object.defineProperty(PaginatedResponseAdapter.prototype, \"result\", {\r\n        get: function () {\r\n            return this.getResult();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginatedResponseAdapter.prototype, \"raw\", {\r\n        get: function () {\r\n            return this.jsonResponse;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    PaginatedResponseAdapter.prototype.toJSON = function () {\r\n        return this.jsonResponse;\r\n    };\r\n    return PaginatedResponseAdapter;\r\n}());\n\nvar toCamel = function (value) {\r\n    return value.replace(/([-_][a-z])/gi, function ($1) {\r\n        return $1.toUpperCase().replace('-', '').replace('_', '');\r\n    });\r\n};\r\nvar isObject = function (o) {\r\n    return o === Object(o) && !Array.isArray(o) && typeof o !== 'function';\r\n};\r\nvar toCamelCase = function (data) {\r\n    if (isObject(data)) {\r\n        var n_1 = {};\r\n        Object.keys(data).forEach(function (k) {\r\n            // @ts-ignore TODO: fix typing\r\n            n_1[toCamel(k)] = toCamelCase(data[k]);\r\n        });\r\n        return n_1;\r\n    }\r\n    if (Array.isArray(data)) {\r\n        // @ts-ignore TODO: difficult to type with recursive arrays\r\n        return data.map(function (i) {\r\n            return toCamelCase(i);\r\n        });\r\n    }\r\n    return data;\r\n};\n\nfunction maybe(value, transform) {\r\n    if (value == null) {\r\n        return undefined;\r\n    }\r\n    if (transform) {\r\n        return transform(value);\r\n    }\r\n    return value;\r\n}\n\nexports.ApiModule = ApiModule;\nexports.AxiosRetry = AxiosRetry;\nexports.BigNumber = BigNumber;\nexports.Config = Config;\nexports.Core = Core;\nexports.CoreConfig = CoreConfig;\nexports.CoreError = CoreError;\nexports.CoreProvider = CoreProvider;\nexports.LoggerController = LoggerController;\nexports.Module = Module;\nexports.Modules = Modules;\nexports.MoralisApiError = MoralisApiError;\nexports.MoralisAuthError = MoralisAuthError;\nexports.MoralisData = MoralisData;\nexports.MoralisDataObject = MoralisDataObject;\nexports.MoralisError = MoralisError;\nexports.MoralisStreamError = MoralisStreamError;\nexports.NextPaginatedRequestResolver = NextPaginatedRequestResolver;\nexports.OperationRequestValidator = OperationRequestValidator;\nexports.PaginatedResponseAdapter = PaginatedResponseAdapter;\nexports.PaginationReader = PaginationReader;\nexports.RequestController = RequestController;\nexports.ResponseAdapter = ResponseAdapter;\nexports.UnreachableError = UnreachableError;\nexports.assertUnreachable = assertUnreachable;\nexports.dateInputToDate = dateInputToDate;\nexports.determineOperationType = determineOperationType;\nexports.isApiModule = isApiModule;\nexports.isMoralisError = isMoralisError;\nexports.maybe = maybe;\nexports.solNetworkNames = solNetworkNames;\nexports.toCamel = toCamel;\nexports.toCamelCase = toCamelCase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/common-evm-utils/lib/cjs/index.cjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@moralisweb3/common-evm-utils/lib/cjs/index.cjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar address = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nvar bytes = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\n\n// $ref: #/components/schemas/chainList\r\n// typeName: chainList\r\nvar EvmChainList = /** @class */ (function () {\r\n    function EvmChainList() {\r\n    }\r\n    EvmChainList.create = function (input) {\r\n        return input;\r\n    };\r\n    EvmChainList.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return EvmChainList;\r\n}());\n\n// $ref: #/paths/~1nft~1{address}~1trades/get/parameters/5/schema\r\n// typeName: getNFTTrades_marketplace_Enum\r\nvar EvmGetNFTTradesMarketplaceEnum = /** @class */ (function () {\r\n    function EvmGetNFTTradesMarketplaceEnum() {\r\n    }\r\n    EvmGetNFTTradesMarketplaceEnum.create = function (input) {\r\n        return input;\r\n    };\r\n    EvmGetNFTTradesMarketplaceEnum.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return EvmGetNFTTradesMarketplaceEnum;\r\n}());\n\n// $ref: #/components/schemas/contractsReviewItem/properties/report_type\r\n// typeName: contractsReviewItem_report_type_Enum\r\nvar EvmContractsReviewItemReportTypeEnum = /** @class */ (function () {\r\n    function EvmContractsReviewItemReportTypeEnum() {\r\n    }\r\n    EvmContractsReviewItemReportTypeEnum.create = function (input) {\r\n        return input;\r\n    };\r\n    EvmContractsReviewItemReportTypeEnum.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return EvmContractsReviewItemReportTypeEnum;\r\n}());\n\n// $ref: #/components/schemas/contractsReviewItem/properties/contract_type\r\n// typeName: contractsReviewItem_contract_type_Enum\r\nvar EvmContractsReviewItemContractTypeEnum = /** @class */ (function () {\r\n    function EvmContractsReviewItemContractTypeEnum() {\r\n    }\r\n    EvmContractsReviewItemContractTypeEnum.create = function (input) {\r\n        return input;\r\n    };\r\n    EvmContractsReviewItemContractTypeEnum.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return EvmContractsReviewItemContractTypeEnum;\r\n}());\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\n/**\r\n * A representation of an address on the EVM network.\r\n *\r\n * Use this class any time you work with an address, as it will provide utilities to validate the address,\r\n * and format it to lowercase and checksum format.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmAddress = /** @class */ (function () {\r\n    function EvmAddress(address) {\r\n        this._value = EvmAddress.parse(address);\r\n    }\r\n    Object.defineProperty(EvmAddress, \"ZERO_ADDRESS\", {\r\n        /**\r\n         * @returns EvmAddress instance of the zero address: \"0x0000000000000000000000000000000000000000\"\r\n         * @example `EvmAddress.ZERO_ADDRESS`\r\n         */\r\n        get: function () {\r\n            return EvmAddress.create('0x0000000000000000000000000000000000000000');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create a new instance of EvmAddress from any valid address input\r\n     *\r\n     * @example\r\n     * ```\r\n     * const address = EvmAddress.create(\"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")\r\n     * const address = EvmAddress.create(\"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\")\r\n     * const address = EvmAddress.ZERO_ADDRESS\r\n     * ```\r\n     */\r\n    EvmAddress.create = function (address) {\r\n        if (address instanceof EvmAddress) {\r\n            return address;\r\n        }\r\n        return new EvmAddress(address);\r\n    };\r\n    EvmAddress.fromJSON = function (address) {\r\n        return new EvmAddress(address);\r\n    };\r\n    EvmAddress.parse = function (address$1) {\r\n        if (!address.isAddress(address$1)) {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Invalid address provided: \".concat(address$1),\r\n            });\r\n        }\r\n        return address.getAddress(address$1);\r\n    };\r\n    /**\r\n     * Check the equality between two Evm addresses\r\n     * @example `EvmAddress.equals(\"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\", \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")`\r\n     */\r\n    EvmAddress.equals = function (addressA, addressB) {\r\n        return EvmAddress.create(addressA)._value === EvmAddress.create(addressB)._value;\r\n    };\r\n    /**\r\n     * Checks the equality of the current address with another evm address\r\n     * @example `address.equals(\"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")`\r\n     */\r\n    EvmAddress.prototype.equals = function (address) {\r\n        return EvmAddress.equals(this, address);\r\n    };\r\n    Object.defineProperty(EvmAddress.prototype, \"checksum\", {\r\n        /**\r\n         * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)\r\n         * @example `address.checksum // \"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\"`\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmAddress.prototype, \"lowercase\", {\r\n        /**\r\n         * @returns the address value in lowercase format\r\n         * @example `address.lowercase // \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\"`\r\n         */\r\n        get: function () {\r\n            return this._value.toLowerCase();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a JSON representation of the address.\r\n     * @returns an address.\r\n     */\r\n    EvmAddress.prototype.toJSON = function () {\r\n        // We convert to lowercase because we want to keep backwards compatibility.\r\n        return this.lowercase;\r\n    };\r\n    return EvmAddress;\r\n}());\n\n// source: https://chainid.network/chains.json\r\nvar chainList = [\r\n    {\r\n        name: 'Ethereum Mainnet',\r\n        chain: 'ETH',\r\n        icon: 'ethereum',\r\n        rpc: [\r\n            'https://mainnet.infura.io/v3/${INFURA_API_KEY}',\r\n            'wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}',\r\n            'https://api.mycryptoapi.com/eth',\r\n            'https://cloudflare-eth.com',\r\n            'https://ethereum.publicnode.com',\r\n            'wss://ethereum.publicnode.com',\r\n            'https://mainnet.gateway.tenderly.co',\r\n            'wss://mainnet.gateway.tenderly.co',\r\n            'https://rpc.blocknative.com/boost',\r\n            'https://rpc.flashbots.net',\r\n            'https://rpc.flashbots.net/fast',\r\n            'https://rpc.mevblocker.io',\r\n            'https://rpc.mevblocker.io/fast',\r\n            'https://rpc.mevblocker.io/noreverts',\r\n            'https://rpc.mevblocker.io/fullprivacy',\r\n        ],\r\n        features: [\r\n            {\r\n                name: 'EIP155',\r\n            },\r\n            {\r\n                name: 'EIP1559',\r\n            },\r\n        ],\r\n        faucets: [],\r\n        nativeCurrency: {\r\n            name: 'Ether',\r\n            symbol: 'ETH',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://ethereum.org',\r\n        shortName: 'eth',\r\n        chainId: 1,\r\n        networkId: 1,\r\n        slip44: 60,\r\n        ens: {\r\n            registry: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n        },\r\n        explorers: [\r\n            {\r\n                name: 'etherscan',\r\n                url: 'https://etherscan.io',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'blockscout',\r\n                url: 'https://eth.blockscout.com',\r\n                icon: 'blockscout',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'dexguru',\r\n                url: 'https://ethereum.dex.guru',\r\n                icon: 'dexguru',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Goerli',\r\n        title: 'Ethereum Testnet Goerli',\r\n        chain: 'ETH',\r\n        rpc: [\r\n            'https://goerli.infura.io/v3/${INFURA_API_KEY}',\r\n            'wss://goerli.infura.io/v3/${INFURA_API_KEY}',\r\n            'https://rpc.goerli.mudit.blog/',\r\n            'https://ethereum-goerli.publicnode.com',\r\n            'wss://ethereum-goerli.publicnode.com',\r\n            'https://goerli.gateway.tenderly.co',\r\n            'wss://goerli.gateway.tenderly.co',\r\n        ],\r\n        faucets: [\r\n            'http://fauceth.komputing.org?chain=5&address=${ADDRESS}',\r\n            'https://goerli-faucet.slock.it?address=${ADDRESS}',\r\n            'https://faucet.goerli.mudit.blog',\r\n        ],\r\n        nativeCurrency: {\r\n            name: 'Goerli Ether',\r\n            symbol: 'ETH',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://goerli.net/#about',\r\n        shortName: 'gor',\r\n        chainId: 5,\r\n        networkId: 5,\r\n        ens: {\r\n            registry: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\r\n        },\r\n        explorers: [\r\n            {\r\n                name: 'etherscan-goerli',\r\n                url: 'https://goerli.etherscan.io',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'blockscout-goerli',\r\n                url: 'https://eth-goerli.blockscout.com',\r\n                icon: 'blockscout',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'OP Mainnet',\r\n        chain: 'ETH',\r\n        rpc: [\r\n            'https://mainnet.optimism.io',\r\n            'https://optimism.publicnode.com',\r\n            'wss://optimism.publicnode.com',\r\n            'https://optimism.gateway.tenderly.co',\r\n            'wss://optimism.gateway.tenderly.co',\r\n        ],\r\n        faucets: [],\r\n        nativeCurrency: {\r\n            name: 'Ether',\r\n            symbol: 'ETH',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://optimism.io',\r\n        shortName: 'oeth',\r\n        chainId: 10,\r\n        networkId: 10,\r\n        explorers: [\r\n            {\r\n                name: 'etherscan',\r\n                url: 'https://optimistic.etherscan.io',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'blockscout',\r\n                url: 'https://optimism.blockscout.com',\r\n                icon: 'blockscout',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'dexguru',\r\n                url: 'https://optimism.dex.guru',\r\n                icon: 'dexguru',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Cronos Mainnet',\r\n        chain: 'CRO',\r\n        rpc: ['https://evm.cronos.org', 'https://cronos-evm.publicnode.com', 'wss://cronos-evm.publicnode.com'],\r\n        features: [\r\n            {\r\n                name: 'EIP1559',\r\n            },\r\n        ],\r\n        faucets: [],\r\n        nativeCurrency: {\r\n            name: 'Cronos',\r\n            symbol: 'CRO',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://cronos.org/',\r\n        shortName: 'cro',\r\n        chainId: 25,\r\n        networkId: 25,\r\n        explorers: [\r\n            {\r\n                name: 'Cronos Explorer',\r\n                url: 'https://cronoscan.com',\r\n                standard: 'none',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'BNB Smart Chain Mainnet',\r\n        chain: 'BSC',\r\n        rpc: [\r\n            'https://bsc-dataseed1.bnbchain.org',\r\n            'https://bsc-dataseed2.bnbchain.org',\r\n            'https://bsc-dataseed3.bnbchain.org',\r\n            'https://bsc-dataseed4.bnbchain.org',\r\n            'https://bsc-dataseed1.defibit.io',\r\n            'https://bsc-dataseed2.defibit.io',\r\n            'https://bsc-dataseed3.defibit.io',\r\n            'https://bsc-dataseed4.defibit.io',\r\n            'https://bsc-dataseed1.ninicoin.io',\r\n            'https://bsc-dataseed2.ninicoin.io',\r\n            'https://bsc-dataseed3.ninicoin.io',\r\n            'https://bsc-dataseed4.ninicoin.io',\r\n            'https://bsc.publicnode.com',\r\n            'wss://bsc.publicnode.com',\r\n            'wss://bsc-ws-node.nariox.org',\r\n        ],\r\n        faucets: [],\r\n        nativeCurrency: {\r\n            name: 'BNB Chain Native Token',\r\n            symbol: 'BNB',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://www.bnbchain.org/en',\r\n        shortName: 'bnb',\r\n        chainId: 56,\r\n        networkId: 56,\r\n        slip44: 714,\r\n        explorers: [\r\n            {\r\n                name: 'bscscan',\r\n                url: 'https://bscscan.com',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'dexguru',\r\n                url: 'https://bnb.dex.guru',\r\n                icon: 'dexguru',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'BNB Smart Chain Testnet',\r\n        chain: 'BSC',\r\n        rpc: [\r\n            'https://data-seed-prebsc-1-s1.bnbchain.org:8545',\r\n            'https://data-seed-prebsc-2-s1.bnbchain.org:8545',\r\n            'https://data-seed-prebsc-1-s2.bnbchain.org:8545',\r\n            'https://data-seed-prebsc-2-s2.bnbchain.org:8545',\r\n            'https://data-seed-prebsc-1-s3.bnbchain.org:8545',\r\n            'https://data-seed-prebsc-2-s3.bnbchain.org:8545',\r\n            'https://bsc-testnet.publicnode.com',\r\n            'wss://bsc-testnet.publicnode.com',\r\n        ],\r\n        faucets: ['https://testnet.bnbchain.org/faucet-smart'],\r\n        nativeCurrency: {\r\n            name: 'BNB Chain Native Token',\r\n            symbol: 'tBNB',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://www.bnbchain.org/en',\r\n        shortName: 'bnbt',\r\n        chainId: 97,\r\n        networkId: 97,\r\n        explorers: [\r\n            {\r\n                name: 'bscscan-testnet',\r\n                url: 'https://testnet.bscscan.com',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Gnosis',\r\n        chain: 'GNO',\r\n        icon: 'gnosis',\r\n        rpc: [\r\n            'https://rpc.gnosischain.com',\r\n            'https://rpc.gnosis.gateway.fm',\r\n            'https://rpc.ankr.com/gnosis',\r\n            'https://gnosischain-rpc.gateway.pokt.network',\r\n            'https://gnosis-mainnet.public.blastapi.io',\r\n            'https://gnosis.api.onfinality.io/public',\r\n            'https://gnosis.blockpi.network/v1/rpc/public',\r\n            'https://web3endpoints.com/gnosischain-mainnet',\r\n            'https://gnosis.oat.farm',\r\n            'wss://rpc.gnosischain.com/wss',\r\n            'https://gnosis.publicnode.com',\r\n            'wss://gnosis.publicnode.com',\r\n        ],\r\n        faucets: [\r\n            'https://gnosisfaucet.com',\r\n            'https://stakely.io/faucet/gnosis-chain-xdai',\r\n            'https://faucet.prussia.dev/xdai',\r\n        ],\r\n        nativeCurrency: {\r\n            name: 'xDAI',\r\n            symbol: 'XDAI',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://docs.gnosischain.com',\r\n        shortName: 'gno',\r\n        chainId: 100,\r\n        networkId: 100,\r\n        slip44: 700,\r\n        explorers: [\r\n            {\r\n                name: 'gnosisscan',\r\n                url: 'https://gnosisscan.io',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'blockscout',\r\n                url: 'https://gnosis.blockscout.com',\r\n                icon: 'blockscout',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'dexguru',\r\n                url: 'https://gnosis.dex.guru',\r\n                icon: 'dexguru',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Polygon Mainnet',\r\n        chain: 'Polygon',\r\n        icon: 'polygon',\r\n        rpc: [\r\n            'https://polygon-rpc.com/',\r\n            'https://rpc-mainnet.matic.network',\r\n            'https://matic-mainnet.chainstacklabs.com',\r\n            'https://rpc-mainnet.maticvigil.com',\r\n            'https://rpc-mainnet.matic.quiknode.pro',\r\n            'https://matic-mainnet-full-rpc.bwarelabs.com',\r\n            'https://polygon-bor.publicnode.com',\r\n            'wss://polygon-bor.publicnode.com',\r\n            'https://polygon.gateway.tenderly.co',\r\n            'wss://polygon.gateway.tenderly.co',\r\n        ],\r\n        faucets: [],\r\n        nativeCurrency: {\r\n            name: 'MATIC',\r\n            symbol: 'MATIC',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://polygon.technology/',\r\n        shortName: 'matic',\r\n        chainId: 137,\r\n        networkId: 137,\r\n        slip44: 966,\r\n        explorers: [\r\n            {\r\n                name: 'polygonscan',\r\n                url: 'https://polygonscan.com',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'dexguru',\r\n                url: 'https://polygon.dex.guru',\r\n                icon: 'dexguru',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Fantom Opera',\r\n        chain: 'FTM',\r\n        rpc: ['https://rpc.ftm.tools', 'https://fantom.publicnode.com', 'wss://fantom.publicnode.com'],\r\n        faucets: [],\r\n        nativeCurrency: {\r\n            name: 'Fantom',\r\n            symbol: 'FTM',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://fantom.foundation',\r\n        shortName: 'ftm',\r\n        chainId: 250,\r\n        networkId: 250,\r\n        icon: 'fantom',\r\n        explorers: [\r\n            {\r\n                name: 'ftmscan',\r\n                url: 'https://ftmscan.com',\r\n                icon: 'ftmscan',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'dexguru',\r\n                url: 'https://fantom.dex.guru',\r\n                icon: 'dexguru',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Fantom Testnet',\r\n        chain: 'FTM',\r\n        rpc: [\r\n            'https://rpc.testnet.fantom.network',\r\n            'https://fantom-testnet.publicnode.com',\r\n            'wss://fantom-testnet.publicnode.com',\r\n        ],\r\n        faucets: ['https://faucet.fantom.network'],\r\n        nativeCurrency: {\r\n            name: 'Fantom',\r\n            symbol: 'FTM',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://docs.fantom.foundation/quick-start/short-guide#fantom-testnet',\r\n        shortName: 'tftm',\r\n        chainId: 4002,\r\n        networkId: 4002,\r\n        icon: 'fantom',\r\n        explorers: [\r\n            {\r\n                name: 'ftmscan',\r\n                url: 'https://testnet.ftmscan.com',\r\n                icon: 'ftmscan',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Gnosis Chiado Testnet',\r\n        chain: 'GNO',\r\n        icon: 'gnosis',\r\n        rpc: [\r\n            'https://rpc.chiadochain.net',\r\n            'https://rpc.chiado.gnosis.gateway.fm',\r\n            'wss://rpc.chiadochain.net/wss',\r\n            'https://gnosis-chiado.publicnode.com',\r\n            'wss://gnosis-chiado.publicnode.com',\r\n        ],\r\n        faucets: ['https://gnosisfaucet.com'],\r\n        nativeCurrency: {\r\n            name: 'Chiado xDAI',\r\n            symbol: 'XDAI',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://docs.gnosischain.com',\r\n        shortName: 'chi',\r\n        chainId: 10200,\r\n        networkId: 10200,\r\n        explorers: [\r\n            {\r\n                name: 'blockscout-chiadochain',\r\n                url: 'https://blockscout.chiadochain.net',\r\n                icon: 'blockscout',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'blockscout',\r\n                url: 'https://gnosis-chiado.blockscout.com',\r\n                icon: 'blockscout',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Arbitrum One',\r\n        chainId: 42161,\r\n        shortName: 'arb1',\r\n        chain: 'ETH',\r\n        networkId: 42161,\r\n        nativeCurrency: {\r\n            name: 'Ether',\r\n            symbol: 'ETH',\r\n            decimals: 18,\r\n        },\r\n        rpc: [\r\n            'https://arbitrum-mainnet.infura.io/v3/${INFURA_API_KEY}',\r\n            'https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}',\r\n            'https://arb1.arbitrum.io/rpc',\r\n            'https://arbitrum-one.publicnode.com',\r\n            'wss://arbitrum-one.publicnode.com',\r\n        ],\r\n        faucets: [],\r\n        explorers: [\r\n            {\r\n                name: 'Arbiscan',\r\n                url: 'https://arbiscan.io',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'Arbitrum Explorer',\r\n                url: 'https://explorer.arbitrum.io',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'dexguru',\r\n                url: 'https://arbitrum.dex.guru',\r\n                icon: 'dexguru',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n        infoURL: 'https://arbitrum.io',\r\n        parent: {\r\n            type: 'L2',\r\n            chain: 'eip155-1',\r\n            bridges: [\r\n                {\r\n                    url: 'https://bridge.arbitrum.io',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        name: 'Avalanche Fuji Testnet',\r\n        chain: 'AVAX',\r\n        icon: 'avax',\r\n        rpc: [\r\n            'https://api.avax-test.network/ext/bc/C/rpc',\r\n            'https://avalanche-fuji-c-chain.publicnode.com',\r\n            'wss://avalanche-fuji-c-chain.publicnode.com',\r\n        ],\r\n        faucets: ['https://faucet.avax-test.network/'],\r\n        nativeCurrency: {\r\n            name: 'Avalanche',\r\n            symbol: 'AVAX',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://cchain.explorer.avax-test.network',\r\n        shortName: 'Fuji',\r\n        chainId: 43113,\r\n        networkId: 1,\r\n        explorers: [\r\n            {\r\n                name: 'snowtrace',\r\n                url: 'https://testnet.snowtrace.io',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Avalanche C-Chain',\r\n        chain: 'AVAX',\r\n        icon: 'avax',\r\n        rpc: [\r\n            'https://api.avax.network/ext/bc/C/rpc',\r\n            'https://avalanche-c-chain.publicnode.com',\r\n            'wss://avalanche-c-chain.publicnode.com',\r\n        ],\r\n        features: [\r\n            {\r\n                name: 'EIP1559',\r\n            },\r\n        ],\r\n        faucets: [],\r\n        nativeCurrency: {\r\n            name: 'Avalanche',\r\n            symbol: 'AVAX',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://www.avax.network/',\r\n        shortName: 'avax',\r\n        chainId: 43114,\r\n        networkId: 43114,\r\n        slip44: 9005,\r\n        explorers: [\r\n            {\r\n                name: 'snowtrace',\r\n                url: 'https://snowtrace.io',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Mumbai',\r\n        title: 'Polygon Testnet Mumbai',\r\n        chain: 'Polygon',\r\n        icon: 'polygon',\r\n        rpc: [\r\n            'https://rpc-mumbai.maticvigil.com',\r\n            'https://polygon-mumbai-bor.publicnode.com',\r\n            'wss://polygon-mumbai-bor.publicnode.com',\r\n            'https://polygon-mumbai.gateway.tenderly.co',\r\n            'wss://polygon-mumbai.gateway.tenderly.co',\r\n        ],\r\n        faucets: ['https://faucet.polygon.technology/'],\r\n        nativeCurrency: {\r\n            name: 'MATIC',\r\n            symbol: 'MATIC',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://polygon.technology/',\r\n        shortName: 'maticmum',\r\n        chainId: 80001,\r\n        networkId: 80001,\r\n        explorers: [\r\n            {\r\n                name: 'polygonscan',\r\n                url: 'https://mumbai.polygonscan.com',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'IVAR Chain Mainnet',\r\n        chain: 'IVAR',\r\n        icon: 'ivar',\r\n        rpc: ['https://mainnet-rpc.ivarex.com'],\r\n        faucets: ['https://faucet.ivarex.com/'],\r\n        nativeCurrency: {\r\n            name: 'Ivar',\r\n            symbol: 'IVAR',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://ivarex.com',\r\n        shortName: 'ivar',\r\n        chainId: 88888,\r\n        networkId: 88888,\r\n        explorers: [\r\n            {\r\n                name: 'ivarscan',\r\n                url: 'https://ivarscan.com',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Arbitrum Goerli',\r\n        title: 'Arbitrum Goerli Rollup Testnet',\r\n        chainId: 421613,\r\n        shortName: 'arb-goerli',\r\n        chain: 'ETH',\r\n        networkId: 421613,\r\n        nativeCurrency: {\r\n            name: 'Arbitrum Goerli Ether',\r\n            symbol: 'AGOR',\r\n            decimals: 18,\r\n        },\r\n        rpc: [\r\n            'https://goerli-rollup.arbitrum.io/rpc',\r\n            'https://arbitrum-goerli.publicnode.com',\r\n            'wss://arbitrum-goerli.publicnode.com',\r\n        ],\r\n        faucets: [],\r\n        infoURL: 'https://arbitrum.io/',\r\n        explorers: [\r\n            {\r\n                name: 'Arbitrum Goerli Arbiscan',\r\n                url: 'https://goerli.arbiscan.io',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n        parent: {\r\n            type: 'L2',\r\n            chain: 'eip155-5',\r\n            bridges: [\r\n                {\r\n                    url: 'https://bridge.arbitrum.io/',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        name: 'Sepolia',\r\n        title: 'Ethereum Testnet Sepolia',\r\n        chain: 'ETH',\r\n        rpc: [\r\n            'https://rpc.sepolia.org',\r\n            'https://rpc2.sepolia.org',\r\n            'https://rpc-sepolia.rockx.com',\r\n            'https://rpc.sepolia.ethpandaops.io',\r\n            'https://sepolia.infura.io/v3/${INFURA_API_KEY}',\r\n            'wss://sepolia.infura.io/v3/${INFURA_API_KEY}',\r\n            'https://sepolia.gateway.tenderly.co',\r\n            'wss://sepolia.gateway.tenderly.co',\r\n            'https://ethereum-sepolia.publicnode.com',\r\n            'wss://ethereum-sepolia.publicnode.com',\r\n        ],\r\n        faucets: ['http://fauceth.komputing.org?chain=11155111&address=${ADDRESS}'],\r\n        nativeCurrency: {\r\n            name: 'Sepolia Ether',\r\n            symbol: 'ETH',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://sepolia.otterscan.io',\r\n        shortName: 'sep',\r\n        chainId: 11155111,\r\n        networkId: 11155111,\r\n        explorers: [\r\n            {\r\n                name: 'etherscan-sepolia',\r\n                url: 'https://sepolia.etherscan.io',\r\n                standard: 'EIP3091',\r\n            },\r\n            {\r\n                name: 'otterscan-sepolia',\r\n                url: 'https://sepolia.otterscan.io',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'Palm',\r\n        chain: 'Palm',\r\n        icon: 'palm',\r\n        rpc: ['https://palm-mainnet.infura.io/v3/${INFURA_API_KEY}'],\r\n        faucets: [],\r\n        nativeCurrency: {\r\n            name: 'PALM',\r\n            symbol: 'PALM',\r\n            decimals: 18,\r\n        },\r\n        infoURL: 'https://palm.io',\r\n        shortName: 'palm',\r\n        chainId: 11297108109,\r\n        networkId: 11297108109,\r\n        explorers: [\r\n            {\r\n                name: 'Palm Explorer',\r\n                url: 'https://explorer.palm.io',\r\n                standard: 'EIP3091',\r\n            },\r\n        ],\r\n    },\r\n];\n\nvar INVALID_VALUES = ['0x', '0x0', '0', 0];\r\nvar EvmChainParser = /** @class */ (function () {\r\n    function EvmChainParser() {\r\n    }\r\n    EvmChainParser.parse = function (chain) {\r\n        if (INVALID_VALUES.includes(chain)) {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'\",\r\n            });\r\n        }\r\n        if (typeof chain === 'string') {\r\n            if (chain.startsWith('0x')) {\r\n                return chain;\r\n            }\r\n            try {\r\n                var parsed = parseInt(chain, 10);\r\n                if (Number.isNaN(parsed)) {\r\n                    throw new Error('Cannot parse the provided string value to a valid chain number');\r\n                }\r\n                return \"0x\".concat(parsed.toString(16));\r\n            }\r\n            catch (error) {\r\n                throw new commonCore.CoreError({\r\n                    code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                    message: \"Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'\",\r\n                });\r\n            }\r\n        }\r\n        if (chain <= 0) {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'\",\r\n            });\r\n        }\r\n        return \"0x\".concat(chain.toString(16));\r\n    };\r\n    return EvmChainParser;\r\n}());\n\n/**\r\n * The EvmChain class is a MoralisData that references to a EVM chain\r\n * @category DataType\r\n */\r\nvar EvmChain = /** @class */ (function () {\r\n    function EvmChain(value) {\r\n        var _this = this;\r\n        var _a;\r\n        this._value = EvmChainParser.parse(value);\r\n        this._chainlistData = (_a = chainList.find(function (chainData) { return chainData.chainId === _this.decimal; })) !== null && _a !== void 0 ? _a : null;\r\n    }\r\n    Object.defineProperty(EvmChain, \"ETHEREUM\", {\r\n        /**\r\n         * Returns ETHEREUM chain\r\n         *\r\n         * @example EvmChain.ETHEREUM\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(1);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"GOERLI\", {\r\n        /**\r\n         * Returns GOERLI chain\r\n         *\r\n         * @example EvmChain.GOERLI\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(5);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"SEPOLIA\", {\r\n        /**\r\n         * Returns SEPOLIA chain\r\n         *\r\n         * @example EvmChain.SEPOLIA\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(11155111);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"POLYGON\", {\r\n        /**\r\n         * Returns POLYGON chain\r\n         *\r\n         * @example EvmChain.POLYGON\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(137);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"MUMBAI\", {\r\n        /**\r\n         * Returns MUMBAI chain\r\n         *\r\n         * @example EvmChain.MUMBAI\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(80001);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"BSC\", {\r\n        /**\r\n         * Returns BSC chain\r\n         *\r\n         * @example EvmChain.BSC\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(56);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"BSC_TESTNET\", {\r\n        /**\r\n         * Returns BSC_TESTNET chain\r\n         *\r\n         * @example EvmChain.BSC_TESTNET\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(97);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"AVALANCHE\", {\r\n        /**\r\n         * Returns AVALANCHE chain\r\n         *\r\n         * @example EvmChain.AVALANCHE\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(43114);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"AVALANCHE_TESTNET\", {\r\n        /**\r\n         * Returns AVALANCHE_TESTNET chain\r\n         *\r\n         * @example EvmChain.AVALANCHE_TESTNET\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(0xa869);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"FANTOM\", {\r\n        /**\r\n         * Returns FANTOM chain\r\n         *\r\n         * @example EvmChain.FANTOM\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(250);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"FANTOM_TESTNET\", {\r\n        /**\r\n         * Returns FANTOM_TESTNET chain\r\n         *\r\n         * @example EvmChain.FANTOM_TESTNET\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(4002);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"CRONOS\", {\r\n        /**\r\n         * Returns CRONOS chain\r\n         *\r\n         * @example EvmChain.CRONOS\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(25);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"PALM\", {\r\n        /**\r\n         * Returns PALM chain\r\n         *\r\n         * @example EvmChain.PALM\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(11297108109);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"ARBITRUM\", {\r\n        /**\r\n         * Returns ARBITRUM chain\r\n         *\r\n         * @example EvmChain.ARBITRUM\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(42161);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"ARBITRUM_TESTNET\", {\r\n        /**\r\n         * Returns ARBITRUM_TESTNET chain\r\n         *\r\n         * @example EvmChain.ARBITRUM_TESTNET\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(421613);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"RONIN\", {\r\n        /**\r\n         * Returns RONIN chain\r\n         *\r\n         * @example EvmChain.RONIN\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(2020);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"OPTIMISM\", {\r\n        /**\r\n         * Returns OPTIMISM chain\r\n         *\r\n         * @example EvmChain.OPTIMISM\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(10);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"CHILIZ\", {\r\n        /**\r\n         * Returns CHILIZ chain\r\n         *\r\n         * @example EvmChain.CHILIZ\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(88888);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"CHILIZ_TESTNET\", {\r\n        /**\r\n         * Returns CHILIZ_TESTNET chain\r\n         *\r\n         * @example EvmChain.CHILIZ_TESTNET\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(88882);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"GNOSIS\", {\r\n        /**\r\n         * Returns GNOSIS chain\r\n         *\r\n         * @example EvmChain.GNOSIS\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(100);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain, \"GNOSIS_TESTNET\", {\r\n        /**\r\n         * Returns GNOSIS_TESTNET chain\r\n         *\r\n         * @example EvmChain.GNOSIS_TESTNET\r\n         */\r\n        get: function () {\r\n            return EvmChain.create(10200);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create a new instance of EvmChain from any valid address input.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * const chain = EvmChain.create(1)\r\n     * const chain = EvmChain.create(\"0x3\")\r\n     * ```\r\n     */\r\n    EvmChain.create = function (chain) {\r\n        if (chain instanceof EvmChain) {\r\n            return chain;\r\n        }\r\n        return new EvmChain(chain);\r\n    };\r\n    // Getter to return _chainlistData and throws an error if it is not defined\r\n    EvmChain.prototype._getChainlistData = function () {\r\n        if (!this._chainlistData) {\r\n            return null;\r\n        }\r\n        return this._chainlistData;\r\n    };\r\n    /**\r\n     * Compares if 2 chains are equal, based on the chainId\r\n     *\r\n     * @param chainA - The first chain to compare\r\n     * @param chainB - The second chain to compare\r\n     *\r\n     * @returns true if the chains are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * EvmChain.equals(\"1\", \"0x1\")\r\n     * ```\r\n     */\r\n    EvmChain.equals = function (chainA, chainB) {\r\n        return EvmChain.create(chainA)._value === EvmChain.create(chainB)._value;\r\n    };\r\n    /**\r\n     * @returns all the available chains\r\n     */\r\n    EvmChain.values = function () {\r\n        return [\r\n            EvmChain.ETHEREUM,\r\n            EvmChain.GOERLI,\r\n            EvmChain.SEPOLIA,\r\n            EvmChain.POLYGON,\r\n            EvmChain.MUMBAI,\r\n            EvmChain.BSC,\r\n            EvmChain.BSC_TESTNET,\r\n            EvmChain.AVALANCHE,\r\n            EvmChain.AVALANCHE_TESTNET,\r\n            EvmChain.FANTOM,\r\n            EvmChain.FANTOM_TESTNET,\r\n            EvmChain.CRONOS,\r\n            EvmChain.PALM,\r\n            EvmChain.ARBITRUM,\r\n            EvmChain.ARBITRUM_TESTNET,\r\n            EvmChain.RONIN,\r\n            EvmChain.OPTIMISM,\r\n            EvmChain.CHILIZ,\r\n            EvmChain.CHILIZ_TESTNET,\r\n            EvmChain.GNOSIS,\r\n            EvmChain.GNOSIS_TESTNET,\r\n        ];\r\n    };\r\n    /**\r\n     * Compares if the current chain is equal to the provided chain, based on the chainId\r\n     * @param chain - The chain to compare to\r\n     * @returns true if the chains are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * chain.equals(EvmChain.ETHEREUM)\r\n     * ```\r\n     */\r\n    EvmChain.prototype.equals = function (chain) {\r\n        return EvmChain.equals(this, chain);\r\n    };\r\n    /**\r\n     * Displays the chain hex-string representation of the chain and also the chain name if not null\r\n     *\r\n     * @example chain.display() // \"Ethereum (0x1)\" | \"0x1\"\r\n     */\r\n    EvmChain.prototype.display = function () {\r\n        return this.name ? \"\".concat(this.name, \" (\").concat(this.hex, \")\") : this.hex;\r\n    };\r\n    /**\r\n     * This function returns the explorer url of a block, transaction, account or token.\r\n     *\r\n     * @param value - An object containing the `block`, `transaction`, `account` or `erc20` to get the explorer url for.\r\n     *\r\n     * @example chain.getExplorerUrl({ block: 'block_here' }) // \"https://etherscan.io/block/block_here\"\r\n     * @example chain.getExplorerUrl({ transaction: 'some_transaction' }) // \"https://etherscan.io/tx/some_transaction\"\r\n     * @example chain.getExplorerUrl({ account: 'accoun_here' }) // \"https://etherscan.io/address/accoun_here\"\r\n     * @example chain.getExplorerUrl({ erc20: 'token_here' }) // \"https://etherscan.io/token/token_here\"\r\n     */\r\n    EvmChain.prototype.getExplorerPath = function (value) {\r\n        var explorer = this.explorer;\r\n        if (!explorer || explorer.standard !== 'EIP3091') {\r\n            return null;\r\n        }\r\n        var url = explorer.url;\r\n        // See https://eips.ethereum.org/EIPS/eip-3091 for paths\r\n        if ('block' in value) {\r\n            return \"\".concat(url, \"/block/\").concat(value.block);\r\n        }\r\n        if ('transaction' in value) {\r\n            return \"\".concat(url, \"/tx/\").concat(value.transaction);\r\n        }\r\n        if ('account' in value) {\r\n            return \"\".concat(url, \"/address/\").concat(value.account);\r\n        }\r\n        if ('erc20' in value) {\r\n            return \"\".concat(url, \"/token/\").concat(value.erc20);\r\n        }\r\n        return null;\r\n    };\r\n    Object.defineProperty(EvmChain.prototype, \"decimal\", {\r\n        /**\r\n         * Returns the decimal representation of the chain\r\n         * @example chain.decimal // 1\r\n         */\r\n        get: function () {\r\n            return parseInt(this._value, 16);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain.prototype, \"hex\", {\r\n        /**\r\n         * Returns the hex-string representation of the chain\r\n         * @example chain.hex // \"0x1\"\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain.prototype, \"apiHex\", {\r\n        /**\r\n         * Validate and cast to api compatible hex\r\n         *\r\n         * @example chain.apiHex // \"0x1\"\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain.prototype, \"name\", {\r\n        /**\r\n         * Returns the name of the chain\r\n         * @example chain.name // \"Ethereum\"\r\n         */\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.name;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain.prototype, \"currency\", {\r\n        /**\r\n         * Returns the currency of the chain\r\n         * @returns The cuurrency of the chain or undefined if not found\r\n         *\r\n         * @example chain.currency // EvmNativeCurrency\r\n         */\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.nativeCurrency;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain.prototype, \"rpcUrls\", {\r\n        /**\r\n         * Returns the rpc Urls of the chain\r\n         *\r\n         * @example chain.rpcUrls // [\"https://mainnet.infura.io/v3/<infura-key>\"]\r\n         */\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.rpc;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmChain.prototype, \"explorer\", {\r\n        /**\r\n         * Returns the explorer Urls of the chain\r\n         *\r\n         * @example chain.explorerUrls // [\"https://etherscan.io/\"]\r\n         */\r\n        get: function () {\r\n            var _a;\r\n            var explorers = (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.explorers;\r\n            if (!explorers || explorers.length === 0) {\r\n                return null;\r\n            }\r\n            return explorers[0];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the chain as a string.\r\n     * @returns The chain.\r\n     */\r\n    EvmChain.prototype.toJSON = function () {\r\n        return this.hex;\r\n    };\r\n    return EvmChain;\r\n}());\n\n/**\r\n * The Erc20Token class is a MoralisData that references to a Erc20 Token\r\n * It holds data about the data and metadata of an Erc20 token\r\n *\r\n * @category DataType\r\n */\r\nvar Erc20Token = /** @class */ (function () {\r\n    function Erc20Token(value) {\r\n        this._value = Erc20Token.parse(value);\r\n    }\r\n    /**\r\n     *  Create a new instance of Erc20Token from any valid Erc20Token input\r\n     *\r\n     * @param value - the Erc20Tokenish type\r\n     * @example\r\n     * ```ts\r\n     * const token = Erc20Token.create(value);\r\n     * ```\r\n     */\r\n    Erc20Token.create = function (value) {\r\n        if (value instanceof Erc20Token) {\r\n            return value;\r\n        }\r\n        return new Erc20Token(value);\r\n    };\r\n    /**\r\n     * Compares two Erc20Token instances. This checks if the chain and contractAddress of both tokens are equal.\r\n     *\r\n     * @param valueA - the first Erc20Token to compare\r\n     * @param valueB - the second Erc20Token to compare\r\n     * @returns true if the two Erc20Tokens are equal\r\n     * @example\r\n     * ```ts\r\n     * Erc20Token.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    Erc20Token.equals = function (valueA, valueB) {\r\n        var erc20A = Erc20Token.create(valueA);\r\n        var erc20B = Erc20Token.create(valueB);\r\n        if (!erc20A._value.chain.equals(erc20B._value.chain)) {\r\n            return false;\r\n        }\r\n        if (!erc20A._value.contractAddress.equals(erc20B._value.contractAddress)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares Erc20Token instance to current instance\r\n     *\r\n     * @param value - the Erc20Tokenish to compare\r\n     * @returns true if the Erc20Token is equals given token\r\n     * @example\r\n     * ```ts\r\n     * token.equals(value);\r\n     * ```\r\n     */\r\n    Erc20Token.prototype.equals = function (value) {\r\n        return Erc20Token.equals(this, value);\r\n    };\r\n    /**\r\n     * Returns the token as JSON\r\n     *\r\n     * @returns the Erc20Token as a JSON object\r\n     * @example\r\n     * ```ts\r\n     * token.toJSON();\r\n     * ```\r\n     */\r\n    Erc20Token.prototype.toJSON = function () {\r\n        var value = this._value;\r\n        return __assign(__assign({}, value), { contractAddress: value.contractAddress.toJSON(), chain: value.chain.toJSON() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    Erc20Token.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(Erc20Token.prototype, \"result\", {\r\n        /**\r\n         * Returns the processed Erc20Token.\r\n         *\r\n         * @returns the Erc20Token value\r\n         * @example\r\n         * ```ts\r\n         * token.result;\r\n         *  ```\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Token.prototype, \"decimals\", {\r\n        /**\r\n         * @returns the decimals of the token.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * token.decimals;\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.decimals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Token.prototype, \"name\", {\r\n        /**\r\n         * @returns The name of the token.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * token.name;\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.name;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Token.prototype, \"symbol\", {\r\n        /**\r\n         * @returns The symbol of the token.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * token.symbol;\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.symbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Token.prototype, \"contractAddress\", {\r\n        /**\r\n         * @returns The contract address of the token.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * token.contractAddress;\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.contractAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Token.prototype, \"chain\", {\r\n        /**\r\n         * @returns The chain of the token.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * token.chain;\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Token.prototype, \"logo\", {\r\n        /**\r\n         * @returns The logo of the token.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * token.logo;\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.logo;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Token.prototype, \"logoHash\", {\r\n        /**\r\n         * @returns The logo hash of the token.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * token.logoHash;\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.logoHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Token.prototype, \"thumbnail\", {\r\n        /**\r\n         * @returns The thumbnail of the token.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * token.thumbnail;\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.thumbnail;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Token.prototype, \"possibleSpam\", {\r\n        /**\r\n         * @returns possibility of the token being a spam token\r\n         * @example transfer.possibleSpam // true\r\n         */\r\n        get: function () {\r\n            return this._value.possibleSpam;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Erc20Token.parse = function (value) { return ({\r\n        decimals: +value.decimals,\r\n        name: value.name,\r\n        symbol: value.symbol,\r\n        contractAddress: EvmAddress.create(value.contractAddress),\r\n        logo: commonCore.maybe(value.logo),\r\n        logoHash: commonCore.maybe(value.logoHash),\r\n        thumbnail: commonCore.maybe(value.thumbnail),\r\n        chain: EvmChain.create(value.chain),\r\n        possibleSpam: value.possibleSpam,\r\n    }); };\r\n    return Erc20Token;\r\n}());\n\n/**\r\n * The Erc20Approval is a representation of an Erc20 token approval.\r\n *\r\n * @category DataType\r\n */\r\nvar Erc20Approval = /** @class */ (function () {\r\n    function Erc20Approval(data) {\r\n        this._data = Erc20Approval.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of Erc20Approval from any valid input\r\n     * @param data -  Erc20Approval instance or valid Erc20ApprovalInput\r\n     * @example\r\n     * ```\r\n     * const approval = Erc20Approval.create(data);\r\n     *```\r\n     */\r\n    Erc20Approval.create = function (data) {\r\n        if (data instanceof Erc20Approval) {\r\n            return data;\r\n        }\r\n        return new Erc20Approval(data);\r\n    };\r\n    /**\r\n     * Check the equality between two Erc20 approvals\r\n     * @param dataA - The first approval to compare\r\n     * @param dataB - The second approval to compare\r\n     * @example Erc20Approval.equals(dataA, dataB)\r\n     * @returns true if the approvals are equal, false otherwise\r\n     */\r\n    Erc20Approval.equals = function (dataA, dataB) {\r\n        var approvalA = Erc20Approval.create(dataA);\r\n        var approvalB = Erc20Approval.create(dataB);\r\n        return JSON.stringify(approvalA.toJSON()) === JSON.stringify(approvalB.toJSON());\r\n    };\r\n    /**\r\n     * Checks the equality of the current approval with another erc20 approval\r\n     * @param data - the approval to compare with\r\n     * @example approval.equals(data)\r\n     * @returns true if the approvals are equal, false otherwise\r\n     */\r\n    Erc20Approval.prototype.equals = function (data) {\r\n        return Erc20Approval.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON representation of the approval.\r\n     * @example approval.toJSON()\r\n     */\r\n    Erc20Approval.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), toWallet: data.toWallet.toJSON(), fromWallet: data.fromWallet.toJSON(), value: data.value.toString() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    Erc20Approval.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(Erc20Approval.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example approval.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"toWallet\", {\r\n        /**\r\n         * @returns the toWallet of the approval\r\n         * @example approval.toWallet // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.toWallet;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"fromWallet\", {\r\n        /**\r\n         * @returns the fromWallet of the approval\r\n         * @example approval.fromWallet // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.fromWallet;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"contractAddress\", {\r\n        /**\r\n         * @returns the contractAddress of the approval\r\n         * @example approval.contractAddress // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.contractAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"blockHash\", {\r\n        /**\r\n         * @returns the block hash of the approval\r\n         * @example approval.blockHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\r\n         */\r\n        get: function () {\r\n            return this._data.blockHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"blockNumber\", {\r\n        /**\r\n         * @returns the block number of the approval\r\n         * @example approval.blockNumber // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"blockTimestamp\", {\r\n        /**\r\n         * @returns the block timestamp of the approval\r\n         * @example approval.blockTimestamp // Date\r\n         */\r\n        get: function () {\r\n            return this._data.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"chain\", {\r\n        /**\r\n         * @returns the chain of the approval\r\n         * @example approval.chain // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"transactionHash\", {\r\n        /**\r\n         * @returns the transaction hash of the approval\r\n         * @example approval.transactionHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\r\n         */\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"value\", {\r\n        /**\r\n         * @returns the value of the approval\r\n         * @example approval.value // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"transactionIndex\", {\r\n        /**\r\n         * @returns the transactionIndex of the approval\r\n         * @example approval.transactionIndex // 3\r\n         */\r\n        get: function () {\r\n            return this._data.transactionIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"logIndex\", {\r\n        /**\r\n         * @returns the logIndex of the approval\r\n         * @example approval.logIndex // 2\r\n         */\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"possibleSpam\", {\r\n        /**\r\n         * @returns possibility of the token being a spam token\r\n         * @example transfer.possibleSpam // true\r\n         */\r\n        get: function () {\r\n            return this._data.possibleSpam;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"tokenName\", {\r\n        /**\r\n         * @returns The name of the token.\r\n         * @example burn.tokenName // \"Kylin Network\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"tokenLogo\", {\r\n        /**\r\n         * @returns The logo of the token\r\n         * @example burn.tokenLogo // \"https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenLogo;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"tokenSymbol\", {\r\n        /**\r\n         * @returns The symbol of the token.\r\n         * @example burn.tokenSymbol // \"KYL\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenSymbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Approval.prototype, \"tokenDecimals\", {\r\n        /**\r\n         * @returns The decimals of the token.\r\n         * @example burn.tokenDecimals // 18\r\n         */\r\n        get: function () {\r\n            return this._data.tokenDecimals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Erc20Approval.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), fromWallet: EvmAddress.create(data.fromWallet), toWallet: EvmAddress.create(data.toWallet), blockTimestamp: commonCore.dateInputToDate(data.blockTimestamp), blockNumber: commonCore.BigNumber.create(data.blockNumber), value: commonCore.BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) })); };\r\n    return Erc20Approval;\r\n}());\n\n/**\r\n * The Erc20Burn is a representation of an Erc20 token burn.\r\n *\r\n * @category DataType\r\n */\r\nvar Erc20Burn = /** @class */ (function () {\r\n    function Erc20Burn(data) {\r\n        this._data = Erc20Burn.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of Erc20Burn from any valid input\r\n     * @param data -  Erc20Burn instance or valid Erc20BurnInput\r\n     * @example\r\n     * ```\r\n     * const burn = Erc20Burn.create(data);\r\n     *```\r\n     */\r\n    Erc20Burn.create = function (data) {\r\n        if (data instanceof Erc20Burn) {\r\n            return data;\r\n        }\r\n        return new Erc20Burn(data);\r\n    };\r\n    /**\r\n     * Check the equality between two Erc20 burns\r\n     * @param dataA - The first burn to compare\r\n     * @param dataB - The second burn to compare\r\n     * @example Erc20Burn.equals(dataA, dataB)\r\n     * @returns true if the burns are equal, false otherwise\r\n     */\r\n    Erc20Burn.equals = function (dataA, dataB) {\r\n        var burnA = Erc20Burn.create(dataA);\r\n        var burnB = Erc20Burn.create(dataB);\r\n        return JSON.stringify(burnA.toJSON()) === JSON.stringify(burnB.toJSON());\r\n    };\r\n    /**\r\n     * Checks the equality of the current burn with another erc20 burn\r\n     * @param data - the burn to compare with\r\n     * @example burn.equals(data)\r\n     * @returns true if the burns are equal, false otherwise\r\n     */\r\n    Erc20Burn.prototype.equals = function (data) {\r\n        return Erc20Burn.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON representation of the burn.\r\n     * @example burn.toJSON()\r\n     */\r\n    Erc20Burn.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), fromWallet: data.fromWallet.toJSON(), value: data.value.toString() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    Erc20Burn.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(Erc20Burn.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example burn.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"fromWallet\", {\r\n        /**\r\n         * @returns the fromWallet of the burn\r\n         * @example burn.fromWallet // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.fromWallet;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"contractAddress\", {\r\n        /**\r\n         * @returns the contractAddress of the burn\r\n         * @example burn.contractAddress // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.contractAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"blockHash\", {\r\n        /**\r\n         * @returns the block hash of the burn\r\n         * @example burn.blockHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\r\n         */\r\n        get: function () {\r\n            return this._data.blockHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"blockNumber\", {\r\n        /**\r\n         * @returns the block number of the burn\r\n         * @example burn.blockNumber // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"blockTimestamp\", {\r\n        /**\r\n         * @returns the block timestamp of the burn\r\n         * @example burn.blockTimestamp // Date\r\n         */\r\n        get: function () {\r\n            return this._data.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"chain\", {\r\n        /**\r\n         * @returns the chain of the burn\r\n         * @example burn.chain // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"transactionHash\", {\r\n        /**\r\n         * @returns the transaction hash of the burn\r\n         * @example burn.transactionHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\r\n         */\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"value\", {\r\n        /**\r\n         * @returns the value of the burn\r\n         * @example burn.value // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"transactionIndex\", {\r\n        /**\r\n         * @returns the transactionIndex of the burn\r\n         * @example burn.transactionIndex // 3\r\n         */\r\n        get: function () {\r\n            return this._data.transactionIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"logIndex\", {\r\n        /**\r\n         * @returns the logIndex of the burn\r\n         * @example burn.logIndex // 2\r\n         */\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"tokenName\", {\r\n        /**\r\n         * @returns The name of the token.\r\n         * @example burn.tokenName // \"Kylin Network\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"tokenLogo\", {\r\n        /**\r\n         * @returns The logo of the token\r\n         * @example burn.tokenLogo // \"https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenLogo;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"tokenSymbol\", {\r\n        /**\r\n         * @returns The symbol of the token.\r\n         * @example burn.tokenSymbol // \"KYL\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenSymbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Burn.prototype, \"tokenDecimals\", {\r\n        /**\r\n         * @returns The decimals of the token.\r\n         * @example burn.tokenDecimals // 18\r\n         */\r\n        get: function () {\r\n            return this._data.tokenDecimals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Erc20Burn.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), fromWallet: EvmAddress.create(data.fromWallet), blockTimestamp: commonCore.dateInputToDate(data.blockTimestamp), blockNumber: commonCore.BigNumber.create(data.blockNumber), value: commonCore.BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) })); };\r\n    return Erc20Burn;\r\n}());\n\n/**\r\n * The Erc20Mint is a representation of an Erc20 token mint.\r\n *\r\n * @category DataType\r\n */\r\nvar Erc20Mint = /** @class */ (function () {\r\n    function Erc20Mint(data) {\r\n        this._data = Erc20Mint.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of Erc20Mint from any valid input\r\n     * @param data -  Erc20Mint instance or valid Erc20MintInput\r\n     * @example\r\n     * ```\r\n     * const mint = Erc20Mint.create(data);\r\n     *```\r\n     */\r\n    Erc20Mint.create = function (data) {\r\n        if (data instanceof Erc20Mint) {\r\n            return data;\r\n        }\r\n        return new Erc20Mint(data);\r\n    };\r\n    /**\r\n     * Check the equality between two Erc20 mints\r\n     * @param dataA - The first mint to compare\r\n     * @param dataB - The second mint to compare\r\n     * @example Erc20Mint.equals(dataA, dataB)\r\n     * @returns true if the mints are equal, false otherwise\r\n     */\r\n    Erc20Mint.equals = function (dataA, dataB) {\r\n        var mintA = Erc20Mint.create(dataA);\r\n        var mintB = Erc20Mint.create(dataB);\r\n        return JSON.stringify(mintA.toJSON()) === JSON.stringify(mintB.toJSON());\r\n    };\r\n    /**\r\n     * Checks the equality of the current mint with another erc20 mint\r\n     * @param data - the mint to compare with\r\n     * @example mint.equals(data)\r\n     * @returns true if the mints are equal, false otherwise\r\n     */\r\n    Erc20Mint.prototype.equals = function (data) {\r\n        return Erc20Mint.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON representation of the mint.\r\n     * @example mint.toJSON()\r\n     */\r\n    Erc20Mint.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), toWallet: data.toWallet.toJSON(), value: data.value.toString() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    Erc20Mint.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(Erc20Mint.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example mint.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"toWallet\", {\r\n        /**\r\n         * @returns the toWallet of the mint\r\n         * @example mint.toWallet // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.toWallet;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"contractAddress\", {\r\n        /**\r\n         * @returns the contractAddress of the mint\r\n         * @example mint.contractAddress // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.contractAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"blockHash\", {\r\n        /**\r\n         * @returns the block hash of the mint\r\n         * @example mint.blockHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\r\n         */\r\n        get: function () {\r\n            return this._data.blockHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"blockNumber\", {\r\n        /**\r\n         * @returns the block number of the mint\r\n         * @example mint.blockNumber // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"blockTimestamp\", {\r\n        /**\r\n         * @returns the block timestamp of the mint\r\n         * @example mint.blockTimestamp // Date\r\n         */\r\n        get: function () {\r\n            return this._data.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"chain\", {\r\n        /**\r\n         * @returns the chain of the mint\r\n         * @example mint.chain // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"transactionHash\", {\r\n        /**\r\n         * @returns the transaction hash of the mint\r\n         * @example mint.transactionHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\r\n         */\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"value\", {\r\n        /**\r\n         * @returns the value of the mint\r\n         * @example mint.value // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"transactionIndex\", {\r\n        /**\r\n         * @returns the transactionIndex of the mint\r\n         * @example mint.transactionIndex // 3\r\n         */\r\n        get: function () {\r\n            return this._data.transactionIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"logIndex\", {\r\n        /**\r\n         * @returns the logIndex of the mint\r\n         * @example mint.logIndex // 2\r\n         */\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"tokenName\", {\r\n        /**\r\n         * @returns The name of the token.\r\n         * @example burn.tokenName // \"Kylin Network\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"tokenLogo\", {\r\n        /**\r\n         * @returns The logo of the token\r\n         * @example burn.tokenLogo // \"https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenLogo;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"tokenSymbol\", {\r\n        /**\r\n         * @returns The symbol of the token.\r\n         * @example burn.tokenSymbol // \"KYL\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenSymbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Mint.prototype, \"tokenDecimals\", {\r\n        /**\r\n         * @returns The decimals of the token.\r\n         * @example burn.tokenDecimals // 18\r\n         */\r\n        get: function () {\r\n            return this._data.tokenDecimals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Erc20Mint.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), toWallet: EvmAddress.create(data.toWallet), blockTimestamp: commonCore.dateInputToDate(data.blockTimestamp), blockNumber: commonCore.BigNumber.create(data.blockNumber), value: commonCore.BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) })); };\r\n    return Erc20Mint;\r\n}());\n\n/**\r\n * The Erc20Transaction is a representation of an Erc20 token transaction.\r\n *\r\n * @category DataType\r\n */\r\nvar Erc20Transaction = /** @class */ (function () {\r\n    function Erc20Transaction(data) {\r\n        this._data = Erc20Transaction.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of Erc20Transaction from any valid input\r\n     * @param data - the Erc20Transactionish type\r\n     * @example\r\n     * ```\r\n     * const transfer = Erc20Transaction.create(data);\r\n     *```\r\n     */\r\n    Erc20Transaction.create = function (data) {\r\n        if (data instanceof Erc20Transaction) {\r\n            return data;\r\n        }\r\n        return new Erc20Transaction(data);\r\n    };\r\n    /**\r\n     * Check the equality between two Erc20 transfers\r\n     * @param dataA - The first transfer to compare\r\n     * @param dataB - The second transfer to compare\r\n     * @example Erc20Transaction.equals(dataA, dataB)\r\n     * @returns true if the transfers are equal, false otherwise\r\n     */\r\n    Erc20Transaction.equals = function (dataA, dataB) {\r\n        var tokenA = Erc20Transaction.create(dataA);\r\n        var tokenB = Erc20Transaction.create(dataB);\r\n        return JSON.stringify(tokenA.toJSON()) === JSON.stringify(tokenB.toJSON());\r\n    };\r\n    /**\r\n     * Checks the equality of the current trnasfer with another erc20 trnasfer\r\n     * @param data - the transfer to compare with\r\n     * @example transfer.equals(data)\r\n     * @returns true if the transfers are equal, false otherwise\r\n     */\r\n    Erc20Transaction.prototype.equals = function (data) {\r\n        return Erc20Transaction.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON represention of the transfer.\r\n     * @example transfer.toJSON()\r\n     */\r\n    Erc20Transaction.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), address: data.address.toJSON(), blockNumber: data.blockNumber.toString(), toAddress: data.toAddress.toJSON(), fromAddress: data.fromAddress.toJSON(), value: data.value.toString() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    Erc20Transaction.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(Erc20Transaction.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example transfer.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"address\", {\r\n        /**\r\n         * @returns the contract address of the transfer\r\n         * @example transfer.address // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.address;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"contractAddress\", {\r\n        /**\r\n         * @returns the contract address of the transfer\r\n         * @example transfer.contractAddress // EvmAddress\r\n         */\r\n        // Used since /erc20/transfers endpoints that return toAddress under a different name\r\n        get: function () {\r\n            return this._data.address;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"blockHash\", {\r\n        /**\r\n         * @returns the block hash of the transfer\r\n         * @example transfer.blockHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\r\n         */\r\n        get: function () {\r\n            return this._data.blockHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"blockNumber\", {\r\n        /**\r\n         * @returns the block number of the transfer\r\n         * @example transfer.blockNumber // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"blockTimestamp\", {\r\n        /**\r\n         * @returns the block timestamp of the transfer\r\n         * @example transfer.blockTimestamp // Date\r\n         */\r\n        get: function () {\r\n            return this._data.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"chain\", {\r\n        /**\r\n         * @returns the chain of the transfer\r\n         * @example transfer.chain // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"fromAddress\", {\r\n        /**\r\n         * @returns the from address of the transfer\r\n         * @example transfer.fromAddress // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.fromAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"fromWallet\", {\r\n        /**\r\n         * @returns the from address of the transfer\r\n         * @example transfer.fromWallet // EvmAddress\r\n         */\r\n        // Used since /erc20/transfers endpoints that return toAddress under a different name\r\n        get: function () {\r\n            return this._data.fromAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"toAddress\", {\r\n        /**\r\n         * @returns the to address of the transfer\r\n         * @example transfer.toAddress // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.toAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"toWallet\", {\r\n        /**\r\n         * @returns the to address of the transfer\r\n         * @example transfer.toWallet // EvmAddress\r\n         */\r\n        // Used since /erc20/transfers endpoints that return toAddress under a different name\r\n        get: function () {\r\n            return this._data.toAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"transactionHash\", {\r\n        /**\r\n         * @returns the transaction hash of the transfer\r\n         * @example transfer.transactionHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\r\n         */\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"value\", {\r\n        /**\r\n         * @returns the value of the transfer\r\n         * @example transfer.value // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"transactionIndex\", {\r\n        /**\r\n         * @returns the transactionIndex of the transfer\r\n         * @example transfer.transactionIndex // 3\r\n         */\r\n        get: function () {\r\n            return this._data.transactionIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"logIndex\", {\r\n        /**\r\n         * @returns the logIndex of the transfer\r\n         * @example transfer.logIndex // 2\r\n         */\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Transaction.prototype, \"possibleSpam\", {\r\n        /**\r\n         * @returns possibility of the token being a spam token\r\n         * @example transfer.possibleSpam // true\r\n         */\r\n        get: function () {\r\n            return this._data.possibleSpam;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Erc20Transaction.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain.create(data.chain), address: EvmAddress.create(data.address), blockTimestamp: commonCore.dateInputToDate(data.blockTimestamp), blockNumber: commonCore.BigNumber.create(data.blockNumber), toAddress: EvmAddress.create(data.toAddress), fromAddress: EvmAddress.create(data.fromAddress), value: commonCore.BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex) })); };\r\n    return Erc20Transaction;\r\n}());\n\nvar EVM_ERC20_DEFAULT_DECIMALS = 18;\r\n/**\r\n * The Erc20Value class is a MoralisData that references to a the value of an Erc20Token\r\n * It holds data about the data about the amount of tokens and the number of decimals.\r\n *\r\n * @category DataType\r\n */\r\nvar Erc20Value = /** @class */ (function () {\r\n    function Erc20Value(amount, options) {\r\n        var _this = this;\r\n        var _a, _b, _c;\r\n        /**\r\n         * Displays the token in text format\r\n         * @returns the value and also the token symbol if available\r\n         * @example value.display();\r\n         */\r\n        this.display = function () {\r\n            if (!_this._token) {\r\n                return \"\".concat(_this.value);\r\n            }\r\n            return \"\".concat(_this.value, \" \").concat(_this._token.symbol);\r\n        };\r\n        this._value = Erc20Value.parse({\r\n            amount: amount,\r\n            decimals: (_c = (_a = options === null || options === void 0 ? void 0 : options.decimals) !== null && _a !== void 0 ? _a : (_b = options === null || options === void 0 ? void 0 : options.token) === null || _b === void 0 ? void 0 : _b.decimals) !== null && _c !== void 0 ? _c : EVM_ERC20_DEFAULT_DECIMALS,\r\n            token: options === null || options === void 0 ? void 0 : options.token,\r\n        });\r\n        if (options === null || options === void 0 ? void 0 : options.token) {\r\n            this._token = Erc20Token.create(options.token);\r\n        }\r\n    }\r\n    /**\r\n     * Create a new instance of Erc20Value from any valid input\r\n     * @param value - The value to create\r\n     * @param options - The options for the token\r\n     * @example Erc20Value.create(1000, { decimals: 3 });\r\n     * @returns The created value\r\n     * @throws CoreError if the value is invalid\r\n     */\r\n    Erc20Value.create = function (value, options) {\r\n        if (value instanceof Erc20Value) {\r\n            return value;\r\n        }\r\n        return new Erc20Value(value, options);\r\n    };\r\n    /**\r\n     * Compares two Erc20Valueish instances.\r\n     * @param valueA - The first value to compare\r\n     * @param valueB - The second value to compare\r\n     * @returns True if the values are equal\r\n     * @example\r\n     * ```ts\r\n     * const valueA = Erc20Value.create(1000, { decimals: 3 });\r\n     * const valueB = Erc20Value.create(10000, { decimals: 4 });\r\n     * Erc20Value.equals(valueA, valueB); // true\r\n     * ```\r\n     */\r\n    Erc20Value.equals = function (valueA, valueB) {\r\n        var erc20ValueA = Erc20Value.create(valueA);\r\n        var erc20ValueB = Erc20Value.create(valueB);\r\n        return erc20ValueA.value === erc20ValueB.value;\r\n    };\r\n    /**\r\n     * Compares Erc20Value with current instance.\r\n     * @param value - The value to compare\r\n     * @returns True if the values are equal\r\n     * @example value.equals(valueA);\r\n     */\r\n    Erc20Value.prototype.equals = function (value) {\r\n        return Erc20Value.equals(this, value);\r\n    };\r\n    /**\r\n     * Convert the value to a number\r\n     * @returns the value in number format\r\n     * @example value.toNumber();\r\n     */\r\n    Erc20Value.prototype.toNumber = function () {\r\n        return +this.value;\r\n    };\r\n    /**\r\n     * Convert the value to a string\r\n     * @returns the value in string format\r\n     * @example value.toString();\r\n     */\r\n    Erc20Value.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    Erc20Value.prototype.format = function () {\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * Displays the token in JSON format\r\n     * @returns the value and also the token if available\r\n     * @example value.toJSON();\r\n     */\r\n    Erc20Value.prototype.toJSON = function () {\r\n        if (this.token) {\r\n            return { value: this.value, token: this.token.toJSON() };\r\n        }\r\n        return { value: this.value };\r\n    };\r\n    Object.defineProperty(Erc20Value.prototype, \"decimals\", {\r\n        /**\r\n         * @returns the token decimals\r\n         * @example value.decimals; // 15\r\n         */\r\n        get: function () {\r\n            return this._value.decimals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Value.prototype, \"amount\", {\r\n        /**\r\n         * @returns the token amount\r\n         * @example value.amount; // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._value.amount;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Value.prototype, \"value\", {\r\n        /**\r\n         * @returns the token value\r\n         * @example value.value; // \"1000\"\r\n         */\r\n        get: function () {\r\n            return this._value.amount.toDecimal(this.decimals);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Erc20Value.prototype, \"token\", {\r\n        /**\r\n         * @returns the token\r\n         * @example value.token; // Erc20Token\r\n         */\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this._token) !== null && _a !== void 0 ? _a : null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Erc20Value.parse = function (_a) {\r\n        var amount = _a.amount, decimals = _a.decimals, token = _a.token;\r\n        if (token && token.decimals && +token.decimals !== +decimals) {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_DATA,\r\n                message: 'Decimals do not match',\r\n            });\r\n        }\r\n        return {\r\n            amount: commonCore.BigNumber.create(amount),\r\n            decimals: +decimals,\r\n        };\r\n    };\r\n    return Erc20Value;\r\n}());\n\nvar unitToDecimals = {\r\n    ether: 18,\r\n    finney: 15,\r\n    szabo: 12,\r\n    gwei: 9,\r\n    mwei: 6,\r\n    kwei: 3,\r\n    wei: 0,\r\n};\r\n/**\r\n * The EvmNative class is a MoralisData that references to the value of an EVM native currency (like ETH, BNB etc.)\r\n *\r\n * @category DataType\r\n */\r\nvar EvmNative = /** @class */ (function () {\r\n    function EvmNative(native, unit) {\r\n        if (unit === void 0) { unit = 'ether'; }\r\n        this.rawValue = EvmNative.parse(native, unit);\r\n    }\r\n    Object.defineProperty(EvmNative, \"ONE_ETH\", {\r\n        /**\r\n         * Returns value of one ether.\r\n         *\r\n         * @example EvmNative.ONE_ETH\r\n         */\r\n        get: function () {\r\n            return EvmNative.create(1, 'ether');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNative, \"ONE_GWEI\", {\r\n        /**\r\n         * Returns value of one gwei.\r\n         *\r\n         * @example EvmNative.ONE_GWEI\r\n         */\r\n        get: function () {\r\n            return EvmNative.create(1, 'gwei');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNative, \"ONE_WEI\", {\r\n        /**\r\n         * Returns value of one wei.\r\n         *\r\n         * @example EvmNative.ONE_WEI\r\n         */\r\n        get: function () {\r\n            return EvmNative.create(1, 'wei');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create a new instance of EvmNative from any valid {@link EvmNativeish} value.\r\n     * @param native - the value to create the EvmNative from\r\n     * @param unit - the unit of the value (optional), defaults to `ether`\r\n     * @returns a new instance of EvmNative\r\n     * @example\r\n     * ```ts\r\n     * const native = EvmNative.create(2, 'gwei');\r\n     * const native = EvmNative.create(2);\r\n     * const native = EvmNative.create(2, 'wei');\r\n     *```\r\n     */\r\n    EvmNative.create = function (native, unit) {\r\n        if (native instanceof EvmNative) {\r\n            return native;\r\n        }\r\n        return new EvmNative(native, unit);\r\n    };\r\n    EvmNative.fromJSON = function (json) {\r\n        return EvmNative.create(json, 'wei');\r\n    };\r\n    EvmNative.parse = function (native, unit) {\r\n        var decimals;\r\n        if (typeof unit === 'number') {\r\n            decimals = unit;\r\n        }\r\n        else {\r\n            if (unitToDecimals[unit] == null) {\r\n                throw new commonCore.CoreError({\r\n                    code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                    message: 'Unit should be a decimal number or valid EvmNativeUnit string',\r\n                });\r\n            }\r\n            decimals = unitToDecimals[unit];\r\n        }\r\n        return commonCore.BigNumber.fromDecimal(native.toString(), decimals);\r\n    };\r\n    /**\r\n     * Compares two EvmNative values.\r\n     * @param valueA - the first value to compare\r\n     * @param valueB - the second value to compare\r\n     * @returns true if the values are equal\r\n     * @example\r\n     * ```ts\r\n     * EvmNative.equals(EvmNative.create(1, 'ether'), EvmNative.create(1, 'ether')); // true\r\n     * ```\r\n     */\r\n    EvmNative.equals = function (valueA, valueB) {\r\n        var evmNativeA = EvmNative.create(valueA);\r\n        var evmNativeB = EvmNative.create(valueB);\r\n        return evmNativeA.rawValue.equals(evmNativeB.rawValue);\r\n    };\r\n    /**\r\n     * Compares EvmNative with current instance.\r\n     * @param value - the value to compare with\r\n     * @returns true if the values are equal\r\n     * @example\r\n     * ```ts\r\n     * const native = EvmNative.create(1, 'gwei');\r\n     * native.equals(EvmNative.create(1, 'ether')); // false\r\n     * ```\r\n     */\r\n    EvmNative.prototype.equals = function (value) {\r\n        return EvmNative.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the EvmNative to a string.\r\n     * @returns the value of the EvmNative as a string\r\n     * @example `native.toString()`\r\n     */\r\n    EvmNative.prototype.toString = function () {\r\n        return this.wei;\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmNative.prototype.format = function () {\r\n        return this.toString();\r\n    };\r\n    Object.defineProperty(EvmNative.prototype, \"value\", {\r\n        /**\r\n         * @returns the value of the EvmNative as a BigNumber\r\n         * @example `native.value`\r\n         */\r\n        get: function () {\r\n            return this.rawValue;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNative.prototype, \"wei\", {\r\n        /**\r\n         * Converts the EvmNative to a string representation of the value in wei.\r\n         * @returns the value of the EvmNative as a string\r\n         * @example `native.wei`\r\n         */\r\n        get: function () {\r\n            return this.value.toString();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNative.prototype, \"gwei\", {\r\n        /**\r\n         * Converts the EvmNative to a string representation of the value in gwei.\r\n         * @returns the value of the EvmNative as a string\r\n         * @example `native.gwei`\r\n         */\r\n        get: function () {\r\n            return this.rawValue.toDecimal(unitToDecimals['gwei']);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNative.prototype, \"ether\", {\r\n        /**\r\n         * Converts the EvmNative to a string representation of the value in ether.\r\n         * @returns the value of the EvmNative as a string\r\n         * @example `native.ether`\r\n         */\r\n        get: function () {\r\n            return this.rawValue.toDecimal(unitToDecimals['ether']);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmNative.prototype.toJSON = function () {\r\n        return this.toString();\r\n    };\r\n    return EvmNative;\r\n}());\n\n/**\r\n * The EvmTransactionLog class is a MoralisData that references an EVM transaction log.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmTransactionLog = /** @class */ (function () {\r\n    function EvmTransactionLog(value) {\r\n        this._value = EvmTransactionLog.parse(value);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmTransactionLog from any valid address input\r\n     *\r\n     * @example\r\n     * ```\r\n     * const log = EvmTransactionLog.create(value, core);\r\n     * ```\r\n     * @param value - A valid EvmTransactionLogish\r\n     * @param core - The Core instance\r\n     */\r\n    EvmTransactionLog.create = function (value) {\r\n        if (value instanceof EvmTransactionLog) {\r\n            return value;\r\n        }\r\n        return new EvmTransactionLog(value);\r\n    };\r\n    EvmTransactionLog.parse = function (value) {\r\n        return {\r\n            chain: EvmChain.create(value.chain),\r\n            logIndex: commonCore.maybe(value.logIndex, function (index) { return +index; }),\r\n            transactionHash: value.transactionHash,\r\n            transactionIndex: commonCore.maybe(value.transactionIndex),\r\n            data: value.data,\r\n            topics: value.topics,\r\n            blockHash: value.blockHash,\r\n            blockNumber: value.blockNumber,\r\n            blockTimestamp: value.blockTimestamp,\r\n            address: EvmAddress.create(value.address),\r\n        };\r\n    };\r\n    /**\r\n     * Compares the log to another log for equality.\r\n     *\r\n     * @param value - The value to compare with\r\n     * @returns true if the logs are equal, otherwise false\r\n     * @example\r\n     * ```ts\r\n     * log.equals(log);\r\n     * ```\r\n     */\r\n    EvmTransactionLog.prototype.equals = function (value) {\r\n        return (value._value.transactionHash === this._value.transactionHash &&\r\n            value._value.address.equals(this._value.address) &&\r\n            value._value.logIndex === this._value.logIndex &&\r\n            value._value.chain.equals(this._value.chain));\r\n    };\r\n    /**\r\n     * Converts the log to a JSON object.\r\n     *\r\n     * @returns the EvmTransactionLog as a JSON object\r\n     * @example\r\n     * ```ts\r\n     * log.toJSON();\r\n     * ```\r\n     */\r\n    EvmTransactionLog.prototype.toJSON = function () {\r\n        var value = this._value;\r\n        return __assign(__assign({}, value), { address: value.address.toJSON(), chain: value.chain.toJSON() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmTransactionLog.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"result\", {\r\n        /**\r\n         * Returns the processed Erc20Token.\r\n         *\r\n         * @returns the EvmTransactionLog value\r\n         * @example\r\n         * ```ts\r\n         * log.result;\r\n         *  ```\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"transactionHash\", {\r\n        /**\r\n         * @returns the transaction hash of the log.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * log.transactionHash; // \"0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5\"\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"address\", {\r\n        /**\r\n         * Returns the address of the log.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * log.address; // EvmAddress\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.address;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"chain\", {\r\n        /**\r\n         * Returns the chain of the log.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * log.chain; // EvmChain\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"logIndex\", {\r\n        /**\r\n         * @returns the log index of the log.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * log.logIndex; // 273\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"data\", {\r\n        /**\r\n         * @returns the data of the log.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * log.data; // \"0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443\"\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"topics\", {\r\n        /**\r\n         * @returns the topics of the log.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * log.topic0; // [\"0x0000000000000000000000000000000000000000000000000000000000000001\", \"0x0000000000000000000000000000000000000000000000000000000000000002\"]\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.topics;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"blockHash\", {\r\n        /**\r\n         * @returns the block hash of the log.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * log.blockHash; // \"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171\"\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.blockHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"blockNumber\", {\r\n        /**\r\n         * @returns the block number of the log.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * log.blockNumber; // 12386788\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionLog.prototype, \"blockTimestamp\", {\r\n        /**\r\n         * @returns the block timestamp of the log.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * log.blockTimestamp; // \"2021-05-07T11:08:35.000Z\"\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._value.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return EvmTransactionLog;\r\n}());\n\n/**\r\n * Represents of a signed EVM signature\r\n * Can be created with a valid r,s,v signature or a hex string\r\n */\r\nvar EvmSignature = /** @class */ (function () {\r\n    function EvmSignature(data) {\r\n        this._data = EvmSignature.parse(data);\r\n    }\r\n    EvmSignature.create = function (data) {\r\n        if (data instanceof EvmSignature) {\r\n            return data;\r\n        }\r\n        return new EvmSignature(data);\r\n    };\r\n    EvmSignature.equals = function (dataA, dataB) {\r\n        var signatureA = EvmSignature.create(dataA);\r\n        var signatureB = EvmSignature.create(dataB);\r\n        return signatureA.serialized === signatureB.serialized;\r\n    };\r\n    /**\r\n     * Checks the equality of the current transfer instance with another nft transfer\r\n     * @param data - the transfer to compare with\r\n     * @example transaction.equals(data)\r\n     * @returns true if the transfers are equal, false otherwise\r\n     */\r\n    EvmSignature.prototype.equals = function (data) {\r\n        return EvmSignature.equals(this, data);\r\n    };\r\n    Object.defineProperty(EvmSignature.prototype, \"r\", {\r\n        get: function () {\r\n            return this._data.r;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmSignature.prototype, \"s\", {\r\n        get: function () {\r\n            return this._data.s;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmSignature.prototype, \"v\", {\r\n        get: function () {\r\n            return this._data.v;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmSignature.prototype, \"serialized\", {\r\n        get: function () {\r\n            return bytes.joinSignature(this._data);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmSignature.prototype.toJSON = function () {\r\n        return {\r\n            r: this.r,\r\n            s: this.s,\r\n            v: this.v.toString(),\r\n        };\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmSignature.prototype.format = function () {\r\n        return this.serialized;\r\n    };\r\n    EvmSignature.parse = function (data) {\r\n        if (typeof data === 'string') {\r\n            return bytes.splitSignature(data);\r\n        }\r\n        return bytes.splitSignature({\r\n            r: bytes.hexlify(commonCore.BigNumber.create(data.r).toBigInt()),\r\n            s: bytes.hexlify(commonCore.BigNumber.create(data.s).toBigInt()),\r\n            v: +data.v,\r\n        });\r\n    };\r\n    return EvmSignature;\r\n}());\n\n/**\r\n * The EvmTranaction is a representation of a published transaction.\r\n *\r\n * Use this class any time you work with a transaction.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmInternalTransaction = /** @class */ (function () {\r\n    function EvmInternalTransaction(data) {\r\n        this._data = EvmInternalTransaction.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmInternalTransaction from any valid transaction input\r\n     * @param data - the EvmInternalTransactionish type\r\n     * @example\r\n     * ```\r\n     * const transaction = EvmInternalTransaction.create(data);\r\n     *```\r\n     */\r\n    EvmInternalTransaction.create = function (data) {\r\n        if (data instanceof EvmInternalTransaction) {\r\n            return data;\r\n        }\r\n        return new EvmInternalTransaction(data);\r\n    };\r\n    /**\r\n     * Check the equality between two Evm internal transactions\r\n     * @param dataA - The first transaction\r\n     * @param dataB - The second transaction\r\n     * @example\r\n     * ```ts\r\n     * EvmInternalTransaction.equals(dataA, dataB)\r\n     * ```\r\n     */\r\n    EvmInternalTransaction.equals = function (dataA, dataB) {\r\n        var transactionA = EvmInternalTransaction.create(dataA);\r\n        var transactionB = EvmInternalTransaction.create(dataB);\r\n        if (!transactionA._data.chain.equals(transactionB._data.chain)) {\r\n            return false;\r\n        }\r\n        if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks the equality of the current transaction with another evm transaction\r\n     * @param data - the transaction to compare with\r\n     * @example\r\n     * ```ts\r\n     * transaction.equals(data)\r\n     * ```\r\n     */\r\n    EvmInternalTransaction.prototype.equals = function (data) {\r\n        return EvmInternalTransaction.equals(this, data);\r\n    };\r\n    EvmInternalTransaction.prototype.toJSON = function () {\r\n        var _a, _b, _c, _d, _e, _f, _g;\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { to: (_a = data.to) === null || _a === void 0 ? void 0 : _a.toJSON(), from: (_b = data.from) === null || _b === void 0 ? void 0 : _b.toJSON(), gas: (_c = data.gas) === null || _c === void 0 ? void 0 : _c.toString(), gasUsed: (_d = data.gasUsed) === null || _d === void 0 ? void 0 : _d.toString(), value: (_e = data.value) === null || _e === void 0 ? void 0 : _e.toString(), chain: (_f = data.chain) === null || _f === void 0 ? void 0 : _f.toJSON(), blockNumber: (_g = data.blockNumber) === null || _g === void 0 ? void 0 : _g.toString() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmInternalTransaction.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"result\", {\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"transactionHash\", {\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"blockNumber\", {\r\n        get: function () {\r\n            return this._data.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"blockHash\", {\r\n        get: function () {\r\n            return this._data.blockHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"type\", {\r\n        get: function () {\r\n            return this._data.type;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"from\", {\r\n        get: function () {\r\n            return this._data.from;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"to\", {\r\n        get: function () {\r\n            return this._data.to;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"value\", {\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"gas\", {\r\n        get: function () {\r\n            return this._data.gas;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"gasUsed\", {\r\n        get: function () {\r\n            return this._data.gasUsed;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"input\", {\r\n        get: function () {\r\n            return this._data.input;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmInternalTransaction.prototype, \"output\", {\r\n        get: function () {\r\n            return this._data.output;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmInternalTransaction.parse = function (data) { return ({\r\n        chain: EvmChain.create(data.chain),\r\n        from: EvmAddress.create(data.from),\r\n        to: EvmAddress.create(data.to),\r\n        transactionHash: data.transactionHash,\r\n        gas: commonCore.BigNumber.create(data.gas),\r\n        gasUsed: commonCore.BigNumber.create(data.gasUsed),\r\n        blockNumber: commonCore.BigNumber.create(data.blockNumber),\r\n        blockHash: data.blockHash,\r\n        input: data.input,\r\n        output: data.output,\r\n        value: commonCore.BigNumber.create(data.value),\r\n        type: data.type,\r\n    }); };\r\n    return EvmInternalTransaction;\r\n}());\n\n/**\r\n * The EvmTransaction is a representation of a published transaction.\r\n *\r\n * Use this class any time you work with a transaction.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmTransaction = /** @class */ (function () {\r\n    function EvmTransaction(data) {\r\n        this._data = EvmTransaction.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmTransaction from any valid transaction input\r\n     * @param data - the EvmTransactionish type\r\n     * @example\r\n     * ```\r\n     * const transaction = EvmTransaction.create(data);\r\n     *```\r\n     */\r\n    EvmTransaction.create = function (data) {\r\n        if (data instanceof EvmTransaction) {\r\n            return data;\r\n        }\r\n        return new EvmTransaction(data);\r\n    };\r\n    EvmTransaction.parse = function (data) {\r\n        var _a, _b;\r\n        return {\r\n            from: EvmAddress.create(data.from),\r\n            to: commonCore.maybe(data.to, function (to) { return EvmAddress.create(to); }),\r\n            nonce: commonCore.maybe(data.nonce, commonCore.BigNumber.create),\r\n            data: commonCore.maybe(data.data),\r\n            value: commonCore.maybe(data.value, function (val) { return EvmNative.create(val, 'wei'); }),\r\n            hash: data.hash,\r\n            chain: EvmChain.create(data.chain),\r\n            gas: commonCore.maybe(data.gas, commonCore.BigNumber.create),\r\n            gasPrice: commonCore.BigNumber.create(data.gasPrice),\r\n            index: +data.index,\r\n            blockNumber: commonCore.BigNumber.create(data.blockNumber),\r\n            blockHash: data.blockHash,\r\n            blockTimestamp: commonCore.dateInputToDate(data.blockTimestamp),\r\n            cumulativeGasUsed: commonCore.BigNumber.create(data.cumulativeGasUsed),\r\n            gasUsed: commonCore.BigNumber.create(data.gasUsed),\r\n            contractAddress: commonCore.maybe(data.contractAddress, function (address) { return EvmAddress.create(address); }),\r\n            receiptRoot: commonCore.maybe(data.receiptRoot),\r\n            receiptStatus: commonCore.maybe(data.receiptStatus, function (status) { return +status; }),\r\n            logs: ((_a = data.logs) !== null && _a !== void 0 ? _a : []).map(function (log) { return EvmTransactionLog.create(log); }),\r\n            internalTransactions: ((_b = data.internalTransactions) !== null && _b !== void 0 ? _b : []).map(function (transaction) {\r\n                return EvmInternalTransaction.create(transaction);\r\n            }),\r\n            signature: commonCore.maybe(data.signature, EvmSignature.create),\r\n        };\r\n    };\r\n    /**\r\n     * Check the equality between two Evm transactions\r\n     * @param dataA - The first transaction\r\n     * @param dataB - The second transaction\r\n     * @example\r\n     * ```ts\r\n     * EvmTransaction.equals(dataA, dataB)\r\n     * ```\r\n     */\r\n    EvmTransaction.equals = function (dataA, dataB) {\r\n        var transactionA = EvmTransaction.create(dataA);\r\n        var transactionB = EvmTransaction.create(dataB);\r\n        if (!transactionA._data.chain.equals(transactionB._data.chain)) {\r\n            return false;\r\n        }\r\n        if (transactionA._data.hash !== transactionB._data.hash) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks the equality of the current transaction with another evm transaction\r\n     * @param data - the transaction to compare with\r\n     * @example\r\n     * ```ts\r\n     * transaction.equals(data)\r\n     * ```\r\n     */\r\n    EvmTransaction.prototype.equals = function (data) {\r\n        return EvmTransaction.equals(this, data);\r\n    };\r\n    EvmTransaction.prototype.toJSON = function () {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { to: (_a = data.to) === null || _a === void 0 ? void 0 : _a.toJSON(), from: (_b = data.from) === null || _b === void 0 ? void 0 : _b.toJSON(), nonce: (_c = data.nonce) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), gasPrice: (_e = data.gasPrice) === null || _e === void 0 ? void 0 : _e.toString(), gasUsed: (_f = data.gasUsed) === null || _f === void 0 ? void 0 : _f.toString(), cumulativeGasUsed: (_g = data.cumulativeGasUsed) === null || _g === void 0 ? void 0 : _g.toString(), value: (_h = data.value) === null || _h === void 0 ? void 0 : _h.toString(), chain: (_j = data.chain) === null || _j === void 0 ? void 0 : _j.toJSON(), contractAddress: (_k = data.contractAddress) === null || _k === void 0 ? void 0 : _k.toJSON(), logs: data.logs.map(function (log) { return log.toJSON(); }), internalTransactions: data.internalTransactions.map(function (transaction) { return transaction.toJSON(); }), signature: (_l = data.signature) === null || _l === void 0 ? void 0 : _l.toJSON(), blockNumber: (_m = data.blockNumber) === null || _m === void 0 ? void 0 : _m.toString(), blockTimestamp: data.blockTimestamp.toString() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmTransaction.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmTransaction.prototype, \"result\", {\r\n        /**\r\n         * @returns the transaction\r\n         * @example\r\n         * ```\r\n         * transaction.result\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"to\", {\r\n        /**\r\n         * @returns the transaction to address\r\n         * @example\r\n         * ```\r\n         * transaction.to // EvmAddress\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.to;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"from\", {\r\n        /**\r\n         * @returns the transaction from address\r\n         * @example\r\n         * ```\r\n         * transaction.address // EvmAddress\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.from;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"nonce\", {\r\n        /**\r\n         * @returns the transaction nonce\r\n         * @example\r\n         * ```\r\n         * transaction.nonce // 326595425\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.nonce;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"gas\", {\r\n        /**\r\n         * @returns the transaction gas\r\n         * @example\r\n         * ```\r\n         * transaction.gas // 6721975\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.gas;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"gasPrice\", {\r\n        /**\r\n         * @returns the transaction gas price\r\n         * @example\r\n         * ```\r\n         * transaction.gasPrice // 20000000000\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.gasPrice;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"gasUsed\", {\r\n        /**\r\n         * @returns the transaction gas used\r\n         * @example\r\n         * ```\r\n         * transaction.gasUsed // 1340925\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.gasUsed;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"cumulativeGasUsed\", {\r\n        /**\r\n         * @returns the transaction cumulative gas used\r\n         * @example\r\n         * ```\r\n         * transaction.cumulativeGasUsed // 1340925\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.cumulativeGasUsed;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"blockNumber\", {\r\n        /**\r\n         * @returns the transaction block number\r\n         * @example\r\n         * ```\r\n         * transaction.blockNumber // 12526958\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"value\", {\r\n        /**\r\n         * @returns the transaction value\r\n         * @example\r\n         * ```\r\n         * transaction.value // EvmNative\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"chain\", {\r\n        /**\r\n         * @returns the transaction chain\r\n         * @example\r\n         * ```\r\n         * transaction.chain // EvmChain\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"contractAddress\", {\r\n        /**\r\n         * @returns the transaction contract address\r\n         * @example\r\n         * ```\r\n         * transaction.contractAddress // EvmAddress\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.contractAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"internalTransactions\", {\r\n        /**\r\n         * @returns the internal transactions\r\n         * @example\r\n         * ```\r\n         * transaction.logs // EvmInternalTransaction[]\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.internalTransactions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"logs\", {\r\n        /**\r\n         * @returns the transaction logs\r\n         * @example\r\n         * ```\r\n         * transaction.logs // EvmTransactionLog[]\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.logs;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"receiptRoot\", {\r\n        /**\r\n         * @returns the transaction receipt root\r\n         * @example\r\n         * ```\r\n         * transaction.receiptRoot // string\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.receiptRoot;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"receiptStatus\", {\r\n        /**\r\n         * @returns the transaction receipt status\r\n         * @example\r\n         * ```\r\n         * transaction.receiptStatus // 1\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.receiptStatus;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"data\", {\r\n        /**\r\n         * @returns the transaction data\r\n         * @example\r\n         * ```\r\n         * transaction.data // 0x000000000000000000000000000000000000000000000000000000000000002\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"hash\", {\r\n        /**\r\n         * @returns the transaction hash\r\n         * @example\r\n         * ```\r\n         * transaction.hash // 0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.hash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"blockHash\", {\r\n        /**\r\n         * @returns the transaction black hash\r\n         * @example\r\n         * ```\r\n         * transaction.blockHash // 0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.blockHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"blockTimestamp\", {\r\n        /**\r\n         * @returns the transaction block timestamp\r\n         * @example\r\n         * ```\r\n         * transaction.blockTimestamp // Date\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"signature\", {\r\n        /**\r\n         * @returns the signature (if available)\r\n         * @example\r\n         * ```\r\n         * transaction.signature // EvmSignature\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.signature;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"index\", {\r\n        /**\r\n         * @returns the index\r\n         * @example\r\n         * ```\r\n         * transaction.index // 1\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.index;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"v\", {\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this._data.signature) === null || _a === void 0 ? void 0 : _a.v;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"r\", {\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this._data.signature) === null || _a === void 0 ? void 0 : _a.r;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransaction.prototype, \"s\", {\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this._data.signature) === null || _a === void 0 ? void 0 : _a.s;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return EvmTransaction;\r\n}());\n\n/**\r\n * The EvmSimpleBlock is a representation of a block.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmSimpleBlock = /** @class */ (function () {\r\n    function EvmSimpleBlock(data) {\r\n        this._data = EvmSimpleBlock.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmSimpleBlock from any valid transaction input\r\n     * @param data - the EvmSimpleBlockish type\r\n     * @example const transaction = EvmSimpleBlock.create(data);\r\n     */\r\n    EvmSimpleBlock.create = function (data) {\r\n        if (data instanceof EvmSimpleBlock) {\r\n            return data;\r\n        }\r\n        return new EvmSimpleBlock(data);\r\n    };\r\n    /**\r\n     * Check the equality between two Evm blocks. It compares their hashes and blocks.\r\n     * @param dataA - The first block to compare\r\n     * @param dataB - The second block to compare\r\n     * @example EvmSimpleBlock.equals(dataA, dataB)\r\n     */\r\n    EvmSimpleBlock.equals = function (dataA, dataB) {\r\n        var blockA = EvmSimpleBlock.create(dataA);\r\n        var blockB = EvmSimpleBlock.create(dataB);\r\n        if (!blockA.chain.equals(blockB.chain)) {\r\n            return false;\r\n        }\r\n        if (blockA.hash !== blockB.hash) {\r\n            return false;\r\n        }\r\n        if (!blockA.number.equals(blockB.number)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks the equality of the current block with another evm block\r\n     * @param data - the block to compare with\r\n     * @example\r\n     * ```ts\r\n     * block.equals(data)\r\n     * ```\r\n     */\r\n    EvmSimpleBlock.prototype.equals = function (data) {\r\n        return EvmSimpleBlock.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON represention of the block.\r\n     * @example\r\n     * ```\r\n     * block.toJSON()\r\n     * ```\r\n     */\r\n    EvmSimpleBlock.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { number: data.number.toString(), chain: data.chain.toJSON() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmSimpleBlock.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmSimpleBlock.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example block.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmSimpleBlock.prototype, \"number\", {\r\n        /**\r\n         * @returns the block number.\r\n         * @example block.number // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.number;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmSimpleBlock.prototype, \"hash\", {\r\n        /**\r\n         * @returns the block hash.\r\n         * @example block.hash // \"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171\"\r\n         */\r\n        get: function () {\r\n            return this._data.hash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmSimpleBlock.prototype, \"timestamp\", {\r\n        /**\r\n         * @returns the block timestamp.\r\n         * @example block.timestamp // Date\r\n         */\r\n        get: function () {\r\n            return this._data.timestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmSimpleBlock.prototype, \"chain\", {\r\n        /**\r\n         * @returns the block chain.\r\n         * @example block.chain // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmSimpleBlock.parse = function (data) { return ({\r\n        timestamp: commonCore.dateInputToDate(data.timestamp),\r\n        number: commonCore.BigNumber.create(data.number),\r\n        chain: EvmChain.create(data.chain),\r\n        hash: data.hash,\r\n    }); };\r\n    return EvmSimpleBlock;\r\n}());\n\n/**\r\n * The EvmBlock is a representation of a block.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmBlock = /** @class */ (function () {\r\n    function EvmBlock(data) {\r\n        this._data = EvmBlock.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmBlock from any valid transaction input\r\n     * @param data - the EvmBlockish type\r\n     * @example const transaction = EvmTransaction.create(data);\r\n     */\r\n    EvmBlock.create = function (data) {\r\n        if (data instanceof EvmBlock) {\r\n            return data;\r\n        }\r\n        return new EvmBlock(data);\r\n    };\r\n    /**\r\n     * Check the equality between two Evm blocks. It compares their hashes and blocks.\r\n     * @param dataA - The first block to compare\r\n     * @param dataB - The second block to compare\r\n     * @example EvmTransaction.equals(dataA, dataB)\r\n     */\r\n    EvmBlock.equals = function (dataA, dataB) {\r\n        var blockA = EvmSimpleBlock.create(dataA);\r\n        var blockB = EvmSimpleBlock.create(dataB);\r\n        if (!blockA.chain.equals(blockB.chain)) {\r\n            return false;\r\n        }\r\n        if (blockA.hash !== blockB.hash) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks the equality of the current block with another evm block\r\n     * @param data - the block to compare with\r\n     * @example\r\n     * ```ts\r\n     * block.equals(data)\r\n     * ```\r\n     */\r\n    EvmBlock.prototype.equals = function (data) {\r\n        return EvmBlock.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON represention of the block.\r\n     * @example\r\n     * ```\r\n     * block.toJSON()\r\n     * ```\r\n     */\r\n    EvmBlock.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { number: data.number.toString(), difficulty: data.difficulty.toString(), totalDifficulty: data.totalDifficulty.toString(), size: data.size.toString(), gasLimit: data.gasLimit.toString(), gasUsed: data.gasUsed.toString(), chain: data.chain.toJSON(), miner: data.miner.toJSON(), transactions: data.transactions.map(function (transaction) { return transaction.toJSON(); }) });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmBlock.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmBlock.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example block.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"number\", {\r\n        /**\r\n         * @returns the block number.\r\n         * @example block.number // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.number;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"hash\", {\r\n        /**\r\n         * @returns the block hash.\r\n         * @example block.hash // \"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171\"\r\n         */\r\n        get: function () {\r\n            return this._data.hash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"timestamp\", {\r\n        /**\r\n         * @returns the block timestamp.\r\n         * @example block.timestamp // Date\r\n         */\r\n        get: function () {\r\n            return this._data.timestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"miner\", {\r\n        /**\r\n         * @returns the block miner.\r\n         * @example block.miner // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.miner;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"difficulty\", {\r\n        /**\r\n         * @returns the block difficulty.\r\n         * @example block.difficulty // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.difficulty;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"totalDifficulty\", {\r\n        /**\r\n         * @returns the block total difficulty.\r\n         * @example block.totalDifficulty // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.totalDifficulty;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"size\", {\r\n        /**\r\n         * @returns the block size.\r\n         * @example block.size // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.size;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"gasLimit\", {\r\n        /**\r\n         * @returns the block gas limit.\r\n         * @example block.gasLimit // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.gasLimit;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"gasUsed\", {\r\n        /**\r\n         * @returns the block gas used.\r\n         * @example block.gasUsed // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.gasUsed;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"transactions\", {\r\n        /**\r\n         * @returns the block transactions.\r\n         * @example block.transactions // EvmTransaction[]\r\n         */\r\n        get: function () {\r\n            return this._data.transactions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"chain\", {\r\n        /**\r\n         * @returns the block chain.\r\n         * @example block.chain // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"transactionCount\", {\r\n        /**\r\n         * @returns the block transaction count.\r\n         * @example block.transactionCount // 252\r\n         */\r\n        get: function () {\r\n            return this._data.transactionCount;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"transactionsRoot\", {\r\n        /**\r\n         * @returns the block transactions root.\r\n         * @example block.transactionsRoot // \"0xe4c7bf3aff7ad07f9e80d57f7189f0252592fee6321c2a9bd9b09b6ce0690d27\"\r\n         */\r\n        get: function () {\r\n            return this._data.transactionsRoot;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"stateRoot\", {\r\n        /**\r\n         * @returns the block state root.\r\n         * @example block.stateRoot // \"0x49e3bfe7b618e27fde8fa08884803a8458b502c6534af69873a3cc926a7c724b\"\r\n         */\r\n        get: function () {\r\n            return this._data.stateRoot;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"receiptsRoot\", {\r\n        /**\r\n         * @returns the block receipts root.\r\n         * @example block.receiptsRoot // \"0x7cf43d7e837284f036cf92c56973f5e27bdd253ca46168fa195a6b07fa719f23\"\r\n         */\r\n        get: function () {\r\n            return this._data.receiptsRoot;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"logsBloom\", {\r\n        /**\r\n         * @returns the block logs bloom.\r\n         * @example block.logsBloom // \"0xdde5fc46c5d8bcbd58207bc9f267bf43298e23791a326ff02661e99790da9996b3e0dd912c0b8202d389d282c56e4d11eb2dec4898a32b6b165f1f4cae6aa0079498eab50293f3b8defbf6af11bb75f0408a563ddfc26a3323d1ff5f9849e95d5f034d88a757ddea032c75c00708c9ff34d2207f997cc7d93fd1fa160a6bfaf62a54e31f9fe67ab95752106ba9d185bfdc9b6dc3e17427f844ee74e5c09b17b83ad6e8fc7360f5c7c3e4e1939e77a6374bee57d1fa6b2322b11ad56ad0398302de9b26d6fbfe414aa416bff141fad9d4af6aea19322e47595e342cd377403f417dfd396ab5f151095a5535f51cbc34a40ce9648927b7d1d72ab9daf253e31daf\"\r\n         */\r\n        get: function () {\r\n            return this._data.logsBloom;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"extraData\", {\r\n        /**\r\n         * @returns the block extra data.\r\n         * @example block.extraData // \"0x65746865726d696e652d6575726f70652d7765737433\"\r\n         */\r\n        get: function () {\r\n            return this._data.extraData;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"parentHash\", {\r\n        /**\r\n         * @returns the block parent hash.\r\n         * @example block.parentHash // \"0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045\"\r\n         */\r\n        get: function () {\r\n            return this._data.parentHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"sha3Uncles\", {\r\n        /**\r\n         * @returns the block sha3Uncles.\r\n         * @example block.sha3Uncles // \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\"\r\n         */\r\n        get: function () {\r\n            return this._data.sha3Uncles;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlock.prototype, \"nonce\", {\r\n        /**\r\n         * @returns the block nonce.\r\n         * @example block.nonce // \"0xedeb2d8fd2b2bdec\"\r\n         */\r\n        get: function () {\r\n            return this._data.nonce;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmBlock.parse = function (data) { return (__assign(__assign({}, data), { miner: EvmAddress.create(data.miner), timestamp: commonCore.dateInputToDate(data.timestamp), number: commonCore.BigNumber.create(data.number), difficulty: commonCore.BigNumber.create(data.difficulty), totalDifficulty: commonCore.BigNumber.create(data.totalDifficulty), size: commonCore.BigNumber.create(data.size), gasLimit: commonCore.BigNumber.create(data.gasLimit), gasUsed: commonCore.BigNumber.create(data.gasUsed), transactions: data.transactions.map(function (transaction) { return EvmTransaction.create(transaction); }), chain: EvmChain.create(data.chain), transactionCount: +data.transactionCount })); };\r\n    return EvmBlock;\r\n}());\n\nvar EvmBlockDate = /** @class */ (function () {\r\n    function EvmBlockDate(data) {\r\n        this.data = data;\r\n    }\r\n    /**\r\n     * Create a new instance of EvmBlockDate.\r\n     * @param data - the EvmBlockDateish type.\r\n     */\r\n    EvmBlockDate.create = function (data) {\r\n        if (data instanceof EvmBlockDate) {\r\n            return data;\r\n        }\r\n        return new EvmBlockDate(EvmBlockDate.parse(data));\r\n    };\r\n    EvmBlockDate.parse = function (input) {\r\n        return {\r\n            block: input.block,\r\n            date: new Date(input.date),\r\n            timestamp: input.timestamp,\r\n            // TODO: the swagger currently has wrong type for `block_timestamp`, should be `string`.\r\n            blockTimestamp: String(input.block_timestamp),\r\n            hash: input.hash,\r\n            parentHash: input.parent_hash,\r\n        };\r\n    };\r\n    Object.defineProperty(EvmBlockDate.prototype, \"block\", {\r\n        /**\r\n         * @description The block number.\r\n         * @example `9193266`\r\n         */\r\n        get: function () {\r\n            return this.data.block;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlockDate.prototype, \"date\", {\r\n        /**\r\n         * @description The date of the block.\r\n         * @example `2020-01-01T00:00:00+00:00`\r\n         */\r\n        get: function () {\r\n            return this.data.date;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlockDate.prototype, \"timestamp\", {\r\n        /**\r\n         * @description The timestamp of the block\r\n         * @example `1577836811`\r\n         */\r\n        get: function () {\r\n            return this.data.timestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlockDate.prototype, \"blockTimestamp\", {\r\n        /**\r\n         * @description The timestamp of the block\r\n         * @example `2022-01-03T22:59:39.000Z`\r\n         */\r\n        get: function () {\r\n            return this.data.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlockDate.prototype, \"block_timestamp\", {\r\n        /**\r\n         * @deprecated Use `blockTimestamp` instead.\r\n         */\r\n        get: function () {\r\n            return this.data.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlockDate.prototype, \"hash\", {\r\n        /**\r\n         * @description The block hash.\r\n         * @example `0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171`\r\n         */\r\n        get: function () {\r\n            return this.data.hash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlockDate.prototype, \"block_hash\", {\r\n        /**\r\n         * @deprecated Use `hash` instead.\r\n         */\r\n        get: function () {\r\n            return this.data.hash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlockDate.prototype, \"parentHash\", {\r\n        /**\r\n         * @description The block hash of the parent block.\r\n         * @example `0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045`\r\n         */\r\n        get: function () {\r\n            return this.data.parentHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmBlockDate.prototype, \"parent_hash\", {\r\n        /**\r\n         * @deprecated Use `parentHash` instead.\r\n         */\r\n        get: function () {\r\n            return this.data.parentHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return EvmBlockDate;\r\n}());\n\n/**\r\n * The EvmEvent is a representation of an event.\r\n *\r\n * Use this class any time you work with an event.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmEvent = /** @class */ (function () {\r\n    function EvmEvent(_data) {\r\n        this._data = _data;\r\n    }\r\n    /**\r\n     * Create a new instance of EvmEvent from any valid event input\r\n     * @param data - the EvmEventish type\r\n     * @example\r\n     * ```\r\n     * const event = EvmEventish.create(data);\r\n     *```\r\n     */\r\n    EvmEvent.create = function (data) {\r\n        if (data instanceof EvmEvent) {\r\n            return data;\r\n        }\r\n        return new EvmEvent(EvmEvent.parse(data));\r\n    };\r\n    /**\r\n     * Check the equality between two Evm events. It checks if the chain, block number, address and data are equal.\r\n     * @param dataA - The first event\r\n     * @param dataB - The second event\r\n     * @example\r\n     * ```ts\r\n     * EvmEvent.equals(dataA, dataB)\r\n     * ```\r\n     * @returns true if the events are equal, false otherwise\r\n     */\r\n    EvmEvent.equals = function (dataA, dataB) {\r\n        var eventA = EvmEvent.create(dataA);\r\n        var eventB = EvmEvent.create(dataB);\r\n        if (!eventA._data.chain.equals(eventB._data.chain)) {\r\n            return false;\r\n        }\r\n        if (!eventA._data.blockNumber.equals(eventB._data.blockNumber)) {\r\n            return false;\r\n        }\r\n        if (!eventA._data.address.equals(eventB._data.address)) {\r\n            return false;\r\n        }\r\n        if (eventA._data.data !== eventB._data.data) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks the equality of the current event instance with another evm event\r\n     * @param data - the event to compare with\r\n     * @example\r\n     * ```ts\r\n     * event.equals(data)\r\n     * ```\r\n     * @returns true if the events are equal, false otherwise\r\n     */\r\n    EvmEvent.prototype.equals = function (data) {\r\n        return EvmEvent.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON represention of the event.\r\n     * @example\r\n     * ```\r\n     * event.toJSON()\r\n     * ```\r\n     */\r\n    EvmEvent.prototype.toJSON = function () {\r\n        var _a, _b, _c;\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), address: data.address.toJSON(), blockNumber: data.blockNumber.toString(), data: {\r\n                from: (_a = data.data.from) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n                to: (_b = data.data.to) === null || _b === void 0 ? void 0 : _b.toJSON(),\r\n                value: (_c = data.data.value) === null || _c === void 0 ? void 0 : _c.format(),\r\n            } });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmEvent.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmEvent.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example event.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmEvent.prototype, \"chain\", {\r\n        /**\r\n         * @returns the event chain\r\n         * @example event.chain // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmEvent.prototype, \"address\", {\r\n        /**\r\n         * @returns the event address\r\n         * @example event.address // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.address;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmEvent.prototype, \"blockNumber\", {\r\n        /**\r\n         * @returns the event block number\r\n         * @example event.blockNumber // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmEvent.prototype, \"blockTimestamp\", {\r\n        /**\r\n         * @returns the event block timestamp\r\n         * @example event.blockTimestamp // Date\r\n         */\r\n        get: function () {\r\n            return this._data.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmEvent.prototype, \"data\", {\r\n        /**\r\n         * @returns the event data with from address, to address and value\r\n         * @example event.data\r\n         */\r\n        get: function () {\r\n            return this._data.data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmEvent.prototype, \"transactionHash\", {\r\n        /**\r\n         * @returns the event block trannsaciton hash\r\n         * @example event.transactionHash // \"0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5\"\r\n         */\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmEvent.prototype, \"blockHash\", {\r\n        /**\r\n         * @returns the event block hash\r\n         * @example event.blockHash // \"0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5\"\r\n         */\r\n        get: function () {\r\n            return this._data.blockHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmEvent.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain.create(data.chain), address: EvmAddress.create(data.address), blockNumber: commonCore.BigNumber.create(data.blockNumber), blockTimestamp: commonCore.dateInputToDate(data.blockTimestamp), data: {\r\n            from: commonCore.maybe(data.data.from, function (from) { return EvmAddress.create(from); }),\r\n            to: commonCore.maybe(data.data.to, function (to) { return EvmAddress.create(to); }),\r\n            value: commonCore.maybe(data.data.value, EvmNative.create),\r\n        } })); };\r\n    return EvmEvent;\r\n}());\n\n/**\r\n * The EvmNftMedia is a representation of an processed NFT media.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmNftMedia = /** @class */ (function () {\r\n    function EvmNftMedia(data) {\r\n        this._data = EvmNftMedia.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmNftMedia from any valid input\r\n     * @param data -  EvmNftMedia instance or valid EvmNftMediaInput\r\n     * @example\r\n     * ```\r\n     * const media = EvmNftMedia.create(data);\r\n     *```\r\n     */\r\n    EvmNftMedia.create = function (data) {\r\n        if (data instanceof EvmNftMedia) {\r\n            return data;\r\n        }\r\n        return new EvmNftMedia(data);\r\n    };\r\n    /**\r\n     * Check the equality between two Erc20 medias\r\n     * @param dataA - The first media to compare\r\n     * @param dataB - The second media to compare\r\n     * @example EvmNftMedia.equals(dataA, dataB)\r\n     * @returns true if the medias are equal, false otherwise\r\n     */\r\n    EvmNftMedia.equals = function (dataA, dataB) {\r\n        var mediaA = EvmNftMedia.create(dataA);\r\n        var mediaB = EvmNftMedia.create(dataB);\r\n        if (!mediaA.chain.equals(mediaB.chain)) {\r\n            return false;\r\n        }\r\n        if (mediaA.originalMediaUrl !== mediaB.originalMediaUrl) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks the equality of the current media with another erc20 media\r\n     * @param data - the media to compare with\r\n     * @example media.equals(data)\r\n     * @returns true if the medias are equal, false otherwise\r\n     */\r\n    EvmNftMedia.prototype.equals = function (data) {\r\n        return EvmNftMedia.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON representation of the media.\r\n     * @example media.toJSON()\r\n     */\r\n    EvmNftMedia.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmNftMedia.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmNftMedia.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example media.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMedia.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMedia.prototype, \"status\", {\r\n        get: function () {\r\n            return this._data.status;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMedia.prototype, \"updatedAt\", {\r\n        get: function () {\r\n            return this._data.updatedAt;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMedia.prototype, \"originalMediaUrl\", {\r\n        get: function () {\r\n            return this._data.originalMediaUrl;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMedia.prototype, \"category\", {\r\n        get: function () {\r\n            return this._data.category;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMedia.prototype, \"mimetype\", {\r\n        get: function () {\r\n            return this._data.mimetype;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMedia.prototype, \"parentHash\", {\r\n        get: function () {\r\n            return this._data.parentHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMedia.prototype, \"mediaCollection\", {\r\n        get: function () {\r\n            return this._data.mediaCollection;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmNftMedia.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain.create(data.chain), updatedAt: commonCore.maybe(data.updatedAt, function (date) { return commonCore.dateInputToDate(date); }) })); };\r\n    return EvmNftMedia;\r\n}());\n\n/**\r\n * The EvmNft class is a MoralisData that references to a the NFT of the type; Erc721 or Erc1155\r\n *\r\n * @category DataType\r\n */\r\nvar EvmNft = /** @class */ (function () {\r\n    function EvmNft(data) {\r\n        this._data = EvmNft.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmNft from any valid address input\r\n     *\r\n     * @param data - the EvmNftish type\r\n     * @example\r\n     * ```ts\r\n     * const nft = EvmNft.create(data);\r\n     * ```\r\n     * @returns an instance of EvmNft\r\n     */\r\n    EvmNft.create = function (data) {\r\n        if (data instanceof EvmNft) {\r\n            return data;\r\n        }\r\n        return new EvmNft(data);\r\n    };\r\n    // TODO: refactor to reduce complexity\r\n    /**\r\n     * Compares two EvmNftish data. verifies that the chain, tokenAddress and owner of values are equal.\r\n     * @param valueA - the first EvmNftish data to compare\r\n     * @param valueB - the second EvmNftish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  EvmNft.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    EvmNft.equals = function (valueA, valueB) {\r\n        var nftA = EvmNft.create(valueA);\r\n        var nftB = EvmNft.create(valueB);\r\n        if (!nftA._data.chain.equals(nftB._data.chain)) {\r\n            return false;\r\n        }\r\n        if (!nftA._data.tokenAddress.equals(nftB._data.tokenAddress)) {\r\n            return false;\r\n        }\r\n        // Owners are different between tokens\r\n        if (nftA._data.ownerOf && nftB._data.ownerOf && !nftA._data.ownerOf.equals(nftB._data.ownerOf)) {\r\n            return false;\r\n        }\r\n        // Owner is defined in only one token\r\n        if ((nftA._data.ownerOf && !nftB._data.ownerOf) || (!nftA._data.ownerOf && nftB._data.ownerOf)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an EvmNftish data to this EvmNft instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * nft.equals(value);\r\n     * ```\r\n     */\r\n    EvmNft.prototype.equals = function (value) {\r\n        return EvmNft.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the EvmNft instance to a JSON object.\r\n     * @returns JSON object of the EvmNft instance\r\n     * @example `nft.toJSON()`\r\n     */\r\n    EvmNft.prototype.toJSON = function () {\r\n        var _b, _c, _d, _e;\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { tokenAddress: data.tokenAddress.toJSON(), chain: data.chain.toJSON(), ownerOf: (_b = data.ownerOf) === null || _b === void 0 ? void 0 : _b.toJSON(), blockNumberMinted: (_c = data.blockNumberMinted) === null || _c === void 0 ? void 0 : _c.toString(), blockNumber: (_d = data.blockNumber) === null || _d === void 0 ? void 0 : _d.toString(), media: (_e = data.media) === null || _e === void 0 ? void 0 : _e.format() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmNft.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmNft.prototype, \"result\", {\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"chain\", {\r\n        /**\r\n         * @returns the NFT chain\r\n         * @example\r\n         * ```\r\n         * nft.chain // EvmChain\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"contractType\", {\r\n        /**\r\n         * @returns the NFT contract type\r\n         * @example\r\n         * ```\r\n         * nft.contractType // \"ERC721\" | \"ERC1155\"\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.contractType;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"tokenAddress\", {\r\n        /**\r\n         * @returns the NFT token address\r\n         * @example\r\n         * ```\r\n         * nft.tokenAddress // EvmAddress\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.tokenAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"metadata\", {\r\n        /**\r\n         * @returns the NFT metadata\r\n         * @example\r\n         * ```ts\r\n         * nft.metadata\r\n         * // {\r\n         * // name: 'Pancake',\r\n         * // description: 'The dessert series 1',\r\n         * // image: 'ipfs://QmNQFXCZ6LGzvpMW9Q5PWbCrEnLknQrPwr2r8pbQAgzQ9A/4863BD6B-6C92-4B96-BF80-8020B2F7C3A5.jpeg',\r\n         * // }\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.metadata;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"tokenUri\", {\r\n        /**\r\n         * @returns the NFT token URI\r\n         * @example\r\n         * ```\r\n         * nft.tokenUri // \"https://gateway.moralisipfs.com/ipfs/QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC/728.json\"\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.tokenUri;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"tokenHash\", {\r\n        /**\r\n         * @returns the NFT token hash\r\n         * @example\r\n         * ```\r\n         * nft.tokenHash // \"QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC\"\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.tokenHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"name\", {\r\n        /**\r\n         * @returns the NFT name\r\n         * @example\r\n         * ```\r\n         * nft.name // \"Tether USD\"\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.name;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"symbol\", {\r\n        /**\r\n         * @returns the NFT symbol\r\n         * @example\r\n         * ```\r\n         * nft.symbol // \"USDT\"\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.symbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"ownerOf\", {\r\n        /**\r\n         * @returns the NFT owner of address\r\n         * @example\r\n         * ```\r\n         * nft.ownerOf // EvmAddress\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.ownerOf;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"blockNumberMinted\", {\r\n        /**\r\n         * @returns the NFT block number minted from\r\n         * @example\r\n         * ```\r\n         * nft.blockNumberMinted // BigNumber\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.blockNumberMinted;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"blockNumber\", {\r\n        /**\r\n         * @returns the NFT block number\r\n         * @example\r\n         * ```\r\n         * nft.blockNumber // BigNumber\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"lastMetadataSync\", {\r\n        /**\r\n         * @returns the NFT latest metadata sync date\r\n         * @example\r\n         * ```\r\n         * nft.latestMetadataSync // Date\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.lastMetadataSync;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"lastTokenUriSync\", {\r\n        /**\r\n         * @returns the NFT latest token URI sync date\r\n         * @example\r\n         * ```\r\n         * nft.latestTokenUriSync // Date\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.lastTokenUriSync;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"amount\", {\r\n        /**\r\n         * @returns the NFT amount\r\n         * @example\r\n         * ```\r\n         * nft.amount // 2\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.amount;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"tokenId\", {\r\n        /**\r\n         * @returns the token id\r\n         * @example\r\n         * ```\r\n         * nft.tokenId // '1234'\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.tokenId;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"media\", {\r\n        /**\r\n         * @returns the processed media of the NFT\r\n         * @example\r\n         * ```\r\n         * nft.media // EvmNftMedia\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._data.media;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNft.prototype, \"possibleSpam\", {\r\n        /**\r\n         * @returns possibility of the token being a spam token\r\n         * @example transfer.possibleSpam // true\r\n         */\r\n        get: function () {\r\n            return this._data.possibleSpam;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    var _a;\r\n    _a = EvmNft;\r\n    EvmNft.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain.create(data.chain), contractType: commonCore.maybe(data.contractType), tokenAddress: EvmAddress.create(data.tokenAddress), metadata: commonCore.maybe(data.metadata, _a.validateMetadata), tokenUri: commonCore.maybe(data.tokenUri), tokenHash: commonCore.maybe(data.tokenHash), name: commonCore.maybe(data.name), symbol: commonCore.maybe(data.symbol), ownerOf: commonCore.maybe(data.ownerOf, function (ownerOf) { return EvmAddress.create(ownerOf); }), blockNumberMinted: commonCore.maybe(data.blockNumberMinted, commonCore.BigNumber.create), blockNumber: commonCore.maybe(data.blockNumber, commonCore.BigNumber.create), lastMetadataSync: commonCore.maybe(data.lastMetadataSync, commonCore.dateInputToDate), lastTokenUriSync: commonCore.maybe(data.lastTokenUriSync, commonCore.dateInputToDate), amount: commonCore.maybe(data.amount, function (value) { return +value; }), media: commonCore.maybe(data.media, function (value) { return EvmNftMedia.create(value); }) })); };\r\n    /**\r\n     * This function confirms that the NFT metadata is a valid JSON string.\r\n     *\r\n     * @param value - the new value for the NFT metadata\r\n     * @returns the parsed value of the JSON string\r\n     * @throws {CoreError} if the value is not a valid JSON string\r\n     */\r\n    EvmNft.validateMetadata = function (value) {\r\n        try {\r\n            return JSON.parse(value);\r\n        }\r\n        catch (error) {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: 'Invalid metadata provided, cannot parse the value to JSON',\r\n            });\r\n        }\r\n    };\r\n    return EvmNft;\r\n}());\n\n/**\r\n * The EvmNftCollection is a representation of an nft collection.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmNftCollection = /** @class */ (function () {\r\n    function EvmNftCollection(data) {\r\n        this._data = EvmNftCollection.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmNftCollection from any valid transaction input\r\n     * @param data - the EvmNftCollectionish type\r\n     * @example const collection = EvmNftCollection.create(data);\r\n     */\r\n    EvmNftCollection.create = function (data) {\r\n        if (data instanceof EvmNftCollection) {\r\n            return data;\r\n        }\r\n        return new EvmNftCollection(data);\r\n    };\r\n    /**\r\n     * Check the equality between two Evm collections. It compares their hashes and collections.\r\n     * @param dataA - The first collection to compare\r\n     * @param dataB - The second collection to compare\r\n     * @example EvmNftCollection.equals(dataA, dataB)\r\n     */\r\n    EvmNftCollection.equals = function (dataA, dataB) {\r\n        var collectionA = EvmNftCollection.create(dataA);\r\n        var collectionB = EvmNftCollection.create(dataB);\r\n        if (!collectionA.chain.equals(collectionB.chain)) {\r\n            return false;\r\n        }\r\n        if (!collectionA.tokenAddress.equals(collectionB.tokenAddress)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks the equality of the current collection with another evm collection\r\n     * @param data - the collection to compare with\r\n     * @example\r\n     * ```ts\r\n     * collection.equals(data)\r\n     * ```\r\n     */\r\n    EvmNftCollection.prototype.equals = function (data) {\r\n        return EvmNftCollection.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON represention of the collection.\r\n     * @example\r\n     * ```\r\n     * collection.toJSON()\r\n     * ```\r\n     */\r\n    EvmNftCollection.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), tokenAddress: data.tokenAddress.toJSON() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmNftCollection.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmNftCollection.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example collection.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftCollection.prototype, \"chain\", {\r\n        /**\r\n         * @returns the chain where the collection is deployed.\r\n         * @example collection.chain // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftCollection.prototype, \"tokenAddress\", {\r\n        /**\r\n         * @returns the token address of collection.\r\n         * @example collection.tokenAddress // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.tokenAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftCollection.prototype, \"contractType\", {\r\n        /**\r\n         * @returns the token type of collection.\r\n         * @example collection.tokenAddress // 'ERC721'\r\n         */\r\n        get: function () {\r\n            return this._data.contractType;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftCollection.prototype, \"name\", {\r\n        /**\r\n         * @returns the token name of collection.\r\n         * @example collection.tokenAddress // 'Test NFT'\r\n         */\r\n        get: function () {\r\n            return this._data.name;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftCollection.prototype, \"symbol\", {\r\n        /**\r\n         * @returns the token symbol of collection.\r\n         * @example collection.symbol // 'TEST'\r\n         */\r\n        get: function () {\r\n            return this._data.symbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmNftCollection.parse = function (data) { return (__assign(__assign({}, data), { tokenAddress: EvmAddress.create(data.tokenAddress), chain: EvmChain.create(data.chain), contractType: commonCore.maybe(data.contractType) })); };\r\n    return EvmNftCollection;\r\n}());\n\n/**\r\n * The EvmNftMetadata contains metadata of an NFT.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmNftMetadata = /** @class */ (function () {\r\n    function EvmNftMetadata(data) {\r\n        this._data = EvmNftMetadata.parse(data);\r\n    }\r\n    /**\r\n     *  Create a new instance of EvmNftMetadata from any valid EvmNftMetadata input\r\n     *\r\n     * @param data - the EvmNftMetadataish type\r\n     * @example\r\n     * ```ts\r\n     * const token = EvmNftMetadataish.create(value);\r\n     * ```\r\n     */\r\n    EvmNftMetadata.create = function (data) {\r\n        if (data instanceof EvmNftMetadata) {\r\n            return data;\r\n        }\r\n        return new EvmNftMetadata(data);\r\n    };\r\n    /**\r\n     * Compares two EvmNftMetadata instances. This checks if the chain and tokenAddress of both meatdatas are equal.\r\n     *\r\n     * @param dataA - the first EvmNftMetadataish to compare\r\n     * @param dataB - the second EvmNftMetadataish to compare\r\n     * @returns true if the two EvmNftMetadataData are equal\r\n     * @example\r\n     * ```ts\r\n     * EvmNftMetadata.equals(dataA, dataB);\r\n     * ```\r\n     */\r\n    EvmNftMetadata.equals = function (dataA, dataB) {\r\n        var metadataA = EvmNftMetadata.create(dataA);\r\n        var metadataB = EvmNftMetadata.create(dataB);\r\n        if (!metadataA._data.chain.equals(metadataB._data.chain)) {\r\n            return false;\r\n        }\r\n        if (!metadataA._data.tokenAddress.equals(metadataB._data.tokenAddress)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares EvmNftMetadata instance to current instance\r\n     *\r\n     * @param data - the EvmNftMetadataish to compare\r\n     * @returns true if the EvmNftMetadataish is equals given metadata\r\n     * @example\r\n     * ```ts\r\n     * metadata.equals(data);\r\n     * ```\r\n     */\r\n    EvmNftMetadata.prototype.equals = function (data) {\r\n        return EvmNftMetadata.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns the data as JSON.\r\n     * @example metadata.toJSON();\r\n     */\r\n    EvmNftMetadata.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), tokenAddress: data.tokenAddress.toJSON() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmNftMetadata.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmNftMetadata.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example metadata.result;\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMetadata.prototype, \"name\", {\r\n        /**\r\n         * @returns the name in the metadata.\r\n         * @example metadata.name; // \"Baby Ape Mutant Club\"\r\n         */\r\n        get: function () {\r\n            return this._data.name;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMetadata.prototype, \"symbol\", {\r\n        /**\r\n         * @returns the symbol in the metadata.\r\n         * @example metadata.symbol; // \"BAMC\"\r\n         */\r\n        get: function () {\r\n            return this._data.symbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMetadata.prototype, \"contractType\", {\r\n        /**\r\n         * @returns the contract type of the NFT.\r\n         * @example metadata.contractType; // \"ERC721\"\r\n         */\r\n        get: function () {\r\n            return this._data.contractType;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMetadata.prototype, \"chain\", {\r\n        /**\r\n         * @returns the chain in the metadata.\r\n         * @example metadata.chain; // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMetadata.prototype, \"tokenAddress\", {\r\n        /**\r\n         * @returns the token address in the metadata.\r\n         * @example metadata.tokenAddress; // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.tokenAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftMetadata.prototype, \"syncedAt\", {\r\n        /**\r\n         * @returns the date the metadata was synced.\r\n         * @example metadata.syncedAt; // Date\r\n         */\r\n        get: function () {\r\n            return this._data.syncedAt;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmNftMetadata.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain.create(data.chain), tokenAddress: EvmAddress.create(data.tokenAddress), syncedAt: commonCore.maybe(data.syncedAt, commonCore.dateInputToDate) })); };\r\n    return EvmNftMetadata;\r\n}());\n\n/**\r\n * The EvmNftTransfer is a representation of a completed NFT transfer.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmNftTransfer = /** @class */ (function () {\r\n    function EvmNftTransfer(data) {\r\n        this._data = EvmNftTransfer.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmNftTransfer from any valid transfer input\r\n     * @param data - the EvmNftTransferish type\r\n     * @example\r\n     * ```\r\n     * const transfer = EvmNftTransfer.create(data);\r\n     *```\r\n     */\r\n    EvmNftTransfer.create = function (data) {\r\n        if (data instanceof EvmNftTransfer) {\r\n            return data;\r\n        }\r\n        return new EvmNftTransfer(data);\r\n    };\r\n    /**\r\n     * Check the equality between two NFT transfers. The compares the chain, blockHash, tokenId and logIndex.\r\n     * @param dataA - The first transfer to compare\r\n     * @param dataB - The second transfer to compare\r\n     * @example EvmNftTransfer.equals(dataA, dataB)\r\n     * @returns true if the transfers are equal, false otherwise\r\n     */\r\n    EvmNftTransfer.equals = function (dataA, dataB) {\r\n        var transferA = EvmNftTransfer.create(dataA);\r\n        var transferB = EvmNftTransfer.create(dataB);\r\n        if (!transferA.chain.equals(transferB.chain)) {\r\n            return false;\r\n        }\r\n        if (transferA.blockHash !== transferB.blockHash) {\r\n            return false;\r\n        }\r\n        if (transferA.tokenId !== transferB.tokenId) {\r\n            return false;\r\n        }\r\n        if (transferA.logIndex !== transferB.logIndex) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks the equality of the current transfer instance with another nft transfer\r\n     * @param data - the transfer to compare with\r\n     * @example transaction.equals(data)\r\n     * @returns true if the transfers are equal, false otherwise\r\n     */\r\n    EvmNftTransfer.prototype.equals = function (data) {\r\n        return EvmNftTransfer.equals(this, data);\r\n    };\r\n    /**\r\n     * @returns a JSON represention of the transfer.\r\n     * @example\r\n     * ```\r\n     * transfer.toJSON()\r\n     * ```\r\n     */\r\n    EvmNftTransfer.prototype.toJSON = function () {\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), fromAddress: data.fromAddress ? data.fromAddress.toJSON() : undefined, toAddress: data.toAddress.toJSON(), tokenAddress: data.tokenAddress.toJSON(), value: data.value ? data.value.format() : undefined, operator: data.operator ? data.operator.toJSON() : undefined, blockNumber: data.blockNumber.toString() });\r\n    };\r\n    /**\r\n     * @returns a JSON represention of the transfer.\r\n     * @example\r\n     * ```\r\n     * transfer.format()\r\n     * ```\r\n     */\r\n    EvmNftTransfer.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"result\", {\r\n        /**\r\n         * @returns all the data without casting it to JSON.\r\n         * @example transfer.result\r\n         */\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"chain\", {\r\n        /**\r\n         * @returns the chain of the transfer.\r\n         * @example transfer.chain // EvmChain\r\n         */\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"blockHash\", {\r\n        /**\r\n         * @returns the block hash of the transfer.\r\n         * @example transfer.blockHash // \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\"\r\n         */\r\n        get: function () {\r\n            return this._data.blockHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"blockNumber\", {\r\n        /**\r\n         * @returns the block number of the transfer.\r\n         * @example transfer.blockNumber // BigNumber\r\n         */\r\n        get: function () {\r\n            return this._data.blockNumber;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"blockTimestamp\", {\r\n        /**\r\n         * @returns the block timestamp of the transfer.\r\n         * @example transfer.blockTimestamp // Date\r\n         */\r\n        get: function () {\r\n            return this._data.blockTimestamp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"fromAddress\", {\r\n        /**\r\n         * @returns the from address of the transfer.\r\n         * @example transfer.fromAddress // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.fromAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"toAddress\", {\r\n        /**\r\n         * @returns the to address of the transfer.\r\n         * @example transfer.toAddress // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.toAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"tokenAddress\", {\r\n        /**\r\n         * @returns the token address of the transfer.\r\n         * @example transfer.tokenAddress // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.tokenAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"tokenId\", {\r\n        /**\r\n         * @returns the token id of the transfer.\r\n         * @example transfer.tokenId // \"15\"\r\n         */\r\n        get: function () {\r\n            return this._data.tokenId;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"amount\", {\r\n        /**\r\n         * @returns the amount of the transfer.\r\n         * @example transfer.amount // 1\r\n         */\r\n        get: function () {\r\n            return this._data.amount;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"value\", {\r\n        /**\r\n         * @returns the value of the transfer.\r\n         * @example transfer.value // EvmNative\r\n         */\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"logIndex\", {\r\n        /**\r\n         * @returns the log index of the transfer.\r\n         * @example transfer.logIndex // 0\r\n         */\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"transactionHash\", {\r\n        /**\r\n         * @returns the transaction hash of the transfer.\r\n         * @example transfer.transactionHash // \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\"\r\n         */\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"transactionIndex\", {\r\n        /**\r\n         * @returns the transaction index of the transfer.\r\n         * @example transfer.transactionIndex // 123\r\n         */\r\n        get: function () {\r\n            return this._data.transactionIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"transactionType\", {\r\n        /**\r\n         * @returns the transaction type of the transfer.\r\n         * @example transfer.transactionType // \"1\"\r\n         */\r\n        get: function () {\r\n            return this._data.transactionType;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"operator\", {\r\n        /**\r\n         * @returns the operator of the transfer.\r\n         * @example transfer.operator // EvmAddress\r\n         */\r\n        get: function () {\r\n            return this._data.operator;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"contractType\", {\r\n        /**\r\n         * @returns the contract type of the transfer.\r\n         * @example transfer.contractType // \"ERC721\"\r\n         */\r\n        get: function () {\r\n            return this._data.contractType;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmNftTransfer.prototype, \"possibleSpam\", {\r\n        /**\r\n         * @returns possibility of the token being a spam token\r\n         * @example transfer.possibleSpam // true\r\n         */\r\n        get: function () {\r\n            return this._data.possibleSpam;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmNftTransfer.parse = function (data) { return (__assign(__assign({}, data), { chain: EvmChain.create(data.chain), amount: commonCore.maybe(data.amount, function (amount) { return +amount; }), blockNumber: commonCore.BigNumber.create(data.blockNumber), blockTimestamp: commonCore.dateInputToDate(data.blockTimestamp), transactionIndex: commonCore.maybe(data.transactionIndex, function (index) { return +index; }), transactionType: commonCore.maybe(data.transactionType), fromAddress: commonCore.maybe(data.fromAddress, function (address) { return EvmAddress.create(address); }), toAddress: EvmAddress.create(data.toAddress), tokenAddress: EvmAddress.create(data.tokenAddress), value: commonCore.maybe(data.value, EvmNative.create), operator: commonCore.maybe(data.operator, function (operator) { return EvmAddress.create(operator); }), logIndex: +data.logIndex })); };\r\n    return EvmNftTransfer;\r\n}());\n\n/**\r\n * The EvmTransactionLogDecoded class is a MoralisData that references an EVM decoded transaction log.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmTransactionLogDecoded = /** @class */ (function (_super) {\r\n    __extends(EvmTransactionLogDecoded, _super);\r\n    function EvmTransactionLogDecoded(value) {\r\n        var _this = _super.call(this, value) || this;\r\n        _this._value = EvmTransactionLogDecoded.parse(value);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Create a new instance of EvmTransactionLogDecoded from any valid address input\r\n     *\r\n     * @example\r\n     * ```\r\n     * const log = EvmTransactionLogDecoded.create(value, core);\r\n     * ```\r\n     * @param value - A valid EvmTransactionLogDecodedish\r\n     */\r\n    EvmTransactionLogDecoded.create = function (value) {\r\n        if (value instanceof EvmTransactionLogDecoded) {\r\n            return value;\r\n        }\r\n        return new EvmTransactionLogDecoded(value);\r\n    };\r\n    EvmTransactionLogDecoded.parse = function (value) {\r\n        var data = _super.parse.call(this, value);\r\n        return __assign(__assign({}, data), { decodedEvent: value.decodedEvent });\r\n    };\r\n    Object.defineProperty(EvmTransactionLogDecoded.prototype, \"decodedEvent\", {\r\n        get: function () {\r\n            return this._value.decodedEvent;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return EvmTransactionLogDecoded;\r\n}(EvmTransactionLog));\n\n/**\r\n * The EvmTransactionVerbose is a representation of a published transaction.\r\n *\r\n * Use this class any time you work with a transaction.\r\n *\r\n * @category DataType\r\n */\r\nvar EvmTransactionVerbose = /** @class */ (function (_super) {\r\n    __extends(EvmTransactionVerbose, _super);\r\n    function EvmTransactionVerbose(data) {\r\n        var _this = _super.call(this, data) || this;\r\n        _this._data = EvmTransactionVerbose.parse(data);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Create a new instance of EvmTransactionVerbose from any valid transaction input\r\n     * @param data - the EvmTransactionVerboseish type\r\n     * @example\r\n     * ```\r\n     * const transaction = EvmTransactionVerbose.create(data);\r\n     *```\r\n     */\r\n    EvmTransactionVerbose.create = function (data) {\r\n        if (data instanceof EvmTransactionVerbose) {\r\n            return data;\r\n        }\r\n        return new EvmTransactionVerbose(data);\r\n    };\r\n    Object.defineProperty(EvmTransactionVerbose.prototype, \"decodedCall\", {\r\n        get: function () {\r\n            return this._data.decodedCall;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmTransactionVerbose.prototype, \"logs\", {\r\n        get: function () {\r\n            return this._data.logs;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    var _a;\r\n    _a = EvmTransactionVerbose;\r\n    EvmTransactionVerbose.parse = function (data) {\r\n        var parsed = _super.parse.call(_a, data);\r\n        return __assign(__assign({}, parsed), { logs: data.logs.map(function (log) { return EvmTransactionLogDecoded.create(log); }), decodedCall: data.decodedCall });\r\n    };\r\n    return EvmTransactionVerbose;\r\n}(EvmTransaction));\n\nvar EvmTrade = /** @class */ (function () {\r\n    function EvmTrade(input) {\r\n        this.transactionHash = input.transactionHash;\r\n        this.transactionIndex = input.transactionIndex;\r\n        this.tokenIds = input.tokenIds;\r\n        this.sellerAddress = EvmAddress.create(input.sellerAddress);\r\n        this.buyerAddress = EvmAddress.create(input.buyerAddress);\r\n        this.tokenAddress = EvmAddress.create(input.tokenAddress);\r\n        this.marketplaceAddress = EvmAddress.create(input.marketplaceAddress);\r\n        this.priceTokenAddress = input.priceTokenAddress ? EvmAddress.create(input.priceTokenAddress) : undefined;\r\n        this.price = EvmNative.create(input.price);\r\n        this.blockTimestamp = input.blockTimestamp;\r\n        this.blockNumber = commonCore.BigNumber.create(input.blockNumber);\r\n        this.blockHash = input.blockHash;\r\n    }\r\n    EvmTrade.create = function (input) {\r\n        if (input instanceof EvmTrade) {\r\n            return input;\r\n        }\r\n        return new EvmTrade(input);\r\n    };\r\n    EvmTrade.fromJSON = function (json) {\r\n        var input = {\r\n            transactionHash: json.transaction_hash,\r\n            transactionIndex: Number(json.transaction_index),\r\n            tokenIds: json.token_ids,\r\n            sellerAddress: EvmAddress.fromJSON(json.seller_address),\r\n            buyerAddress: EvmAddress.fromJSON(json.buyer_address),\r\n            tokenAddress: EvmAddress.fromJSON(json.token_address),\r\n            marketplaceAddress: EvmAddress.fromJSON(json.marketplace_address),\r\n            priceTokenAddress: json.price_token_address ? EvmAddress.fromJSON(json.price_token_address) : undefined,\r\n            price: EvmNative.fromJSON(json.price),\r\n            blockTimestamp: new Date(json.block_timestamp),\r\n            blockNumber: commonCore.BigNumber.fromJSON(json.block_number),\r\n            blockHash: json.block_hash,\r\n        };\r\n        return EvmTrade.create(input);\r\n    };\r\n    EvmTrade.prototype.toJSON = function () {\r\n        return {\r\n            transaction_hash: this.transactionHash,\r\n            transaction_index: String(this.transactionIndex),\r\n            token_ids: this.tokenIds,\r\n            seller_address: this.sellerAddress.toJSON(),\r\n            buyer_address: this.buyerAddress.toJSON(),\r\n            token_address: this.tokenAddress.toJSON(),\r\n            marketplace_address: this.marketplaceAddress.toJSON(),\r\n            price_token_address: this.priceTokenAddress ? this.priceTokenAddress.toJSON() : undefined,\r\n            price: this.price.toJSON(),\r\n            block_timestamp: this.blockTimestamp.toISOString(),\r\n            block_number: this.blockNumber.toJSON(),\r\n            block_hash: this.blockHash,\r\n        };\r\n    };\r\n    return EvmTrade;\r\n}());\n\nvar EvmTradeCollection = /** @class */ (function () {\r\n    function EvmTradeCollection(input) {\r\n        this.page = input.page;\r\n        this.pageSize = input.pageSize;\r\n        this.cursor = input.cursor;\r\n        this.result = input.result.map(function (item) { return EvmTrade.create(item); });\r\n    }\r\n    EvmTradeCollection.create = function (input) {\r\n        if (input instanceof EvmTradeCollection) {\r\n            return input;\r\n        }\r\n        return new EvmTradeCollection(input);\r\n    };\r\n    EvmTradeCollection.fromJSON = function (json) {\r\n        var input = {\r\n            page: json.page,\r\n            pageSize: json.page_size,\r\n            cursor: json.cursor,\r\n            result: json.result.map(function (item) { return EvmTrade.fromJSON(item); }),\r\n        };\r\n        return EvmTradeCollection.create(input);\r\n    };\r\n    EvmTradeCollection.prototype.toJSON = function () {\r\n        return {\r\n            page: this.page,\r\n            page_size: this.pageSize,\r\n            cursor: this.cursor,\r\n            result: this.result.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return EvmTradeCollection;\r\n}());\n\n// $ref: #/components/schemas/web3version\r\n// type: web3version\r\n// properties:\r\n// - version ($ref: #/components/schemas/web3version/properties/version)\r\nvar EvmWeb3version = /** @class */ (function () {\r\n    function EvmWeb3version(input) {\r\n        this.version = input.version;\r\n    }\r\n    EvmWeb3version.create = function (input) {\r\n        if (input instanceof EvmWeb3version) {\r\n            return input;\r\n        }\r\n        return new EvmWeb3version(input);\r\n    };\r\n    EvmWeb3version.fromJSON = function (json) {\r\n        var input = {\r\n            version: json.version,\r\n        };\r\n        return EvmWeb3version.create(input);\r\n    };\r\n    EvmWeb3version.prototype.toJSON = function () {\r\n        return {\r\n            version: this.version,\r\n        };\r\n    };\r\n    return EvmWeb3version;\r\n}());\n\n// $ref: #/components/schemas/endpointWeights\r\n// type: endpointWeights\r\n// properties:\r\n// - endpoint ($ref: #/components/schemas/endpointWeights/properties/endpoint)\r\n// - path ($ref: #/components/schemas/endpointWeights/properties/path)\r\n// - rateLimitCost ($ref: #/components/schemas/endpointWeights/properties/rateLimitCost)\r\n// - price ($ref: #/components/schemas/endpointWeights/properties/price)\r\nvar EvmEndpointWeights = /** @class */ (function () {\r\n    function EvmEndpointWeights(input) {\r\n        this.endpoint = input.endpoint;\r\n        this.path = input.path;\r\n        this.rateLimitCost = input.rateLimitCost;\r\n        this.price = input.price;\r\n    }\r\n    EvmEndpointWeights.create = function (input) {\r\n        if (input instanceof EvmEndpointWeights) {\r\n            return input;\r\n        }\r\n        return new EvmEndpointWeights(input);\r\n    };\r\n    EvmEndpointWeights.fromJSON = function (json) {\r\n        var input = {\r\n            endpoint: json.endpoint,\r\n            path: json.path,\r\n            rateLimitCost: json.rateLimitCost,\r\n            price: json.price,\r\n        };\r\n        return EvmEndpointWeights.create(input);\r\n    };\r\n    EvmEndpointWeights.prototype.toJSON = function () {\r\n        return {\r\n            endpoint: this.endpoint,\r\n            path: this.path,\r\n            rateLimitCost: this.rateLimitCost,\r\n            price: this.price,\r\n        };\r\n    };\r\n    return EvmEndpointWeights;\r\n}());\n\nvar EvmMarketDataERC20TokenItem = /** @class */ (function () {\r\n    function EvmMarketDataERC20TokenItem(input) {\r\n        this.rank = input.rank;\r\n        this.tokenName = input.tokenName;\r\n        this.tokenSymbol = input.tokenSymbol;\r\n        this.tokenLogo = input.tokenLogo;\r\n        this.tokenDecimals = input.tokenDecimals;\r\n        this.contractAddress = EvmAddress.create(input.contractAddress);\r\n        this.priceUsd = input.priceUsd;\r\n        this.price24hPercentChange = input.price24hPercentChange;\r\n        this.price7dPercentChange = input.price7dPercentChange;\r\n        this.marketCapUsd = input.marketCapUsd;\r\n    }\r\n    EvmMarketDataERC20TokenItem.create = function (input) {\r\n        if (input instanceof EvmMarketDataERC20TokenItem) {\r\n            return input;\r\n        }\r\n        return new EvmMarketDataERC20TokenItem(input);\r\n    };\r\n    EvmMarketDataERC20TokenItem.fromJSON = function (json) {\r\n        var input = {\r\n            rank: json.rank,\r\n            tokenName: json.token_name,\r\n            tokenSymbol: json.token_symbol,\r\n            tokenLogo: json.token_logo,\r\n            tokenDecimals: Number(json.token_decimals),\r\n            contractAddress: EvmAddress.fromJSON(json.contract_address),\r\n            priceUsd: json.price_usd,\r\n            price24hPercentChange: json.price_24h_percent_change,\r\n            price7dPercentChange: json.price_7d_percent_change,\r\n            marketCapUsd: json.market_cap_usd,\r\n        };\r\n        return EvmMarketDataERC20TokenItem.create(input);\r\n    };\r\n    EvmMarketDataERC20TokenItem.prototype.toJSON = function () {\r\n        return {\r\n            rank: this.rank,\r\n            token_name: this.tokenName,\r\n            token_symbol: this.tokenSymbol,\r\n            token_logo: this.tokenLogo,\r\n            token_decimals: String(this.tokenDecimals),\r\n            contract_address: this.contractAddress.toJSON(),\r\n            price_usd: this.priceUsd,\r\n            price_24h_percent_change: this.price24hPercentChange,\r\n            price_7d_percent_change: this.price7dPercentChange,\r\n            market_cap_usd: this.marketCapUsd,\r\n        };\r\n    };\r\n    return EvmMarketDataERC20TokenItem;\r\n}());\n\nvar EvmMarketDataERC20TokensByPriceMovers = /** @class */ (function () {\r\n    function EvmMarketDataERC20TokensByPriceMovers(input) {\r\n        this.gainers = input.gainers.map(function (item) { return EvmMarketDataERC20TokenItem.create(item); });\r\n        this.losers = input.losers.map(function (item) { return EvmMarketDataERC20TokenItem.create(item); });\r\n    }\r\n    EvmMarketDataERC20TokensByPriceMovers.create = function (input) {\r\n        if (input instanceof EvmMarketDataERC20TokensByPriceMovers) {\r\n            return input;\r\n        }\r\n        return new EvmMarketDataERC20TokensByPriceMovers(input);\r\n    };\r\n    EvmMarketDataERC20TokensByPriceMovers.fromJSON = function (json) {\r\n        var input = {\r\n            gainers: json.gainers.map(function (item) { return EvmMarketDataERC20TokenItem.fromJSON(item); }),\r\n            losers: json.losers.map(function (item) { return EvmMarketDataERC20TokenItem.fromJSON(item); }),\r\n        };\r\n        return EvmMarketDataERC20TokensByPriceMovers.create(input);\r\n    };\r\n    EvmMarketDataERC20TokensByPriceMovers.prototype.toJSON = function () {\r\n        return {\r\n            gainers: this.gainers.map(function (item) { return item.toJSON(); }),\r\n            losers: this.losers.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return EvmMarketDataERC20TokensByPriceMovers;\r\n}());\n\n// $ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items\r\n// type: marketDataTopNFTCollectionByMarketCap_Item\r\n// properties:\r\n// - rank ($ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items/properties/rank)\r\n// - collection_title ($ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items/properties/collection_title)\r\n// - collection_image ($ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items/properties/collection_image)\r\n// - floor_price_usd ($ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items/properties/floor_price_usd)\r\n// - floor_price_24hr_percent_change ($ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items/properties/floor_price_24hr_percent_change)\r\n// - market_cap_usd ($ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items/properties/market_cap_usd)\r\n// - market_cap_24hr_percent_change ($ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items/properties/market_cap_24hr_percent_change)\r\n// - volume_usd ($ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items/properties/volume_usd)\r\n// - volume_24hr_percent_change ($ref: #/components/schemas/marketDataTopNFTCollectionByMarketCap/items/properties/volume_24hr_percent_change)\r\nvar EvmMarketDataTopNFTCollectionByMarketCapItem = /** @class */ (function () {\r\n    function EvmMarketDataTopNFTCollectionByMarketCapItem(input) {\r\n        this.rank = input.rank;\r\n        this.collectionTitle = input.collectionTitle;\r\n        this.collectionImage = input.collectionImage;\r\n        this.floorPriceUsd = input.floorPriceUsd;\r\n        this.floorPrice24hrPercentChange = input.floorPrice24hrPercentChange;\r\n        this.marketCapUsd = input.marketCapUsd;\r\n        this.marketCap24hrPercentChange = input.marketCap24hrPercentChange;\r\n        this.volumeUsd = input.volumeUsd;\r\n        this.volume24hrPercentChange = input.volume24hrPercentChange;\r\n    }\r\n    EvmMarketDataTopNFTCollectionByMarketCapItem.create = function (input) {\r\n        if (input instanceof EvmMarketDataTopNFTCollectionByMarketCapItem) {\r\n            return input;\r\n        }\r\n        return new EvmMarketDataTopNFTCollectionByMarketCapItem(input);\r\n    };\r\n    EvmMarketDataTopNFTCollectionByMarketCapItem.fromJSON = function (json) {\r\n        var input = {\r\n            rank: json.rank,\r\n            collectionTitle: json.collection_title,\r\n            collectionImage: json.collection_image,\r\n            floorPriceUsd: json.floor_price_usd,\r\n            floorPrice24hrPercentChange: json.floor_price_24hr_percent_change,\r\n            marketCapUsd: json.market_cap_usd,\r\n            marketCap24hrPercentChange: json.market_cap_24hr_percent_change,\r\n            volumeUsd: json.volume_usd,\r\n            volume24hrPercentChange: json.volume_24hr_percent_change,\r\n        };\r\n        return EvmMarketDataTopNFTCollectionByMarketCapItem.create(input);\r\n    };\r\n    EvmMarketDataTopNFTCollectionByMarketCapItem.prototype.toJSON = function () {\r\n        return {\r\n            rank: this.rank,\r\n            collection_title: this.collectionTitle,\r\n            collection_image: this.collectionImage,\r\n            floor_price_usd: this.floorPriceUsd,\r\n            floor_price_24hr_percent_change: this.floorPrice24hrPercentChange,\r\n            market_cap_usd: this.marketCapUsd,\r\n            market_cap_24hr_percent_change: this.marketCap24hrPercentChange,\r\n            volume_usd: this.volumeUsd,\r\n            volume_24hr_percent_change: this.volume24hrPercentChange,\r\n        };\r\n    };\r\n    return EvmMarketDataTopNFTCollectionByMarketCapItem;\r\n}());\n\n// $ref: #/components/schemas/marketDataHottestNFTCollectionByTradingVolume/items\r\n// type: marketDataHottestNFTCollectionByTradingVolume_Item\r\n// properties:\r\n// - rank ($ref: #/components/schemas/marketDataHottestNFTCollectionByTradingVolume/items/properties/rank)\r\n// - collection_title ($ref: #/components/schemas/marketDataHottestNFTCollectionByTradingVolume/items/properties/collection_title)\r\n// - collection_image ($ref: #/components/schemas/marketDataHottestNFTCollectionByTradingVolume/items/properties/collection_image)\r\n// - floor_price_usd ($ref: #/components/schemas/marketDataHottestNFTCollectionByTradingVolume/items/properties/floor_price_usd)\r\n// - floor_price_24hr_percent_change ($ref: #/components/schemas/marketDataHottestNFTCollectionByTradingVolume/items/properties/floor_price_24hr_percent_change)\r\n// - volume_usd ($ref: #/components/schemas/marketDataHottestNFTCollectionByTradingVolume/items/properties/volume_usd)\r\n// - volume_24hr_percent_change ($ref: #/components/schemas/marketDataHottestNFTCollectionByTradingVolume/items/properties/volume_24hr_percent_change)\r\n// - average_price_usd ($ref: #/components/schemas/marketDataHottestNFTCollectionByTradingVolume/items/properties/average_price_usd)\r\nvar EvmMarketDataHottestNFTCollectionByTradingVolumeItem = /** @class */ (function () {\r\n    function EvmMarketDataHottestNFTCollectionByTradingVolumeItem(input) {\r\n        this.rank = input.rank;\r\n        this.collectionTitle = input.collectionTitle;\r\n        this.collectionImage = input.collectionImage;\r\n        this.floorPriceUsd = input.floorPriceUsd;\r\n        this.floorPrice24hrPercentChange = input.floorPrice24hrPercentChange;\r\n        this.volumeUsd = input.volumeUsd;\r\n        this.volume24hrPercentChange = input.volume24hrPercentChange;\r\n        this.averagePriceUsd = input.averagePriceUsd;\r\n    }\r\n    EvmMarketDataHottestNFTCollectionByTradingVolumeItem.create = function (input) {\r\n        if (input instanceof EvmMarketDataHottestNFTCollectionByTradingVolumeItem) {\r\n            return input;\r\n        }\r\n        return new EvmMarketDataHottestNFTCollectionByTradingVolumeItem(input);\r\n    };\r\n    EvmMarketDataHottestNFTCollectionByTradingVolumeItem.fromJSON = function (json) {\r\n        var input = {\r\n            rank: json.rank,\r\n            collectionTitle: json.collection_title,\r\n            collectionImage: json.collection_image,\r\n            floorPriceUsd: json.floor_price_usd,\r\n            floorPrice24hrPercentChange: json.floor_price_24hr_percent_change,\r\n            volumeUsd: json.volume_usd,\r\n            volume24hrPercentChange: json.volume_24hr_percent_change,\r\n            averagePriceUsd: json.average_price_usd,\r\n        };\r\n        return EvmMarketDataHottestNFTCollectionByTradingVolumeItem.create(input);\r\n    };\r\n    EvmMarketDataHottestNFTCollectionByTradingVolumeItem.prototype.toJSON = function () {\r\n        return {\r\n            rank: this.rank,\r\n            collection_title: this.collectionTitle,\r\n            collection_image: this.collectionImage,\r\n            floor_price_usd: this.floorPriceUsd,\r\n            floor_price_24hr_percent_change: this.floorPrice24hrPercentChange,\r\n            volume_usd: this.volumeUsd,\r\n            volume_24hr_percent_change: this.volume24hrPercentChange,\r\n            average_price_usd: this.averagePriceUsd,\r\n        };\r\n    };\r\n    return EvmMarketDataHottestNFTCollectionByTradingVolumeItem;\r\n}());\n\n// $ref: #/paths/~1contracts-review/post/responses/200/content/application~1json/schema\r\n// type: reviewContracts\r\n// properties:\r\n// - message ($ref: #/paths/~1contracts-review/post/responses/200/content/application~1json/schema/properties/message)\r\nvar EvmReviewContracts = /** @class */ (function () {\r\n    function EvmReviewContracts(input) {\r\n        this.message = input.message;\r\n    }\r\n    EvmReviewContracts.create = function (input) {\r\n        if (input instanceof EvmReviewContracts) {\r\n            return input;\r\n        }\r\n        return new EvmReviewContracts(input);\r\n    };\r\n    EvmReviewContracts.fromJSON = function (json) {\r\n        var input = {\r\n            message: json.message,\r\n        };\r\n        return EvmReviewContracts.create(input);\r\n    };\r\n    EvmReviewContracts.prototype.toJSON = function () {\r\n        return {\r\n            message: this.message,\r\n        };\r\n    };\r\n    return EvmReviewContracts;\r\n}());\n\nvar EvmContractsReviewItem = /** @class */ (function () {\r\n    function EvmContractsReviewItem(input) {\r\n        this.contractAddress = EvmAddress.create(input.contractAddress);\r\n        this.reason = input.reason;\r\n        this.reportType = EvmContractsReviewItemReportTypeEnum.create(input.reportType);\r\n        this.contractType = EvmContractsReviewItemContractTypeEnum.create(input.contractType);\r\n    }\r\n    EvmContractsReviewItem.create = function (input) {\r\n        if (input instanceof EvmContractsReviewItem) {\r\n            return input;\r\n        }\r\n        return new EvmContractsReviewItem(input);\r\n    };\r\n    EvmContractsReviewItem.fromJSON = function (json) {\r\n        var input = {\r\n            contractAddress: EvmAddress.fromJSON(json.contract_address),\r\n            reason: json.reason,\r\n            reportType: EvmContractsReviewItemReportTypeEnum.fromJSON(json.report_type),\r\n            contractType: EvmContractsReviewItemContractTypeEnum.fromJSON(json.contract_type),\r\n        };\r\n        return EvmContractsReviewItem.create(input);\r\n    };\r\n    EvmContractsReviewItem.prototype.toJSON = function () {\r\n        return {\r\n            contract_address: this.contractAddress.toJSON(),\r\n            reason: this.reason,\r\n            report_type: this.reportType,\r\n            contract_type: this.contractType,\r\n        };\r\n    };\r\n    return EvmContractsReviewItem;\r\n}());\n\nvar EvmContractsReviewDto = /** @class */ (function () {\r\n    function EvmContractsReviewDto(input) {\r\n        this.contracts = input.contracts.map(function (item) { return EvmContractsReviewItem.create(item); });\r\n    }\r\n    EvmContractsReviewDto.create = function (input) {\r\n        if (input instanceof EvmContractsReviewDto) {\r\n            return input;\r\n        }\r\n        return new EvmContractsReviewDto(input);\r\n    };\r\n    EvmContractsReviewDto.fromJSON = function (json) {\r\n        var input = {\r\n            contracts: json.contracts.map(function (item) { return EvmContractsReviewItem.fromJSON(item); }),\r\n        };\r\n        return EvmContractsReviewDto.create(input);\r\n    };\r\n    EvmContractsReviewDto.prototype.toJSON = function () {\r\n        return {\r\n            contracts: this.contracts.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return EvmContractsReviewDto;\r\n}());\n\nvar EvmTransactionTimestamp = /** @class */ (function () {\r\n    function EvmTransactionTimestamp(input) {\r\n        this.blockNumber = commonCore.BigNumber.create(input.blockNumber);\r\n        this.blockTimestamp = input.blockTimestamp;\r\n        this.transactionHash = input.transactionHash;\r\n    }\r\n    EvmTransactionTimestamp.create = function (input) {\r\n        if (input instanceof EvmTransactionTimestamp) {\r\n            return input;\r\n        }\r\n        return new EvmTransactionTimestamp(input);\r\n    };\r\n    EvmTransactionTimestamp.fromJSON = function (json) {\r\n        var input = {\r\n            blockNumber: commonCore.BigNumber.fromJSON(json.block_number),\r\n            blockTimestamp: json.block_timestamp,\r\n            transactionHash: json.transaction_hash,\r\n        };\r\n        return EvmTransactionTimestamp.create(input);\r\n    };\r\n    EvmTransactionTimestamp.prototype.toJSON = function () {\r\n        return {\r\n            block_number: this.blockNumber.toJSON(),\r\n            block_timestamp: this.blockTimestamp,\r\n            transaction_hash: this.transactionHash,\r\n        };\r\n    };\r\n    return EvmTransactionTimestamp;\r\n}());\n\nvar EvmWalletActiveChain = /** @class */ (function () {\r\n    function EvmWalletActiveChain(input) {\r\n        this.chain = input.chain;\r\n        this.chainId = input.chainId;\r\n        this.firstTransaction = input.firstTransaction ? EvmTransactionTimestamp.create(input.firstTransaction) : undefined;\r\n        this.lastTransaction = input.lastTransaction ? EvmTransactionTimestamp.create(input.lastTransaction) : undefined;\r\n    }\r\n    EvmWalletActiveChain.create = function (input) {\r\n        if (input instanceof EvmWalletActiveChain) {\r\n            return input;\r\n        }\r\n        return new EvmWalletActiveChain(input);\r\n    };\r\n    EvmWalletActiveChain.fromJSON = function (json) {\r\n        var input = {\r\n            chain: json.chain,\r\n            chainId: json.chain_id,\r\n            firstTransaction: json.first_transaction ? EvmTransactionTimestamp.fromJSON(json.first_transaction) : undefined,\r\n            lastTransaction: json.last_transaction ? EvmTransactionTimestamp.fromJSON(json.last_transaction) : undefined,\r\n        };\r\n        return EvmWalletActiveChain.create(input);\r\n    };\r\n    EvmWalletActiveChain.prototype.toJSON = function () {\r\n        return {\r\n            chain: this.chain,\r\n            chain_id: this.chainId,\r\n            first_transaction: this.firstTransaction ? this.firstTransaction.toJSON() : undefined,\r\n            last_transaction: this.lastTransaction ? this.lastTransaction.toJSON() : undefined,\r\n        };\r\n    };\r\n    return EvmWalletActiveChain;\r\n}());\n\nvar EvmWalletActiveChains = /** @class */ (function () {\r\n    function EvmWalletActiveChains(input) {\r\n        this.address = input.address;\r\n        this.activeChains = input.activeChains.map(function (item) { return EvmWalletActiveChain.create(item); });\r\n    }\r\n    EvmWalletActiveChains.create = function (input) {\r\n        if (input instanceof EvmWalletActiveChains) {\r\n            return input;\r\n        }\r\n        return new EvmWalletActiveChains(input);\r\n    };\r\n    EvmWalletActiveChains.fromJSON = function (json) {\r\n        var input = {\r\n            address: json.address,\r\n            activeChains: json.active_chains.map(function (item) { return EvmWalletActiveChain.fromJSON(item); }),\r\n        };\r\n        return EvmWalletActiveChains.create(input);\r\n    };\r\n    EvmWalletActiveChains.prototype.toJSON = function () {\r\n        return {\r\n            address: this.address,\r\n            active_chains: this.activeChains.map(function (item) { return item.toJSON(); }),\r\n        };\r\n    };\r\n    return EvmWalletActiveChains;\r\n}());\n\n// $ref: #/components/schemas/walletStat/properties/transactions\r\n// type: walletStat_transactions\r\n// properties:\r\n// - total ($ref: #/components/schemas/walletStat/properties/transactions/properties/total)\r\nvar EvmWalletStatTransactions = /** @class */ (function () {\r\n    function EvmWalletStatTransactions(input) {\r\n        this.total = input.total;\r\n    }\r\n    EvmWalletStatTransactions.create = function (input) {\r\n        if (input instanceof EvmWalletStatTransactions) {\r\n            return input;\r\n        }\r\n        return new EvmWalletStatTransactions(input);\r\n    };\r\n    EvmWalletStatTransactions.fromJSON = function (json) {\r\n        var input = {\r\n            total: json.total,\r\n        };\r\n        return EvmWalletStatTransactions.create(input);\r\n    };\r\n    EvmWalletStatTransactions.prototype.toJSON = function () {\r\n        return {\r\n            total: this.total,\r\n        };\r\n    };\r\n    return EvmWalletStatTransactions;\r\n}());\n\n// $ref: #/components/schemas/walletStat/properties/nft_transfers\r\n// type: walletStat_nft_transfers\r\n// properties:\r\n// - total ($ref: #/components/schemas/walletStat/properties/nft_transfers/properties/total)\r\nvar EvmWalletStatNftTransfers = /** @class */ (function () {\r\n    function EvmWalletStatNftTransfers(input) {\r\n        this.total = input.total;\r\n    }\r\n    EvmWalletStatNftTransfers.create = function (input) {\r\n        if (input instanceof EvmWalletStatNftTransfers) {\r\n            return input;\r\n        }\r\n        return new EvmWalletStatNftTransfers(input);\r\n    };\r\n    EvmWalletStatNftTransfers.fromJSON = function (json) {\r\n        var input = {\r\n            total: json.total,\r\n        };\r\n        return EvmWalletStatNftTransfers.create(input);\r\n    };\r\n    EvmWalletStatNftTransfers.prototype.toJSON = function () {\r\n        return {\r\n            total: this.total,\r\n        };\r\n    };\r\n    return EvmWalletStatNftTransfers;\r\n}());\n\n// $ref: #/components/schemas/walletStat/properties/token_transfers\r\n// type: walletStat_token_transfers\r\n// properties:\r\n// - total ($ref: #/components/schemas/walletStat/properties/token_transfers/properties/total)\r\nvar EvmWalletStatTokenTransfers = /** @class */ (function () {\r\n    function EvmWalletStatTokenTransfers(input) {\r\n        this.total = input.total;\r\n    }\r\n    EvmWalletStatTokenTransfers.create = function (input) {\r\n        if (input instanceof EvmWalletStatTokenTransfers) {\r\n            return input;\r\n        }\r\n        return new EvmWalletStatTokenTransfers(input);\r\n    };\r\n    EvmWalletStatTokenTransfers.fromJSON = function (json) {\r\n        var input = {\r\n            total: json.total,\r\n        };\r\n        return EvmWalletStatTokenTransfers.create(input);\r\n    };\r\n    EvmWalletStatTokenTransfers.prototype.toJSON = function () {\r\n        return {\r\n            total: this.total,\r\n        };\r\n    };\r\n    return EvmWalletStatTokenTransfers;\r\n}());\n\nvar EvmWalletStat = /** @class */ (function () {\r\n    function EvmWalletStat(input) {\r\n        this.nfts = input.nfts;\r\n        this.collections = input.collections;\r\n        this.transactions = EvmWalletStatTransactions.create(input.transactions);\r\n        this.nftTransfers = EvmWalletStatNftTransfers.create(input.nftTransfers);\r\n        this.tokenTransfers = EvmWalletStatTokenTransfers.create(input.tokenTransfers);\r\n    }\r\n    EvmWalletStat.create = function (input) {\r\n        if (input instanceof EvmWalletStat) {\r\n            return input;\r\n        }\r\n        return new EvmWalletStat(input);\r\n    };\r\n    EvmWalletStat.fromJSON = function (json) {\r\n        var input = {\r\n            nfts: json.nfts,\r\n            collections: json.collections,\r\n            transactions: EvmWalletStatTransactions.fromJSON(json.transactions),\r\n            nftTransfers: EvmWalletStatNftTransfers.fromJSON(json.nft_transfers),\r\n            tokenTransfers: EvmWalletStatTokenTransfers.fromJSON(json.token_transfers),\r\n        };\r\n        return EvmWalletStat.create(input);\r\n    };\r\n    EvmWalletStat.prototype.toJSON = function () {\r\n        return {\r\n            nfts: this.nfts,\r\n            collections: this.collections,\r\n            transactions: this.transactions.toJSON(),\r\n            nft_transfers: this.nftTransfers.toJSON(),\r\n            token_transfers: this.tokenTransfers.toJSON(),\r\n        };\r\n    };\r\n    return EvmWalletStat;\r\n}());\n\n// $ref: #/components/schemas/nftCollectionStat/properties/owners\r\n// type: nftCollectionStat_owners\r\n// properties:\r\n// - current ($ref: #/components/schemas/nftCollectionStat/properties/owners/properties/current)\r\nvar EvmNftCollectionStatOwners = /** @class */ (function () {\r\n    function EvmNftCollectionStatOwners(input) {\r\n        this.current = input.current;\r\n    }\r\n    EvmNftCollectionStatOwners.create = function (input) {\r\n        if (input instanceof EvmNftCollectionStatOwners) {\r\n            return input;\r\n        }\r\n        return new EvmNftCollectionStatOwners(input);\r\n    };\r\n    EvmNftCollectionStatOwners.fromJSON = function (json) {\r\n        var input = {\r\n            current: json.current,\r\n        };\r\n        return EvmNftCollectionStatOwners.create(input);\r\n    };\r\n    EvmNftCollectionStatOwners.prototype.toJSON = function () {\r\n        return {\r\n            current: this.current,\r\n        };\r\n    };\r\n    return EvmNftCollectionStatOwners;\r\n}());\n\n// $ref: #/components/schemas/nftCollectionStat/properties/transfers\r\n// type: nftCollectionStat_transfers\r\n// properties:\r\n// - total ($ref: #/components/schemas/nftCollectionStat/properties/transfers/properties/total)\r\nvar EvmNftCollectionStatTransfers = /** @class */ (function () {\r\n    function EvmNftCollectionStatTransfers(input) {\r\n        this.total = input.total;\r\n    }\r\n    EvmNftCollectionStatTransfers.create = function (input) {\r\n        if (input instanceof EvmNftCollectionStatTransfers) {\r\n            return input;\r\n        }\r\n        return new EvmNftCollectionStatTransfers(input);\r\n    };\r\n    EvmNftCollectionStatTransfers.fromJSON = function (json) {\r\n        var input = {\r\n            total: json.total,\r\n        };\r\n        return EvmNftCollectionStatTransfers.create(input);\r\n    };\r\n    EvmNftCollectionStatTransfers.prototype.toJSON = function () {\r\n        return {\r\n            total: this.total,\r\n        };\r\n    };\r\n    return EvmNftCollectionStatTransfers;\r\n}());\n\nvar EvmNftCollectionStat = /** @class */ (function () {\r\n    function EvmNftCollectionStat(input) {\r\n        this.totalTokens = input.totalTokens;\r\n        this.owners = EvmNftCollectionStatOwners.create(input.owners);\r\n        this.transfers = EvmNftCollectionStatTransfers.create(input.transfers);\r\n    }\r\n    EvmNftCollectionStat.create = function (input) {\r\n        if (input instanceof EvmNftCollectionStat) {\r\n            return input;\r\n        }\r\n        return new EvmNftCollectionStat(input);\r\n    };\r\n    EvmNftCollectionStat.fromJSON = function (json) {\r\n        var input = {\r\n            totalTokens: json.total_tokens,\r\n            owners: EvmNftCollectionStatOwners.fromJSON(json.owners),\r\n            transfers: EvmNftCollectionStatTransfers.fromJSON(json.transfers),\r\n        };\r\n        return EvmNftCollectionStat.create(input);\r\n    };\r\n    EvmNftCollectionStat.prototype.toJSON = function () {\r\n        return {\r\n            total_tokens: this.totalTokens,\r\n            owners: this.owners.toJSON(),\r\n            transfers: this.transfers.toJSON(),\r\n        };\r\n    };\r\n    return EvmNftCollectionStat;\r\n}());\n\n// $ref: #/components/schemas/nftTokenStat/properties/owners\r\n// type: nftTokenStat_owners\r\n// properties:\r\n// - current ($ref: #/components/schemas/nftTokenStat/properties/owners/properties/current)\r\nvar EvmNftTokenStatOwners = /** @class */ (function () {\r\n    function EvmNftTokenStatOwners(input) {\r\n        this.current = input.current;\r\n    }\r\n    EvmNftTokenStatOwners.create = function (input) {\r\n        if (input instanceof EvmNftTokenStatOwners) {\r\n            return input;\r\n        }\r\n        return new EvmNftTokenStatOwners(input);\r\n    };\r\n    EvmNftTokenStatOwners.fromJSON = function (json) {\r\n        var input = {\r\n            current: json.current,\r\n        };\r\n        return EvmNftTokenStatOwners.create(input);\r\n    };\r\n    EvmNftTokenStatOwners.prototype.toJSON = function () {\r\n        return {\r\n            current: this.current,\r\n        };\r\n    };\r\n    return EvmNftTokenStatOwners;\r\n}());\n\n// $ref: #/components/schemas/nftTokenStat/properties/transfers\r\n// type: nftTokenStat_transfers\r\n// properties:\r\n// - total ($ref: #/components/schemas/nftTokenStat/properties/transfers/properties/total)\r\nvar EvmNftTokenStatTransfers = /** @class */ (function () {\r\n    function EvmNftTokenStatTransfers(input) {\r\n        this.total = input.total;\r\n    }\r\n    EvmNftTokenStatTransfers.create = function (input) {\r\n        if (input instanceof EvmNftTokenStatTransfers) {\r\n            return input;\r\n        }\r\n        return new EvmNftTokenStatTransfers(input);\r\n    };\r\n    EvmNftTokenStatTransfers.fromJSON = function (json) {\r\n        var input = {\r\n            total: json.total,\r\n        };\r\n        return EvmNftTokenStatTransfers.create(input);\r\n    };\r\n    EvmNftTokenStatTransfers.prototype.toJSON = function () {\r\n        return {\r\n            total: this.total,\r\n        };\r\n    };\r\n    return EvmNftTokenStatTransfers;\r\n}());\n\nvar EvmNftTokenStat = /** @class */ (function () {\r\n    function EvmNftTokenStat(input) {\r\n        this.owners = EvmNftTokenStatOwners.create(input.owners);\r\n        this.transfers = EvmNftTokenStatTransfers.create(input.transfers);\r\n    }\r\n    EvmNftTokenStat.create = function (input) {\r\n        if (input instanceof EvmNftTokenStat) {\r\n            return input;\r\n        }\r\n        return new EvmNftTokenStat(input);\r\n    };\r\n    EvmNftTokenStat.fromJSON = function (json) {\r\n        var input = {\r\n            owners: EvmNftTokenStatOwners.fromJSON(json.owners),\r\n            transfers: EvmNftTokenStatTransfers.fromJSON(json.transfers),\r\n        };\r\n        return EvmNftTokenStat.create(input);\r\n    };\r\n    EvmNftTokenStat.prototype.toJSON = function () {\r\n        return {\r\n            owners: this.owners.toJSON(),\r\n            transfers: this.transfers.toJSON(),\r\n        };\r\n    };\r\n    return EvmNftTokenStat;\r\n}());\n\n// $ref: #/components/schemas/erc20TokenStat/properties/transfers\r\n// type: erc20TokenStat_transfers\r\n// properties:\r\n// - total ($ref: #/components/schemas/erc20TokenStat/properties/transfers/properties/total)\r\nvar EvmErc20TokenStatTransfers = /** @class */ (function () {\r\n    function EvmErc20TokenStatTransfers(input) {\r\n        this.total = input.total;\r\n    }\r\n    EvmErc20TokenStatTransfers.create = function (input) {\r\n        if (input instanceof EvmErc20TokenStatTransfers) {\r\n            return input;\r\n        }\r\n        return new EvmErc20TokenStatTransfers(input);\r\n    };\r\n    EvmErc20TokenStatTransfers.fromJSON = function (json) {\r\n        var input = {\r\n            total: json.total,\r\n        };\r\n        return EvmErc20TokenStatTransfers.create(input);\r\n    };\r\n    EvmErc20TokenStatTransfers.prototype.toJSON = function () {\r\n        return {\r\n            total: this.total,\r\n        };\r\n    };\r\n    return EvmErc20TokenStatTransfers;\r\n}());\n\nvar EvmErc20TokenStat = /** @class */ (function () {\r\n    function EvmErc20TokenStat(input) {\r\n        this.transfers = EvmErc20TokenStatTransfers.create(input.transfers);\r\n    }\r\n    EvmErc20TokenStat.create = function (input) {\r\n        if (input instanceof EvmErc20TokenStat) {\r\n            return input;\r\n        }\r\n        return new EvmErc20TokenStat(input);\r\n    };\r\n    EvmErc20TokenStat.fromJSON = function (json) {\r\n        var input = {\r\n            transfers: EvmErc20TokenStatTransfers.fromJSON(json.transfers),\r\n        };\r\n        return EvmErc20TokenStat.create(input);\r\n    };\r\n    EvmErc20TokenStat.prototype.toJSON = function () {\r\n        return {\r\n            transfers: this.transfers.toJSON(),\r\n        };\r\n    };\r\n    return EvmErc20TokenStat;\r\n}());\n\n// $ref: #/components/schemas/blockTokenStat/properties/transactions\r\n// type: blockTokenStat_transactions\r\n// properties:\r\n// - total ($ref: #/components/schemas/blockTokenStat/properties/transactions/properties/total)\r\nvar EvmBlockTokenStatTransactions = /** @class */ (function () {\r\n    function EvmBlockTokenStatTransactions(input) {\r\n        this.total = input.total;\r\n    }\r\n    EvmBlockTokenStatTransactions.create = function (input) {\r\n        if (input instanceof EvmBlockTokenStatTransactions) {\r\n            return input;\r\n        }\r\n        return new EvmBlockTokenStatTransactions(input);\r\n    };\r\n    EvmBlockTokenStatTransactions.fromJSON = function (json) {\r\n        var input = {\r\n            total: json.total,\r\n        };\r\n        return EvmBlockTokenStatTransactions.create(input);\r\n    };\r\n    EvmBlockTokenStatTransactions.prototype.toJSON = function () {\r\n        return {\r\n            total: this.total,\r\n        };\r\n    };\r\n    return EvmBlockTokenStatTransactions;\r\n}());\n\n// $ref: #/components/schemas/blockTokenStat/properties/nft_transfers\r\n// type: blockTokenStat_nft_transfers\r\n// properties:\r\n// - total ($ref: #/components/schemas/blockTokenStat/properties/nft_transfers/properties/total)\r\nvar EvmBlockTokenStatNftTransfers = /** @class */ (function () {\r\n    function EvmBlockTokenStatNftTransfers(input) {\r\n        this.total = input.total;\r\n    }\r\n    EvmBlockTokenStatNftTransfers.create = function (input) {\r\n        if (input instanceof EvmBlockTokenStatNftTransfers) {\r\n            return input;\r\n        }\r\n        return new EvmBlockTokenStatNftTransfers(input);\r\n    };\r\n    EvmBlockTokenStatNftTransfers.fromJSON = function (json) {\r\n        var input = {\r\n            total: json.total,\r\n        };\r\n        return EvmBlockTokenStatNftTransfers.create(input);\r\n    };\r\n    EvmBlockTokenStatNftTransfers.prototype.toJSON = function () {\r\n        return {\r\n            total: this.total,\r\n        };\r\n    };\r\n    return EvmBlockTokenStatNftTransfers;\r\n}());\n\nvar EvmBlockTokenStat = /** @class */ (function () {\r\n    function EvmBlockTokenStat(input) {\r\n        this.transactions = EvmBlockTokenStatTransactions.create(input.transactions);\r\n        this.nftTransfers = EvmBlockTokenStatNftTransfers.create(input.nftTransfers);\r\n    }\r\n    EvmBlockTokenStat.create = function (input) {\r\n        if (input instanceof EvmBlockTokenStat) {\r\n            return input;\r\n        }\r\n        return new EvmBlockTokenStat(input);\r\n    };\r\n    EvmBlockTokenStat.fromJSON = function (json) {\r\n        var input = {\r\n            transactions: EvmBlockTokenStatTransactions.fromJSON(json.transactions),\r\n            nftTransfers: EvmBlockTokenStatNftTransfers.fromJSON(json.nft_transfers),\r\n        };\r\n        return EvmBlockTokenStat.create(input);\r\n    };\r\n    EvmBlockTokenStat.prototype.toJSON = function () {\r\n        return {\r\n            transactions: this.transactions.toJSON(),\r\n            nft_transfers: this.nftTransfers.toJSON(),\r\n        };\r\n    };\r\n    return EvmBlockTokenStat;\r\n}());\n\nvar GetNFTTradesOperation = {\r\n    operationId: \"getNFTTrades\",\r\n    groupName: \"nft\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nft/{address}/trades\",\r\n    parameterNames: [\"chain\", \"from_block\", \"to_block\", \"from_date\", \"to_date\", \"marketplace\", \"cursor\", \"limit\", \"address\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return EvmTradeCollection.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var chain = request.chain ? EvmChain.create(request.chain) : undefined;\r\n        var fromBlock = request.fromBlock;\r\n        var toBlock = request.toBlock;\r\n        var fromDate = request.fromDate;\r\n        var toDate = request.toDate;\r\n        var marketplace = request.marketplace ? EvmGetNFTTradesMarketplaceEnum.create(request.marketplace) : undefined;\r\n        var cursor = request.cursor;\r\n        var limit = request.limit;\r\n        var address = EvmAddress.create(request.address);\r\n        return {\r\n            chain: chain ? chain.toJSON() : undefined,\r\n            from_block: fromBlock,\r\n            to_block: toBlock,\r\n            from_date: fromDate,\r\n            to_date: toDate,\r\n            marketplace: marketplace ? marketplace : undefined,\r\n            cursor: cursor,\r\n            limit: limit,\r\n            address: address.toJSON(),\r\n        };\r\n    },\r\n};\n\nvar Web3ApiVersionOperation = {\r\n    operationId: \"web3ApiVersion\",\r\n    groupName: \"utils\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/web3/version\",\r\n    parameterNames: [],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return EvmWeb3version.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        return {};\r\n    },\r\n};\n\nvar EndpointWeightsOperation = {\r\n    operationId: \"endpointWeights\",\r\n    groupName: \"utils\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/info/endpointWeights\",\r\n    parameterNames: [],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return EvmEndpointWeights.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        return {};\r\n    },\r\n};\n\nvar GetTopERC20TokensByMarketCapOperation = {\r\n    operationId: \"getTopERC20TokensByMarketCap\",\r\n    groupName: \"marketData\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/market-data/erc20s/top-tokens\",\r\n    parameterNames: [],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return EvmMarketDataERC20TokenItem.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        return {};\r\n    },\r\n};\n\nvar GetTopERC20TokensByPriceMoversOperation = {\r\n    operationId: \"getTopERC20TokensByPriceMovers\",\r\n    groupName: \"marketData\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/market-data/erc20s/top-movers\",\r\n    parameterNames: [],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return EvmMarketDataERC20TokensByPriceMovers.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        return {};\r\n    },\r\n};\n\nvar GetTopNFTCollectionsByMarketCapOperation = {\r\n    operationId: \"getTopNFTCollectionsByMarketCap\",\r\n    groupName: \"marketData\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/market-data/nfts/top-collections\",\r\n    parameterNames: [],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return EvmMarketDataTopNFTCollectionByMarketCapItem.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        return {};\r\n    },\r\n};\n\nvar GetHottestNFTCollectionsByTradingVolumeOperation = {\r\n    operationId: \"getHottestNFTCollectionsByTradingVolume\",\r\n    groupName: \"marketData\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/market-data/nfts/hottest-collections\",\r\n    parameterNames: [],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return json.map(function (item) { return EvmMarketDataHottestNFTCollectionByTradingVolumeItem.fromJSON(item); });\r\n    },\r\n    serializeRequest: function (request) {\r\n        return {};\r\n    },\r\n};\n\nvar ReviewContractsOperation = {\r\n    operationId: \"reviewContracts\",\r\n    groupName: \"utils\",\r\n    httpMethod: \"post\",\r\n    routePattern: \"/contracts-review\",\r\n    parameterNames: [\"chain\"],\r\n    hasResponse: true,\r\n    hasBody: true,\r\n    parseResponse: function (json) {\r\n        return EvmReviewContracts.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var chain = request.chain ? EvmChain.create(request.chain) : undefined;\r\n        return {\r\n            chain: chain ? chain.toJSON() : undefined,\r\n        };\r\n    },\r\n    serializeBody: function (body) {\r\n        var value = EvmContractsReviewDto.create(body);\r\n        return value.toJSON();\r\n    },\r\n};\n\nvar GetWalletActiveChainsOperation = {\r\n    operationId: \"getWalletActiveChains\",\r\n    groupName: \"wallets\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/wallets/{address}/chains\",\r\n    parameterNames: [\"address\", \"chains\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return EvmWalletActiveChains.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var address = EvmAddress.create(request.address);\r\n        var chains = request.chains ? request.chains.map(function (item) { return EvmChain.create(item); }) : undefined;\r\n        return {\r\n            address: address.toJSON(),\r\n            chains: chains ? chains.map(function (item) { return item.toJSON(); }) : undefined,\r\n        };\r\n    },\r\n};\n\nvar GetWalletStatsOperation = {\r\n    operationId: \"getWalletStats\",\r\n    groupName: \"wallets\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/wallets/{address}/stats\",\r\n    parameterNames: [\"chain\", \"address\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return EvmWalletStat.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var chain = request.chain ? EvmChain.create(request.chain) : undefined;\r\n        var address = EvmAddress.create(request.address);\r\n        return {\r\n            chain: chain ? chain.toJSON() : undefined,\r\n            address: address.toJSON(),\r\n        };\r\n    },\r\n};\n\nvar GetNFTCollectionStatsOperation = {\r\n    operationId: \"getNFTCollectionStats\",\r\n    groupName: \"nft\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nft/{address}/stats\",\r\n    parameterNames: [\"chain\", \"address\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return EvmNftCollectionStat.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var chain = request.chain ? EvmChain.create(request.chain) : undefined;\r\n        var address = EvmAddress.create(request.address);\r\n        return {\r\n            chain: chain ? chain.toJSON() : undefined,\r\n            address: address.toJSON(),\r\n        };\r\n    },\r\n};\n\nvar GetNFTTokenStatsOperation = {\r\n    operationId: \"getNFTTokenStats\",\r\n    groupName: \"nft\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/nft/{address}/{token_id}/stats\",\r\n    parameterNames: [\"chain\", \"address\", \"token_id\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return EvmNftTokenStat.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var chain = request.chain ? EvmChain.create(request.chain) : undefined;\r\n        var address = EvmAddress.create(request.address);\r\n        var tokenId = request.tokenId;\r\n        return {\r\n            chain: chain ? chain.toJSON() : undefined,\r\n            address: address.toJSON(),\r\n            token_id: tokenId,\r\n        };\r\n    },\r\n};\n\nvar GetTokenStatsOperation = {\r\n    operationId: \"getTokenStats\",\r\n    groupName: \"token\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/erc20/{address}/stats\",\r\n    parameterNames: [\"chain\", \"address\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return EvmErc20TokenStat.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var chain = request.chain ? EvmChain.create(request.chain) : undefined;\r\n        var address = EvmAddress.create(request.address);\r\n        return {\r\n            chain: chain ? chain.toJSON() : undefined,\r\n            address: address.toJSON(),\r\n        };\r\n    },\r\n};\n\nvar GetBlockStatsOperation = {\r\n    operationId: \"getBlockStats\",\r\n    groupName: \"block\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/block/{block_number_or_hash}/stats\",\r\n    parameterNames: [\"chain\", \"block_number_or_hash\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return EvmBlockTokenStat.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var chain = request.chain ? EvmChain.create(request.chain) : undefined;\r\n        var blockNumberOrHash = request.blockNumberOrHash;\r\n        return {\r\n            chain: chain ? chain.toJSON() : undefined,\r\n            block_number_or_hash: blockNumberOrHash,\r\n        };\r\n    },\r\n};\n\nvar operations = [\r\n    GetNFTTradesOperation,\r\n    Web3ApiVersionOperation,\r\n    EndpointWeightsOperation,\r\n    GetTopERC20TokensByMarketCapOperation,\r\n    GetTopERC20TokensByPriceMoversOperation,\r\n    GetTopNFTCollectionsByMarketCapOperation,\r\n    GetHottestNFTCollectionsByTradingVolumeOperation,\r\n    ReviewContractsOperation,\r\n    GetWalletActiveChainsOperation,\r\n    GetWalletStatsOperation,\r\n    GetNFTCollectionStatsOperation,\r\n    GetNFTTokenStatsOperation,\r\n    GetTokenStatsOperation,\r\n    GetBlockStatsOperation,\r\n];\n\nvar CommonEvmUtilsConfig = {\r\n    defaultEvmApiChain: {\r\n        name: 'defaultEvmApiChain',\r\n        defaultValue: '0x1',\r\n    },\r\n};\n\nvar CommonEvmUtilsConfigSetup = /** @class */ (function () {\r\n    function CommonEvmUtilsConfigSetup() {\r\n    }\r\n    CommonEvmUtilsConfigSetup.register = function (config) {\r\n        config.registerKey(CommonEvmUtilsConfig.defaultEvmApiChain);\r\n    };\r\n    return CommonEvmUtilsConfigSetup;\r\n}());\n\nvar CommonEvmUtils = /** @class */ (function (_super) {\r\n    __extends(CommonEvmUtils, _super);\r\n    function CommonEvmUtils(core) {\r\n        return _super.call(this, CommonEvmUtils.moduleName, core) || this;\r\n    }\r\n    CommonEvmUtils.create = function (core) {\r\n        return new CommonEvmUtils(core !== null && core !== void 0 ? core : commonCore.CoreProvider.getDefault());\r\n    };\r\n    CommonEvmUtils.prototype.setup = function () {\r\n        CommonEvmUtilsConfigSetup.register(this.core.config);\r\n    };\r\n    CommonEvmUtils.prototype.start = function () {\r\n        // Nothing\r\n    };\r\n    Object.defineProperty(CommonEvmUtils.prototype, \"EvmAddress\", {\r\n        get: function () {\r\n            return EvmAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommonEvmUtils.prototype, \"EvmChain\", {\r\n        get: function () {\r\n            return EvmChain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommonEvmUtils.prototype, \"EvmNative\", {\r\n        get: function () {\r\n            return EvmNative;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    CommonEvmUtils.moduleName = 'evmUtils';\r\n    return CommonEvmUtils;\r\n}(commonCore.Module));\n\nvar EvmChainResolver = /** @class */ (function () {\r\n    function EvmChainResolver() {\r\n    }\r\n    EvmChainResolver.resolve = function (chain, core) {\r\n        if (chain) {\r\n            return EvmChain.create(chain);\r\n        }\r\n        var defaultEvmChain = core.config.get(CommonEvmUtilsConfig.defaultEvmApiChain);\r\n        return EvmChain.create(defaultEvmChain);\r\n    };\r\n    return EvmChainResolver;\r\n}());\n\n/** Get the native balance for a specific wallet address. */\r\nvar getNativeBalanceOperation = {\r\n    method: 'GET',\r\n    name: 'getNativeBalance',\r\n    id: 'getNativeBalance',\r\n    groupName: 'balance',\r\n    urlPathPattern: '/{address}/balance',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'toBlock'],\r\n    getRequestUrlParams: getRequestUrlParams$H,\r\n    serializeRequest: serializeRequest$H,\r\n    deserializeRequest: deserializeRequest$H,\r\n    deserializeResponse: deserializeResponse$H,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$H(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        address: EvmAddress.create(request.address).checksum,\r\n    };\r\n}\r\nfunction deserializeResponse$H(jsonResponse) {\r\n    return {\r\n        balance: EvmNative.create(jsonResponse.balance, 'wei'),\r\n    };\r\n}\r\nfunction serializeRequest$H(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        toBlock: request.toBlock,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n    };\r\n}\r\nfunction deserializeRequest$H(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        toBlock: jsonRequest.toBlock,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Get the native balances for a set of specific addresses */\r\nvar getNativeBalancesForAddressesOperation = {\r\n    method: 'GET',\r\n    name: 'getNativeBalancesForAddresses',\r\n    id: 'getNativeBalancesForAddresses',\r\n    groupName: 'balance',\r\n    urlPathPattern: '/wallets/balances',\r\n    urlSearchParamNames: ['chain', 'toBlock', 'walletAddresses'],\r\n    getRequestUrlParams: getRequestUrlParams$G,\r\n    serializeRequest: serializeRequest$G,\r\n    deserializeRequest: deserializeRequest$G,\r\n    deserializeResponse: deserializeResponse$G,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$G(request, core) {\r\n    var _a;\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        wallet_addresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return EvmAddress.create(address).checksum; }),\r\n    };\r\n}\r\nfunction deserializeResponse$G(jsonResponse, request, core) {\r\n    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (chainBalances) { return ({\r\n        chain: EvmChainResolver.resolve(request.chain, core),\r\n        blockNumber: chainBalances.block_number,\r\n        blockTimestamp: chainBalances.block_timestamp,\r\n        totalBalance: EvmNative.create(chainBalances.total_balance, 'wei'),\r\n        walletBalances: chainBalances.wallet_balances.map(function (walletBalance) { return ({\r\n            address: EvmAddress.create(walletBalance.address),\r\n            balance: EvmNative.create(walletBalance.balance, 'wei'),\r\n        }); }),\r\n    }); });\r\n}\r\nfunction serializeRequest$G(request, core) {\r\n    var _a;\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        toBlock: request.toBlock,\r\n        walletAddresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return EvmAddress.create(address).checksum; }),\r\n    };\r\n}\r\nfunction deserializeRequest$G(jsonRequest, core) {\r\n    var _a;\r\n    return {\r\n        chain: EvmChainResolver.resolve(jsonRequest.chain, core),\r\n        toBlock: jsonRequest.toBlock,\r\n        walletAddresses: (_a = jsonRequest.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return EvmAddress.create(address); }),\r\n    };\r\n}\n\n/** Get the contents of a block given the block hash. */\r\nvar getBlockOperation = {\r\n    method: 'GET',\r\n    name: 'getBlock',\r\n    id: 'getBlock',\r\n    groupName: 'block',\r\n    isNullable: true,\r\n    urlPathPattern: '/block/{blockNumberOrHash}',\r\n    urlPathParamNames: ['blockNumberOrHash'],\r\n    urlSearchParamNames: ['chain', 'include'],\r\n    getRequestUrlParams: getRequestUrlParams$F,\r\n    serializeRequest: serializeRequest$F,\r\n    deserializeRequest: deserializeRequest$F,\r\n    deserializeResponse: deserializeResponse$F,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$F(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        blockNumberOrHash: request.blockNumberOrHash,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction deserializeResponse$F(jsonResponse, request, core) {\r\n    var _a;\r\n    var data = commonCore.toCamelCase(jsonResponse);\r\n    var chain = EvmChainResolver.resolve(request.chain, core);\r\n    // TODO: account for changes in api, now we have unknown types for addresses\r\n    // OR fix the types correctly in api\r\n    // I noticed that the docs comes with a type of \"string | unknown\" which automatically resolves to \"unknown\". I think we should fix this in the api, casting for now\r\n    return EvmBlock.create(__assign(__assign({}, data), { chain: chain, transactions: ((_a = data.transactions) !== null && _a !== void 0 ? _a : []).map(function (transaction) {\r\n            var _a, _b;\r\n            return EvmTransaction.create({\r\n                cumulativeGasUsed: transaction.receiptCumulativeGasUsed,\r\n                gasPrice: transaction.gasPrice,\r\n                gasUsed: transaction.receiptGasUsed,\r\n                index: transaction.transactionIndex,\r\n                contractAddress: transaction.receiptContractAddress,\r\n                receiptRoot: transaction.receiptRoot,\r\n                receiptStatus: +transaction.receiptStatus,\r\n                chain: chain,\r\n                data: transaction.input,\r\n                from: transaction.fromAddress,\r\n                hash: transaction.hash,\r\n                nonce: transaction.nonce,\r\n                value: transaction.value,\r\n                blockHash: transaction.blockHash,\r\n                blockNumber: +transaction.blockNumber,\r\n                blockTimestamp: new Date(transaction.blockTimestamp),\r\n                gas: transaction.gas,\r\n                to: transaction.toAddress,\r\n                logs: ((_a = transaction.logs) !== null && _a !== void 0 ? _a : []).map(function (jsonLog) {\r\n                    var log = commonCore.toCamelCase(jsonLog);\r\n                    return EvmTransactionLog.create({\r\n                        chain: chain,\r\n                        address: log.address,\r\n                        blockHash: log.blockHash,\r\n                        blockNumber: +log.blockNumber,\r\n                        data: log.data,\r\n                        topics: [log.topic0, log.topic1, log.topic2, log.topic3],\r\n                        transactionHash: log.transactionHash,\r\n                        blockTimestamp: log.blockTimestamp,\r\n                        logIndex: +log.logIndex,\r\n                        transactionIndex: +log.transactionIndex,\r\n                    });\r\n                }),\r\n                internalTransactions: ((_b = transaction.internalTransactions) !== null && _b !== void 0 ? _b : []).map(function (jsonInternalTransaction) {\r\n                    var internalTransaction = commonCore.toCamelCase(jsonInternalTransaction);\r\n                    return EvmInternalTransaction.create(__assign({ chain: chain }, internalTransaction));\r\n                }),\r\n            });\r\n        }) }));\r\n}\r\nfunction serializeRequest$F(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        blockNumberOrHash: request.blockNumberOrHash,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction deserializeRequest$F(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        blockNumberOrHash: jsonRequest.blockNumberOrHash,\r\n        include: jsonRequest.include,\r\n    };\r\n}\n\n/** Get the closest block given the date. */\r\nvar getDateToBlockOperation = {\r\n    method: 'GET',\r\n    name: 'getDateToBlock',\r\n    id: 'getDateToBlock',\r\n    groupName: 'block',\r\n    urlPathPattern: '/dateToBlock',\r\n    urlSearchParamNames: ['chain', 'date'],\r\n    getRequestUrlParams: getRequestUrlParams$E,\r\n    serializeRequest: serializeRequest$E,\r\n    deserializeRequest: deserializeRequest$E,\r\n    deserializeResponse: deserializeResponse$E,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$E(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        date: new Date(request.date).toISOString(),\r\n    };\r\n}\r\nfunction deserializeResponse$E(jsonResponse) {\r\n    return EvmBlockDate.create(jsonResponse);\r\n}\r\nfunction serializeRequest$E(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        date: new Date(request.date).toISOString(),\r\n    };\r\n}\r\nfunction deserializeRequest$E(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        date: new Date(jsonRequest.date),\r\n    };\r\n}\n\n/**\r\n * Fetch the pair data of the provided token0+token1 combination.\r\n * The token0 and token1 options are interchangable (ie. there is no different outcome in \"token0=WETH and token1=USDT\" or \"token0=USDT and token1=WETH\")\r\n */\r\nvar getPairAddressOperation = {\r\n    method: 'GET',\r\n    name: 'getPairAddress',\r\n    id: 'getPairAddress',\r\n    groupName: 'defi',\r\n    urlPathPattern: '/{token0Address}/{token1Address}/pairAddress',\r\n    urlPathParamNames: ['token0Address', 'token1Address'],\r\n    urlSearchParamNames: ['chain', 'toBlock', 'toDate', 'exchange'],\r\n    getRequestUrlParams: getRequestUrlParams$D,\r\n    serializeRequest: serializeRequest$D,\r\n    deserializeRequest: deserializeRequest$D,\r\n    deserializeResponse: deserializeResponse$D,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$D(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        to_block: request.toBlock,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        exchange: request.exchange,\r\n        token0Address: EvmAddress.create(request.token0Address).lowercase,\r\n        token1Address: EvmAddress.create(request.token1Address).lowercase,\r\n    };\r\n}\r\nfunction createErc20Token(token, core, chain) {\r\n    var _a, _b, _c;\r\n    return Erc20Token.create({\r\n        contractAddress: (token === null || token === void 0 ? void 0 : token.address) ? EvmAddress.create(token === null || token === void 0 ? void 0 : token.address) : '',\r\n        decimals: (_a = token === null || token === void 0 ? void 0 : token.decimals) !== null && _a !== void 0 ? _a : 0,\r\n        name: (_b = token === null || token === void 0 ? void 0 : token.name) !== null && _b !== void 0 ? _b : '',\r\n        symbol: (_c = token === null || token === void 0 ? void 0 : token.symbol) !== null && _c !== void 0 ? _c : '',\r\n        logo: token === null || token === void 0 ? void 0 : token.logo,\r\n        thumbnail: token === null || token === void 0 ? void 0 : token.thumbnail,\r\n        chain: EvmChainResolver.resolve(chain, core),\r\n    });\r\n}\r\nfunction deserializeResponse$D(jsonResponse, request, core) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h;\r\n    return {\r\n        //   ApiResult types generated all come as undefined which should not be the case TODO:\r\n        token0: {\r\n            token: createErc20Token(jsonResponse.token0, core, request.chain),\r\n            blockNumber: (_a = jsonResponse.token0) === null || _a === void 0 ? void 0 : _a.block_number,\r\n            validated: (_b = jsonResponse.token0) === null || _b === void 0 ? void 0 : _b.validated,\r\n            createdAt: ((_c = jsonResponse.token0) === null || _c === void 0 ? void 0 : _c.created_at) ? new Date((_d = jsonResponse.token0) === null || _d === void 0 ? void 0 : _d.created_at) : undefined,\r\n        },\r\n        token1: {\r\n            token: createErc20Token(jsonResponse.token1, core, request.chain),\r\n            blockNumber: (_e = jsonResponse.token1) === null || _e === void 0 ? void 0 : _e.block_number,\r\n            validated: (_f = jsonResponse.token1) === null || _f === void 0 ? void 0 : _f.validated,\r\n            createdAt: ((_g = jsonResponse.token1) === null || _g === void 0 ? void 0 : _g.created_at) ? new Date((_h = jsonResponse.token1) === null || _h === void 0 ? void 0 : _h.created_at) : undefined,\r\n        },\r\n        pairAddress: jsonResponse.pairAddress ? EvmAddress.create(jsonResponse.pairAddress) : undefined,\r\n    };\r\n}\r\nfunction serializeRequest$D(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        toBlock: request.toBlock,\r\n        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        exchange: request.exchange,\r\n        token0Address: EvmAddress.create(request.token0Address).lowercase,\r\n        token1Address: EvmAddress.create(request.token1Address).lowercase,\r\n    };\r\n}\r\nfunction deserializeRequest$D(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        toBlock: jsonRequest.toBlock,\r\n        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\r\n        exchange: jsonRequest.exchange,\r\n        token0Address: EvmAddress.create(jsonRequest.token0Address),\r\n        token1Address: EvmAddress.create(jsonRequest.token1Address),\r\n    };\r\n}\n\n/** Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment. */\r\nvar getPairReservesOperation = {\r\n    method: 'GET',\r\n    name: 'getPairReserves',\r\n    id: 'getPairReserves',\r\n    groupName: 'defi',\r\n    urlPathPattern: '/{pairAddress}/reserves',\r\n    urlPathParamNames: ['pairAddress'],\r\n    urlSearchParamNames: ['chain', 'toBlock', 'toDate'],\r\n    getRequestUrlParams: getRequestUrlParams$C,\r\n    serializeRequest: serializeRequest$C,\r\n    deserializeRequest: deserializeRequest$C,\r\n    deserializeResponse: deserializeResponse$C,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$C(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        pairAddress: EvmAddress.create(request.pairAddress).lowercase,\r\n        to_block: request.toBlock,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n    };\r\n}\r\nfunction serializeRequest$C(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        toBlock: request.toBlock,\r\n        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        pairAddress: EvmAddress.create(request.pairAddress).lowercase,\r\n    };\r\n}\r\nfunction deserializeRequest$C(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        toBlock: jsonRequest.toBlock,\r\n        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\r\n        pairAddress: EvmAddress.create(jsonRequest.pairAddress),\r\n    };\r\n}\r\nfunction deserializeResponse$C(jsonResponse) {\r\n    return jsonResponse;\r\n}\n\n/** Get events for a contract ordered by block number in descending order. */\r\nvar getContractEventsOperation = {\r\n    method: 'POST',\r\n    name: 'getContractEvents',\r\n    id: 'getContractEvents',\r\n    groupName: 'events',\r\n    urlPathPattern: '/{address}/events',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'topic', 'offset', 'limit', 'cursor'],\r\n    bodyParamNames: ['abi'],\r\n    bodyType: 'raw',\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$B,\r\n    getRequestBody: getRequestBody$3,\r\n    serializeRequest: serializeRequest$B,\r\n    deserializeRequest: deserializeRequest$B,\r\n    deserializeResponse: deserializeResponse$B,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$B(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        from_block: commonCore.maybe(request.fromBlock, String),\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        topic: request.topic,\r\n        offset: commonCore.maybe(request.offset, String),\r\n        limit: commonCore.maybe(request.limit, String),\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction getRequestBody$3(request) {\r\n    return request.abi;\r\n}\r\nfunction deserializeResponse$B(jsonResponse, request, core) {\r\n    var _a, _b;\r\n    return (_b = ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : [])) === null || _b === void 0 ? void 0 : _b.map(function (event) {\r\n        return EvmEvent.create({\r\n            chain: EvmChainResolver.resolve(request.chain, core),\r\n            address: request.address,\r\n            blockHash: event.block_hash,\r\n            blockNumber: event.block_number,\r\n            blockTimestamp: event.block_timestamp,\r\n            transactionHash: event.transaction_hash,\r\n            data: {\r\n                to: event.data.to,\r\n                from: event.data.from,\r\n                value: commonCore.maybe(event.data.value, function (value) { return EvmNative.create(value, 'wei'); }),\r\n            },\r\n        });\r\n    });\r\n}\r\nfunction serializeRequest$B(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        topic: request.topic,\r\n        offset: request.offset,\r\n        limit: request.limit,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        abi: request.abi,\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeRequest$B(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : undefined,\r\n        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\r\n        topic: jsonRequest.topic,\r\n        offset: jsonRequest.offset,\r\n        limit: jsonRequest.limit,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        abi: jsonRequest.abi,\r\n        cursor: jsonRequest.cursor,\r\n    };\r\n}\n\n/** Get the logs for a contract. */\r\nvar getContractLogsOperation = {\r\n    method: 'GET',\r\n    name: 'getContractLogs',\r\n    id: 'getContractLogs',\r\n    groupName: 'events',\r\n    urlPathPattern: '/{address}/logs',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: [\r\n        'chain',\r\n        'blockNumber',\r\n        'fromBlock',\r\n        'toBlock',\r\n        'fromDate',\r\n        'toDate',\r\n        'topic0',\r\n        'limit',\r\n        'cursor',\r\n    ],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$A,\r\n    serializeRequest: serializeRequest$A,\r\n    deserializeRequest: deserializeRequest$A,\r\n    deserializeResponse: deserializeResponse$A,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$A(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        block_number: request.blockNumber,\r\n        from_block: request.fromBlock,\r\n        to_block: request.toBlock,\r\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        topic0: request.topic0,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n    };\r\n}\r\nfunction serializeRequest$A(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        blockNumber: request.blockNumber,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        topic0: request.topic0,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n    };\r\n}\r\nfunction deserializeRequest$A(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        blockNumber: jsonRequest.blockNumber,\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : undefined,\r\n        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\r\n        topic0: jsonRequest.topic0,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n    };\r\n}\r\nfunction deserializeResponse$A(jsonResponse, request, core) {\r\n    var _a, _b;\r\n    return (_b = ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : [])) === null || _b === void 0 ? void 0 : _b.map(function (log) {\r\n        return EvmTransactionLog.create(__assign(__assign({}, commonCore.toCamelCase(log)), { topics: [log.topic0, log.topic1, log.topic2, log.topic3], blockNumber: Number(log.block_number), chain: EvmChainResolver.resolve(request.chain, core) }));\r\n    });\r\n}\n\n/** Upload multiple files to IPFS and place them in a folder directory. */\r\nvar uploadFolderOperation = {\r\n    method: 'POST',\r\n    name: 'uploadFolder',\r\n    id: 'uploadFolder',\r\n    groupName: 'ipfs',\r\n    urlPathPattern: '/ipfs/uploadFolder',\r\n    bodyType: 'raw',\r\n    bodyParamNames: ['abi'],\r\n    getRequestUrlParams: getRequestUrlParams$z,\r\n    serializeRequest: serializeRequest$z,\r\n    deserializeRequest: deserializeRequest$z,\r\n    deserializeResponse: deserializeResponse$z,\r\n    getRequestBody: getRequestBody$2,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$z(_) {\r\n    return {};\r\n}\r\nfunction getRequestBody$2(request) {\r\n    return request.abi;\r\n}\r\nfunction deserializeResponse$z(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$z(request) {\r\n    return {\r\n        abi: JSON.stringify(request.abi),\r\n    };\r\n}\r\nfunction deserializeRequest$z(jsonRequest) {\r\n    return {\r\n        abi: JSON.parse(jsonRequest.abi),\r\n    };\r\n}\n\n/**\r\n * Get NFTs for a given contract address, including metadata for all NFTs (where available).\r\n * * Results are limited to 100 per page by default\r\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.\r\n */\r\nvar getContractNFTsOperation = {\r\n    method: 'GET',\r\n    name: 'getContractNFTs',\r\n    id: 'getContractNFTs',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/{address}',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: [\r\n        'chain',\r\n        'format',\r\n        'limit',\r\n        'totalRanges',\r\n        'range',\r\n        'cursor',\r\n        'normalizeMetadata',\r\n        'mediaItems',\r\n    ],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$y,\r\n    serializeRequest: serializeRequest$y,\r\n    deserializeRequest: deserializeRequest$y,\r\n    deserializeResponse: deserializeResponse$y,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$y(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        format: request.format,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        totalRanges: commonCore.maybe(request.totalRanges, String),\r\n        range: commonCore.maybe(request.range, String),\r\n        cursor: request.cursor,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        media_items: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeResponse$y(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (data) {\r\n        var chain = EvmChainResolver.resolve(request.chain, core);\r\n        var nft = commonCore.toCamelCase(data);\r\n        return EvmNft.create(__assign(__assign({}, commonCore.toCamelCase(nft)), { chain: chain, ownerOf: nft.ownerOf ? EvmAddress.create(nft.ownerOf) : undefined, lastMetadataSync: nft.lastMetadataSync ? new Date(nft.lastMetadataSync) : undefined, lastTokenUriSync: nft.lastTokenUriSync ? new Date(nft.lastTokenUriSync) : undefined, media: commonCore.maybe(nft.media, function (media) {\r\n                return EvmNftMedia.create(__assign({ chain: chain }, commonCore.toCamelCase(media)));\r\n            }) }));\r\n    });\r\n}\r\nfunction serializeRequest$y(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        format: request.format,\r\n        limit: request.limit,\r\n        totalRanges: request.totalRanges,\r\n        range: request.range,\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        mediaItems: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeRequest$y(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        format: jsonRequest.format,\r\n        limit: jsonRequest.limit,\r\n        totalRanges: jsonRequest.totalRanges,\r\n        range: jsonRequest.range,\r\n        cursor: jsonRequest.cursor,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        normalizeMetadata: jsonRequest.normalizeMetadata,\r\n        mediaItems: jsonRequest.mediaItems,\r\n    };\r\n}\n\n/**\r\n * Get NFTs for a given contract address, including metadata for all NFTs (where available).\r\n * * Results are limited to 100 per page by default\r\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.\r\n */\r\nvar getMultipleNFTsOperation = {\r\n    method: 'POST',\r\n    name: 'getMultipleNFTs',\r\n    id: 'getMultipleNFTs',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/getMultipleNFTs',\r\n    urlSearchParamNames: ['chain'],\r\n    bodyType: 'properties',\r\n    bodyParamNames: ['tokens', 'normalizeMetadata', 'mediaItems'],\r\n    getRequestUrlParams: getRequestUrlParams$x,\r\n    getRequestBody: getRequestBody$1,\r\n    serializeRequest: serializeRequest$x,\r\n    deserializeRequest: deserializeRequest$x,\r\n    deserializeResponse: deserializeResponse$x,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$x(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n    };\r\n}\r\nfunction getRequestBody$1(request) {\r\n    return {\r\n        tokens: request.tokens.map(function (token) { return ({\r\n            token_address: EvmAddress.create(token.tokenAddress).lowercase,\r\n            token_id: token.tokenId,\r\n        }); }),\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        media_items: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeResponse$x(jsonResponse, request, core) {\r\n    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (data) {\r\n        if (data === null) {\r\n            return null;\r\n        }\r\n        var chain = EvmChainResolver.resolve(request.chain, core);\r\n        var nft = commonCore.toCamelCase(data);\r\n        return EvmNft.create(__assign(__assign({}, commonCore.toCamelCase(nft)), { chain: EvmChainResolver.resolve(request.chain, core), amount: nft.amount ? parseInt(nft.amount, 10) : undefined, ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: commonCore.dateInputToDate(nft.lastMetadataSync), lastTokenUriSync: commonCore.dateInputToDate(nft.lastTokenUriSync), media: commonCore.maybe(nft.media, function (media) {\r\n                return EvmNftMedia.create(__assign({ chain: chain }, commonCore.toCamelCase(media)));\r\n            }) }));\r\n    });\r\n}\r\nfunction serializeRequest$x(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        tokens: request.tokens.map(function (token) { return ({\r\n            tokenAddress: EvmAddress.create(token.tokenAddress).lowercase,\r\n            tokenId: token.tokenId,\r\n        }); }),\r\n        mediaItems: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeRequest$x(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        normalizeMetadata: jsonRequest.normalizeMetadata,\r\n        tokens: jsonRequest.tokens.map(function (token) { return ({\r\n            tokenAddress: EvmAddress.create(token.tokenAddress),\r\n            tokenId: token.tokenId,\r\n        }); }),\r\n        mediaItems: jsonRequest.mediaItems,\r\n    };\r\n}\n\n/**\r\n * Get the collection / contract level metadata for a given contract (name, symbol, base token uri).\r\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\r\n */\r\nvar getNFTContractMetadataOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTContractMetadata',\r\n    id: 'getNFTContractMetadata',\r\n    groupName: 'nft',\r\n    isNullable: true,\r\n    urlPathPattern: '/nft/{address}/metadata',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain'],\r\n    getRequestUrlParams: getRequestUrlParams$w,\r\n    serializeRequest: serializeRequest$w,\r\n    deserializeRequest: deserializeRequest$w,\r\n    deserializeResponse: deserializeResponse$w,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$w(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n    };\r\n}\r\nfunction deserializeResponse$w(jsonResponse, request, core) {\r\n    return EvmNftMetadata.create(__assign(__assign({}, commonCore.toCamelCase(jsonResponse)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(jsonResponse.token_address), syncedAt: jsonResponse.synced_at ? new Date(jsonResponse.synced_at) : null, contractType: commonCore.maybe(jsonResponse.contract_type) }));\r\n}\r\nfunction serializeRequest$w(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).checksum,\r\n    };\r\n}\r\nfunction deserializeRequest$w(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        address: EvmAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Get transfers of NFTs for a given contract and other parameters. */\r\nvar getNFTContractTransfersOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTContractTransfers',\r\n    id: 'getNFTContractTransfers',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/{address}/transfers',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'fromBlock', 'fromDate', 'toBlock', 'toDate'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$v,\r\n    serializeRequest: serializeRequest$v,\r\n    deserializeRequest: deserializeRequest$v,\r\n    deserializeResponse: deserializeResponse$v,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$v(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        format: request.format,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        from_block: commonCore.maybe(request.fromBlock, String),\r\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$v(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\r\n        return EvmNftTransfer.create(__assign(__assign({}, commonCore.toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, 'wei') : null, blockTimestamp: new Date(transfer.block_timestamp) }));\r\n    });\r\n}\r\nfunction serializeRequest$v(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        format: request.format,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n    };\r\n}\r\nfunction deserializeRequest$v(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        format: jsonRequest.format,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : undefined,\r\n        toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\r\n    };\r\n}\n\n/** Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH). */\r\nvar getNFTLowestPriceOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTLowestPrice',\r\n    id: 'getNFTLowestPrice',\r\n    groupName: 'nft',\r\n    isNullable: true,\r\n    urlPathPattern: '/nft/{address}/lowestprice',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'days', 'marketplace'],\r\n    getRequestUrlParams: getRequestUrlParams$u,\r\n    serializeRequest: serializeRequest$u,\r\n    deserializeRequest: deserializeRequest$u,\r\n    deserializeResponse: deserializeResponse$u,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$u(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        days: commonCore.maybe(request.days, String),\r\n        marketplace: request.marketplace,\r\n    };\r\n}\r\nfunction deserializeResponse$u(jsonResponse) {\r\n    return EvmTrade.fromJSON(jsonResponse);\r\n}\r\nfunction serializeRequest$u(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        days: request.days,\r\n        marketplace: request.marketplace,\r\n        address: EvmAddress.create(request.address).checksum,\r\n    };\r\n}\r\nfunction deserializeRequest$u(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        days: jsonRequest.days,\r\n        marketplace: jsonRequest.marketplace,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/**\r\n * Get NFT data, including metadata (where available), for the given NFT token ID and contract address.\r\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\r\n */\r\nvar getNFTMetadataOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTMetadata',\r\n    id: 'getNFTMetadata',\r\n    groupName: 'nft',\r\n    isNullable: true,\r\n    urlPathPattern: '/nft/{address}/{tokenId}',\r\n    urlPathParamNames: ['address', 'tokenId'],\r\n    urlSearchParamNames: ['chain', 'format', 'normalizeMetadata', 'mediaItems'],\r\n    getRequestUrlParams: getRequestUrlParams$t,\r\n    serializeRequest: serializeRequest$t,\r\n    deserializeRequest: deserializeRequest$t,\r\n    deserializeResponse: deserializeResponse$t,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$t(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        tokenId: request.tokenId,\r\n        format: request.format,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        media_items: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeResponse$t(jsonResponse, request, core) {\r\n    var chain = EvmChainResolver.resolve(request.chain, core);\r\n    var nft = commonCore.toCamelCase(jsonResponse);\r\n    return EvmNft.create(__assign(__assign({}, nft), { chain: EvmChainResolver.resolve(request.chain, core), ownerOf: nft.ownerOf ? EvmAddress.create(nft.ownerOf) : undefined, lastMetadataSync: nft.lastMetadataSync ? new Date(nft.lastMetadataSync) : undefined, lastTokenUriSync: nft.lastTokenUriSync ? new Date(nft.lastTokenUriSync) : undefined, media: commonCore.maybe(nft.media, function (media) {\r\n            return EvmNftMedia.create(__assign({ chain: chain }, commonCore.toCamelCase(media)));\r\n        }) }));\r\n}\r\nfunction serializeRequest$t(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        format: request.format,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        tokenId: request.tokenId,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        mediaItems: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeRequest$t(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        format: jsonRequest.format,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        tokenId: jsonRequest.tokenId,\r\n        normalizeMetadata: jsonRequest.normalizeMetadata,\r\n        mediaItems: jsonRequest.mediaItems,\r\n    };\r\n}\n\n/**\r\n * Get owners of NFTs for a given contract.\r\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.\r\n */\r\nvar getNFTOwnersOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTOwners',\r\n    id: 'getNFTOwners',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/{address}/owners',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'normalizeMetadata', 'mediaItems'],\r\n    firstPageIndex: 1,\r\n    getRequestUrlParams: getRequestUrlParams$s,\r\n    serializeRequest: serializeRequest$s,\r\n    deserializeRequest: deserializeRequest$s,\r\n    deserializeResponse: deserializeResponse$s,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$s(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        format: request.format,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        media_items: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeResponse$s(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (data) {\r\n        var chain = EvmChainResolver.resolve(request.chain, core);\r\n        var nft = commonCore.toCamelCase(data);\r\n        return EvmNft.create(__assign(__assign({}, nft), { chain: EvmChainResolver.resolve(request.chain, core), ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: new Date(nft.lastMetadataSync), lastTokenUriSync: new Date(nft.lastTokenUriSync), media: commonCore.maybe(nft.media, function (media) {\r\n                return EvmNftMedia.create(__assign({ chain: chain }, commonCore.toCamelCase(media)));\r\n            }) }));\r\n    });\r\n}\r\nfunction serializeRequest$s(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        format: request.format,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        mediaItems: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeRequest$s(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        format: jsonRequest.format,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        normalizeMetadata: jsonRequest.normalizeMetadata,\r\n        mediaItems: jsonRequest.mediaItems,\r\n    };\r\n}\n\n/**\r\n * Get owners of a specific NFT given the contract address and token ID.\r\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\r\n */\r\nvar getNFTTokenIdOwnersOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTTokenIdOwners',\r\n    id: 'getNFTTokenIdOwners',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/{address}/{tokenId}/owners',\r\n    urlPathParamNames: ['address', 'tokenId'],\r\n    urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'normalizeMetadata', 'mediaItems'],\r\n    firstPageIndex: 1,\r\n    getRequestUrlParams: getRequestUrlParams$r,\r\n    serializeRequest: serializeRequest$r,\r\n    deserializeRequest: deserializeRequest$r,\r\n    deserializeResponse: deserializeResponse$r,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$r(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        format: request.format,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n        tokenId: request.tokenId,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        media_items: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeResponse$r(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (data) {\r\n        var chain = EvmChainResolver.resolve(request.chain, core);\r\n        var nft = commonCore.toCamelCase(data);\r\n        return EvmNft.create(__assign(__assign({}, commonCore.toCamelCase(nft)), { chain: EvmChainResolver.resolve(request.chain, core), ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: new Date(nft.lastMetadataSync), lastTokenUriSync: new Date(nft.lastTokenUriSync), media: commonCore.maybe(nft.media, function (media) {\r\n                return EvmNftMedia.create(__assign({ chain: chain }, commonCore.toCamelCase(media)));\r\n            }) }));\r\n    });\r\n}\r\nfunction serializeRequest$r(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        format: request.format,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        tokenId: request.tokenId,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        mediaItems: request.mediaItems,\r\n    };\r\n}\r\nfunction deserializeRequest$r(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        format: jsonRequest.format,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        tokenId: jsonRequest.tokenId,\r\n        normalizeMetadata: jsonRequest.normalizeMetadata,\r\n        mediaItems: jsonRequest.mediaItems,\r\n    };\r\n}\n\n/** Get trades of NFTs for a given contract and marketplace. */\r\nvar getNFTTradesOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTTrades',\r\n    id: 'getNFTTrades',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/{address}/trades',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'marketplace', 'cursor', 'limit'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$q,\r\n    serializeRequest: serializeRequest$q,\r\n    deserializeRequest: deserializeRequest$q,\r\n    deserializeResponse: deserializeResponse$q,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$q(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        from_block: commonCore.maybe(request.fromBlock, String),\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        marketplace: request.marketplace,\r\n        cursor: request.cursor,\r\n        limit: commonCore.maybe(request.limit, String),\r\n    };\r\n}\r\nfunction deserializeResponse$q(jsonResponse) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (trade) { return EvmTrade.fromJSON(trade); });\r\n}\r\nfunction serializeRequest$q(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        fromDate: request.fromDate,\r\n        toDate: request.toDate,\r\n        marketplace: request.marketplace,\r\n        cursor: request.cursor,\r\n        limit: request.limit,\r\n        address: EvmAddress.create(request.address).checksum,\r\n    };\r\n}\r\nfunction deserializeRequest$q(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        fromDate: jsonRequest.fromDate,\r\n        toDate: jsonRequest.toDate,\r\n        marketplace: jsonRequest.marketplace,\r\n        cursor: jsonRequest.cursor,\r\n        limit: jsonRequest.limit,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Get transfers of NFTs given a block number or block hash. */\r\nvar getNFTTransfersByBlockOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTTransfersByBlock',\r\n    id: 'getNFTTransfersByBlock',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/block/{blockNumberOrHash}/nft/transfers',\r\n    urlPathParamNames: ['blockNumberOrHash'],\r\n    urlSearchParamNames: ['chain', 'limit', 'cursor'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$p,\r\n    serializeRequest: serializeRequest$p,\r\n    deserializeRequest: deserializeRequest$p,\r\n    deserializeResponse: deserializeResponse$p,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$p(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n        blockNumberOrHash: request.blockNumberOrHash,\r\n    };\r\n}\r\nfunction deserializeResponse$p(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\r\n        return EvmNftTransfer.create(__assign(__assign({}, commonCore.toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.token_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, 'wei') : null, blockTimestamp: new Date(transfer.block_timestamp) }));\r\n    });\r\n}\r\nfunction serializeRequest$p(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n        blockNumberOrHash: request.blockNumberOrHash,\r\n    };\r\n}\r\nfunction deserializeRequest$p(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n        blockNumberOrHash: jsonRequest.blockNumberOrHash,\r\n    };\r\n}\n\n/** Get transfers of NFTs from a block number to a block number. */\r\nvar getNFTTransfersFromToBlockOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTTransfersFromToBlock',\r\n    id: 'getNFTTransfersFromToBlock',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/transfers',\r\n    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'format', 'limit', 'cursor'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$o,\r\n    serializeRequest: serializeRequest$o,\r\n    deserializeRequest: deserializeRequest$o,\r\n    deserializeResponse: deserializeResponse$o,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$o(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        from_block: commonCore.maybe(request.fromBlock, String),\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        format: request.format,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$o(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\r\n        return EvmNftTransfer.create(__assign(__assign({}, commonCore.toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, 'wei') : null, blockTimestamp: new Date(transfer.block_timestamp) }));\r\n    });\r\n}\r\nfunction serializeRequest$o(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        fromDate: request.fromDate,\r\n        toDate: request.toDate,\r\n        format: request.format,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeRequest$o(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        fromDate: jsonRequest.fromDate,\r\n        toDate: jsonRequest.toDate,\r\n        format: jsonRequest.format,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n    };\r\n}\n\n/** Get transfers of an NFT given a contract address and token ID. */\r\nvar getNFTTransfersOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTTransfers',\r\n    id: 'getNFTTransfers',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/{address}/{tokenId}/transfers',\r\n    urlPathParamNames: ['address', 'tokenId'],\r\n    urlSearchParamNames: ['chain', 'format', 'limit', 'cursor'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$n,\r\n    serializeRequest: serializeRequest$n,\r\n    deserializeRequest: deserializeRequest$n,\r\n    deserializeResponse: deserializeResponse$n,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$n(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        format: request.format,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n        tokenId: request.tokenId,\r\n    };\r\n}\r\nfunction deserializeResponse$n(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\r\n        return EvmNftTransfer.create(__assign(__assign({}, commonCore.toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, 'wei') : null, blockTimestamp: new Date(transfer.block_timestamp) }));\r\n    });\r\n}\r\nfunction serializeRequest$n(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        format: request.format,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        tokenId: request.tokenId,\r\n    };\r\n}\r\nfunction deserializeRequest$n(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        format: jsonRequest.format,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        tokenId: jsonRequest.tokenId,\r\n    };\r\n}\n\n/** Get NFT collections owned by a given wallet address. */\r\nvar getWalletNFTCollectionsOperation = {\r\n    method: 'GET',\r\n    name: 'getWalletNFTCollections',\r\n    id: 'getWalletNFTCollections',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/{address}/nft/collections',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'limit', 'cursor', 'excludeSpam'],\r\n    firstPageIndex: 1,\r\n    getRequestUrlParams: getRequestUrlParams$m,\r\n    serializeRequest: serializeRequest$m,\r\n    deserializeRequest: deserializeRequest$m,\r\n    deserializeResponse: deserializeResponse$m,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$m(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n        exclude_spam: request.excludeSpam,\r\n    };\r\n}\r\nfunction deserializeResponse$m(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (collection) {\r\n        return EvmNftCollection.create(__assign(__assign({}, commonCore.toCamelCase(collection)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(collection.token_address) }));\r\n    });\r\n}\r\nfunction serializeRequest$m(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        exclude_spam: request.excludeSpam,\r\n    };\r\n}\r\nfunction deserializeRequest$m(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        excludeSpam: jsonRequest.exclude_spam,\r\n    };\r\n}\n\n/**\r\n * Get NFTs owned by a given address.\r\n * * The response will include status [SYNCED/SYNCING] based on the contracts being indexed.\r\n * * Use the token_address param to get results for a specific contract only\r\n * * Note results will include all indexed NFTs\r\n * * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.\r\n */\r\nvar getWalletNFTsOperation = {\r\n    method: 'GET',\r\n    name: 'getWalletNFTs',\r\n    id: 'getWalletNFTs',\r\n    groupName: 'nft',\r\n    firstPageIndex: 1,\r\n    urlPathPattern: '/{address}/nft',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: [\r\n        'chain',\r\n        'format',\r\n        'limit',\r\n        'tokenAddresses',\r\n        'cursor',\r\n        'normalizeMetadata',\r\n        'mediaItems',\r\n        'excludeSpam',\r\n    ],\r\n    getRequestUrlParams: getRequestUrlParams$l,\r\n    serializeRequest: serializeRequest$l,\r\n    deserializeRequest: deserializeRequest$l,\r\n    deserializeResponse: deserializeResponse$l,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$l(request, core) {\r\n    var _a;\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        format: request.format,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        token_addresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return EvmAddress.create(address).lowercase; }),\r\n        cursor: request.cursor,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        media_items: request.mediaItems,\r\n        exclude_spam: request.excludeSpam,\r\n    };\r\n}\r\nfunction deserializeResponse$l(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (data) {\r\n        var nft = commonCore.toCamelCase(data);\r\n        var chain = EvmChainResolver.resolve(request.chain, core);\r\n        return EvmNft.create({\r\n            chain: chain,\r\n            contractType: nft.contractType,\r\n            tokenAddress: nft.tokenAddress,\r\n            tokenId: nft.tokenId,\r\n            tokenUri: nft.tokenUri,\r\n            metadata: nft.metadata,\r\n            name: nft.name,\r\n            symbol: nft.symbol,\r\n            amount: nft.amount ? parseInt(nft.amount, 10) : undefined,\r\n            blockNumberMinted: nft.blockNumberMinted,\r\n            blockNumber: nft.blockNumber,\r\n            ownerOf: EvmAddress.create(nft.ownerOf),\r\n            tokenHash: nft.tokenHash,\r\n            lastMetadataSync: commonCore.dateInputToDate(nft.lastMetadataSync),\r\n            lastTokenUriSync: commonCore.dateInputToDate(nft.lastTokenUriSync),\r\n            possibleSpam: nft.possibleSpam,\r\n            media: commonCore.maybe(nft.media, function (media) {\r\n                return EvmNftMedia.create(__assign({ chain: chain }, commonCore.toCamelCase(media)));\r\n            }),\r\n        });\r\n    });\r\n}\r\nfunction serializeRequest$l(request, core) {\r\n    var _a;\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        format: request.format,\r\n        limit: request.limit,\r\n        tokenAddresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) { return EvmAddress.create(address).checksum; }),\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        normalizeMetadata: request.normalizeMetadata,\r\n        mediaItems: request.mediaItems,\r\n        excludeSpam: request.excludeSpam,\r\n    };\r\n}\r\nfunction deserializeRequest$l(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        format: jsonRequest.format,\r\n        limit: jsonRequest.limit,\r\n        tokenAddresses: commonCore.maybe(jsonRequest.tokenAddresses, function (addresses) {\r\n            return addresses.map(function (address) { return EvmAddress.create(address); });\r\n        }),\r\n        cursor: jsonRequest.cursor,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        normalizeMetadata: jsonRequest.normalizeMetadata,\r\n        mediaItems: jsonRequest.mediaItems,\r\n        excludeSpam: jsonRequest.excludeSpam,\r\n    };\r\n}\n\n/** Get transfers of NFTs given the wallet and other parameters. */\r\nvar getWalletNFTTransfersOperation = {\r\n    method: 'GET',\r\n    name: 'getWalletNFTTransfers',\r\n    id: 'getWalletNFTTransfers',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/{address}/nft/transfers',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'format', 'fromBlock', 'toBlock', 'limit', 'cursor', 'fromDate', 'toDate'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$k,\r\n    serializeRequest: serializeRequest$k,\r\n    deserializeRequest: deserializeRequest$k,\r\n    deserializeResponse: deserializeResponse$k,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$k(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        format: request.format,\r\n        from_block: commonCore.maybe(request.fromBlock, String),\r\n        to_block: request.toBlock,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n        from_date: commonCore.maybe(request.fromDate, function (date) { return new Date(date).toISOString(); }),\r\n        to_date: commonCore.maybe(request.toDate, function (date) { return new Date(date).toISOString(); }),\r\n    };\r\n}\r\nfunction deserializeResponse$k(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\r\n        return EvmNftTransfer.create(__assign(__assign({}, commonCore.toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.token_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, 'wei') : null, blockTimestamp: new Date(transfer.block_timestamp) }));\r\n    });\r\n}\r\nfunction serializeRequest$k(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        format: request.format,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        fromDate: commonCore.maybe(request.fromDate, function (date) { return new Date(date).toISOString(); }),\r\n        toDate: commonCore.maybe(request.toDate, function (date) { return new Date(date).toISOString(); }),\r\n    };\r\n}\r\nfunction deserializeRequest$k(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        format: jsonRequest.format,\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        fromDate: jsonRequest.fromDate,\r\n        toDate: jsonRequest.toDate,\r\n    };\r\n}\n\n/**\r\n * ReSync the metadata for an NFT\r\n * * The metadata flag will request a the NFT's metadata from the already existing token_uri\r\n * * The uri(default) flag will fetch the latest token_uri from the given NFT address. In sync mode the metadata will also be fetched\r\n * * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding\r\n * * The async mode(default) will make the endpoint asynchronous so we will wait for the task to be completed before responding\r\n */\r\nvar reSyncMetadataOperation = {\r\n    method: 'GET',\r\n    name: 'reSyncMetadata',\r\n    id: 'reSyncMetadata',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/{address}/{tokenId}/metadata/resync',\r\n    urlPathParamNames: ['address', 'tokenId'],\r\n    urlSearchParamNames: ['chain', 'flag', 'mode'],\r\n    getRequestUrlParams: getRequestUrlParams$j,\r\n    serializeRequest: serializeRequest$j,\r\n    deserializeRequest: deserializeRequest$j,\r\n    deserializeResponse: deserializeResponse$j,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$j(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        flag: request.flag,\r\n        mode: request.mode,\r\n        tokenId: request.tokenId,\r\n    };\r\n}\r\nfunction serializeRequest$j(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        flag: request.flag,\r\n        mode: request.mode,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        tokenId: request.tokenId,\r\n    };\r\n}\r\nfunction deserializeRequest$j(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        flag: jsonRequest.flag,\r\n        mode: jsonRequest.mode,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        tokenId: jsonRequest.tokenId,\r\n    };\r\n}\r\nfunction deserializeResponse$j(jsonResponse) {\r\n    return jsonResponse;\r\n}\n\n/** Initiates a sync of a previously non synced Contract. */\r\nvar syncNFTContractOperation = {\r\n    method: 'PUT',\r\n    name: 'syncNFTContract',\r\n    id: 'syncNFTContract',\r\n    groupName: 'nft',\r\n    urlPathPattern: '/nft/{address}/sync',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain'],\r\n    getRequestUrlParams: getRequestUrlParams$i,\r\n    serializeRequest: serializeRequest$i,\r\n    deserializeRequest: deserializeRequest$i,\r\n    deserializeResponse: deserializeResponse$i,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$i(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n    };\r\n}\r\nfunction deserializeResponse$i() {\r\n    return {\r\n        success: true,\r\n    };\r\n}\r\nfunction serializeRequest$i(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).checksum,\r\n    };\r\n}\r\nfunction deserializeRequest$i(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        address: EvmAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Resolve an ETH address and find the ENS name. */\r\nvar resolveAddressOperation = {\r\n    method: 'GET',\r\n    name: 'resolveAddress',\r\n    id: 'resolveAddress',\r\n    groupName: 'resolve',\r\n    isNullable: true,\r\n    urlPathPattern: '/resolve/{address}/reverse',\r\n    urlPathParamNames: ['address'],\r\n    getRequestUrlParams: getRequestUrlParams$h,\r\n    serializeRequest: serializeRequest$h,\r\n    deserializeRequest: deserializeRequest$h,\r\n    deserializeResponse: deserializeResponse$h,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$h(request) {\r\n    return {\r\n        address: commonCore.maybe(request.address, function (address) { return EvmAddress.create(address).checksum; }),\r\n    };\r\n}\r\nfunction deserializeResponse$h(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$h(request) {\r\n    return {\r\n        address: commonCore.maybe(request.address, function (address) { return EvmAddress.create(address).checksum; }),\r\n    };\r\n}\r\nfunction deserializeRequest$h(jsonRequest) {\r\n    return {\r\n        address: commonCore.maybe(jsonRequest.address, function (address) { return EvmAddress.create(address); }),\r\n    };\r\n}\n\n/** Resolve an Unstoppable domain and get the address. */\r\nvar resolveDomainOperation = {\r\n    method: 'GET',\r\n    name: 'resolveDomain',\r\n    id: 'resolveDomain',\r\n    groupName: 'resolve',\r\n    isNullable: true,\r\n    urlPathPattern: '/resolve/{domain}',\r\n    urlPathParamNames: ['domain'],\r\n    urlSearchParamNames: ['currency'],\r\n    getRequestUrlParams: getRequestUrlParams$g,\r\n    serializeRequest: serializeRequest$g,\r\n    deserializeRequest: deserializeRequest$g,\r\n    deserializeResponse: deserializeResponse$g,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$g(request) {\r\n    return {\r\n        currency: request.currency,\r\n        domain: request.domain,\r\n    };\r\n}\r\nfunction serializeRequest$g(request) {\r\n    return {\r\n        currency: request.currency,\r\n        domain: request.domain,\r\n    };\r\n}\r\nfunction deserializeRequest$g(jsonRequest) {\r\n    return {\r\n        currency: jsonRequest.currency,\r\n        domain: jsonRequest.domain,\r\n    };\r\n}\r\nfunction deserializeResponse$g(jsonResponse) {\r\n    return {\r\n        address: EvmAddress.create(jsonResponse.address),\r\n    };\r\n}\n\n/** Resolve a specific ENS domain to its address. */\r\nvar resolveENSDomainOperation = {\r\n    method: 'GET',\r\n    name: 'resolveENSDomain',\r\n    id: 'resolveENSDomain',\r\n    groupName: 'resolve',\r\n    isNullable: true,\r\n    urlPathPattern: '/resolve/ens/{domain}',\r\n    urlPathParamNames: ['domain'],\r\n    getRequestUrlParams: getRequestUrlParams$f,\r\n    serializeRequest: serializeRequest$f,\r\n    deserializeRequest: deserializeRequest$f,\r\n    deserializeResponse: deserializeResponse$f,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$f(request) {\r\n    return {\r\n        domain: request.domain,\r\n    };\r\n}\r\nfunction serializeRequest$f(request) {\r\n    return {\r\n        domain: request.domain,\r\n    };\r\n}\r\nfunction deserializeRequest$f(jsonRequest) {\r\n    return {\r\n        domain: jsonRequest.domain,\r\n    };\r\n}\r\nfunction deserializeResponse$f(jsonResponse) {\r\n    return {\r\n        address: EvmAddress.create(jsonResponse.address),\r\n    };\r\n}\n\n/** Get the amount which the spender is allowed to withdraw on behalf of the owner. */\r\nvar getTokenAllowanceOperation = {\r\n    method: 'GET',\r\n    name: 'getTokenAllowance',\r\n    id: 'getTokenAllowance',\r\n    groupName: 'token',\r\n    urlPathPattern: '/erc20/{address}/allowance',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'ownerAddress', 'spenderAddress'],\r\n    getRequestUrlParams: getRequestUrlParams$e,\r\n    serializeRequest: serializeRequest$e,\r\n    deserializeRequest: deserializeRequest$e,\r\n    deserializeResponse: deserializeResponse$e,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$e(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        owner_address: EvmAddress.create(request.ownerAddress).lowercase,\r\n        spender_address: EvmAddress.create(request.spenderAddress).lowercase,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n    };\r\n}\r\nfunction deserializeResponse$e(jsonResponse) {\r\n    return {\r\n        allowance: commonCore.BigNumber.create(jsonResponse.allowance),\r\n    };\r\n}\r\nfunction serializeRequest$e(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        ownerAddress: EvmAddress.create(request.ownerAddress).checksum,\r\n        spenderAddress: EvmAddress.create(request.spenderAddress).checksum,\r\n        address: EvmAddress.create(request.address).checksum,\r\n    };\r\n}\r\nfunction deserializeRequest$e(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        ownerAddress: EvmAddress.create(jsonRequest.ownerAddress),\r\n        spenderAddress: EvmAddress.create(jsonRequest.spenderAddress),\r\n        address: EvmAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Get metadata for a list of token symbols (name, symbol, decimals, logo). */\r\nvar getTokenMetadataBySymbolOperation = {\r\n    method: 'GET',\r\n    name: 'getTokenMetadataBySymbol',\r\n    id: 'getTokenMetadataBySymbol',\r\n    groupName: 'token',\r\n    urlPathPattern: '/erc20/metadata/symbols',\r\n    urlSearchParamNames: ['chain', 'symbols'],\r\n    getRequestUrlParams: getRequestUrlParams$d,\r\n    serializeRequest: serializeRequest$d,\r\n    deserializeRequest: deserializeRequest$d,\r\n    deserializeResponse: deserializeResponse$d,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$d(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        symbols: request.symbols,\r\n    };\r\n}\r\nfunction deserializeResponse$d(jsonResponse, request, core) {\r\n    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {\r\n        return {\r\n            token: Erc20Token.create(__assign(__assign({}, commonCore.toCamelCase(token)), { contractAddress: token.address, chain: EvmChainResolver.resolve(request.chain, core) })),\r\n            blockNumber: token.block_number,\r\n            validated: token.validated,\r\n        };\r\n    });\r\n}\r\nfunction serializeRequest$d(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        symbols: request.symbols,\r\n    };\r\n}\r\nfunction deserializeRequest$d(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        symbols: jsonRequest.symbols,\r\n    };\r\n}\n\n/** Get the metadata for a given token contract address (name, symbol, decimals, logo). */\r\nvar getTokenMetadataOperation = {\r\n    method: 'GET',\r\n    name: 'getTokenMetadata',\r\n    id: 'getTokenMetadata',\r\n    groupName: 'token',\r\n    urlPathPattern: '/erc20/metadata',\r\n    urlSearchParamNames: ['chain', 'addresses'],\r\n    getRequestUrlParams: getRequestUrlParams$c,\r\n    serializeRequest: serializeRequest$c,\r\n    deserializeRequest: deserializeRequest$c,\r\n    deserializeResponse: deserializeResponse$c,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$c(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        addresses: request.addresses.map(function (address) { return EvmAddress.create(address).lowercase; }),\r\n    };\r\n}\r\nfunction deserializeResponse$c(jsonResponse, request, core) {\r\n    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {\r\n        return {\r\n            token: Erc20Token.create(__assign(__assign({}, commonCore.toCamelCase(token)), { contractAddress: token.address, chain: EvmChainResolver.resolve(request.chain, core) })),\r\n            blockNumber: token.block_number,\r\n            validated: token.validated,\r\n        };\r\n    });\r\n}\r\nfunction serializeRequest$c(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        addresses: request.addresses.map(function (address) { return EvmAddress.create(address).checksum; }),\r\n    };\r\n}\r\nfunction deserializeRequest$c(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        addresses: jsonRequest.addresses.map(function (address) { return EvmAddress.create(address); }),\r\n    };\r\n}\n\n/** Get the token price denominated in the blockchains native token and USD. */\r\nvar getTokenPriceOperation = {\r\n    method: 'GET',\r\n    name: 'getTokenPrice',\r\n    id: 'getTokenPrice',\r\n    groupName: 'token',\r\n    urlPathPattern: '/erc20/{address}/price',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'exchange', 'toBlock', 'include'],\r\n    getRequestUrlParams: getRequestUrlParams$b,\r\n    serializeRequest: serializeRequest$b,\r\n    deserializeRequest: deserializeRequest$b,\r\n    deserializeResponse: deserializeResponse$b,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$b(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        exchange: request.exchange,\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction deserializeResponse$b(jsonResponse) {\r\n    var _a, _b, _c;\r\n    return __assign(__assign({}, commonCore.toCamelCase(jsonResponse)), { nativePrice: ((_a = jsonResponse.nativePrice) === null || _a === void 0 ? void 0 : _a.value)\r\n            ? EvmNative.create((_b = jsonResponse.nativePrice) === null || _b === void 0 ? void 0 : _b.value, (_c = jsonResponse.nativePrice) === null || _c === void 0 ? void 0 : _c.decimals)\r\n            : null, exchangeAddress: jsonResponse.exchangeAddress ? EvmAddress.create(jsonResponse.exchangeAddress) : null });\r\n}\r\nfunction serializeRequest$b(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        exchange: request.exchange,\r\n        toBlock: request.toBlock,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction deserializeRequest$b(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        exchange: jsonRequest.exchange,\r\n        toBlock: jsonRequest.toBlock,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        include: jsonRequest.include,\r\n    };\r\n}\n\n/** Get ERC20 token transactions from a contract ordered by block number in descending order. */\r\nvar getTokenTransfersOperation = {\r\n    method: 'GET',\r\n    name: 'getTokenTransfers',\r\n    id: 'getTokenTransfers',\r\n    groupName: 'token',\r\n    urlPathPattern: '/erc20/{address}/transfers',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'limit', 'cursor'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$a,\r\n    serializeRequest: serializeRequest$a,\r\n    deserializeRequest: deserializeRequest$a,\r\n    deserializeResponse: deserializeResponse$a,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$a(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        from_block: commonCore.maybe(request.fromBlock, String),\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$a(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\r\n        return Erc20Transaction.create(__assign(__assign({}, commonCore.toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), address: EvmAddress.create(transfer.address), toAddress: EvmAddress.create(transfer.to_address), fromAddress: EvmAddress.create(transfer.from_address), value: commonCore.BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));\r\n    });\r\n}\r\nfunction serializeRequest$a(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        fromDate: request.fromDate,\r\n        toDate: request.toDate,\r\n        limit: request.limit,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeRequest$a(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        fromDate: jsonRequest.fromDate,\r\n        toDate: jsonRequest.toDate,\r\n        limit: jsonRequest.limit,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        cursor: jsonRequest.cursor,\r\n    };\r\n}\n\n/** Get token balances for a specific wallet address. */\r\nvar getWalletTokenBalancesOperation = {\r\n    method: 'GET',\r\n    name: 'getWalletTokenBalances',\r\n    id: 'getWalletTokenBalances',\r\n    groupName: 'token',\r\n    urlPathPattern: '/{address}/erc20',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'toBlock', 'tokenAddresses'],\r\n    getRequestUrlParams: getRequestUrlParams$9,\r\n    serializeRequest: serializeRequest$9,\r\n    deserializeRequest: deserializeRequest$9,\r\n    deserializeResponse: deserializeResponse$9,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$9(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        token_addresses: commonCore.maybe(request.tokenAddresses, function (addresses) {\r\n            return addresses.map(function (address) { return EvmAddress.create(address).lowercase; });\r\n        }),\r\n        address: EvmAddress.create(request.address).lowercase,\r\n    };\r\n}\r\nfunction deserializeResponse$9(jsonResponse, request, core) {\r\n    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {\r\n        return Erc20Value.create(token.balance, {\r\n            decimals: token.decimals,\r\n            token: {\r\n                decimals: token.decimals,\r\n                name: token.name,\r\n                symbol: token.symbol,\r\n                contractAddress: token.token_address,\r\n                logo: token.logo,\r\n                thumbnail: token.thumbnail,\r\n                chain: EvmChainResolver.resolve(request.chain, core),\r\n                possibleSpam: token.possible_spam,\r\n            },\r\n        });\r\n    });\r\n}\r\nfunction serializeRequest$9(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        tokenAddresses: commonCore.maybe(request.tokenAddresses, function (addresses) {\r\n            return addresses.map(function (address) { return EvmAddress.create(address).checksum; });\r\n        }),\r\n        address: EvmAddress.create(request.address).checksum,\r\n        toBlock: request.toBlock,\r\n    };\r\n}\r\nfunction deserializeRequest$9(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        tokenAddresses: commonCore.maybe(jsonRequest.tokenAddresses, function (addresses) {\r\n            return addresses.map(function (address) { return EvmAddress.create(address); });\r\n        }),\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        toBlock: jsonRequest.toBlock,\r\n    };\r\n}\n\n/** Get ERC20 token transactions ordered by block number in descending order. */\r\nvar getWalletTokenTransfersOperation = {\r\n    method: 'GET',\r\n    name: 'getWalletTokenTransfers',\r\n    id: 'getWalletTokenTransfers',\r\n    groupName: 'token',\r\n    urlPathPattern: '/{address}/erc20/transfers',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'limit', 'cursor'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$8,\r\n    serializeRequest: serializeRequest$8,\r\n    deserializeRequest: deserializeRequest$8,\r\n    deserializeResponse: deserializeResponse$8,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$8(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        from_block: commonCore.maybe(request.fromBlock, String),\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$8(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\r\n        return Erc20Transaction.create(__assign(__assign({}, commonCore.toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), address: EvmAddress.create(transfer.address), toAddress: EvmAddress.create(transfer.to_address), fromAddress: EvmAddress.create(transfer.from_address), value: commonCore.BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));\r\n    });\r\n}\r\nfunction serializeRequest$8(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        fromDate: request.fromDate,\r\n        toDate: request.toDate,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeRequest$8(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        fromDate: jsonRequest.fromDate,\r\n        toDate: jsonRequest.toDate,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n    };\r\n}\n\n/** Get the contents of a transaction by the given transaction hash. */\r\nvar getTransactionOperation = {\r\n    method: 'GET',\r\n    name: 'getTransaction',\r\n    id: 'getTransaction',\r\n    groupName: 'transaction',\r\n    isNullable: true,\r\n    urlPathPattern: '/transaction/{transactionHash}',\r\n    urlPathParamNames: ['transactionHash'],\r\n    urlSearchParamNames: ['chain', 'include'],\r\n    getRequestUrlParams: getRequestUrlParams$7,\r\n    serializeRequest: serializeRequest$7,\r\n    deserializeRequest: deserializeRequest$7,\r\n    deserializeResponse: deserializeResponse$7,\r\n};\r\nfunction getRequestUrlParams$7(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        transactionHash: request.transactionHash,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction serializeRequest$7(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        transactionHash: request.transactionHash,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction deserializeRequest$7(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        transactionHash: jsonRequest.transactionHash,\r\n        include: jsonRequest.include,\r\n    };\r\n}\r\n//TODO: I noticed that the docs comes with a type of \"string | unknown\" which automatically resolves to \"unknown\". I think we should fix this in the api, casting for now\r\nfunction deserializeResponse$7(jsonResponse, request, core) {\r\n    var _a, _b;\r\n    var chain = EvmChainResolver.resolve(request.chain, core);\r\n    return EvmTransaction.create({\r\n        from: jsonResponse.from_address,\r\n        to: jsonResponse.to_address,\r\n        value: jsonResponse.value,\r\n        gasPrice: jsonResponse.gas_price,\r\n        gasUsed: jsonResponse.receipt_gas_used,\r\n        data: jsonResponse.input,\r\n        nonce: jsonResponse.nonce,\r\n        blockHash: jsonResponse.block_hash,\r\n        blockNumber: jsonResponse.block_number,\r\n        blockTimestamp: jsonResponse.block_timestamp,\r\n        index: jsonResponse.transaction_index,\r\n        chain: chain,\r\n        hash: jsonResponse.hash,\r\n        gas: jsonResponse.gas,\r\n        cumulativeGasUsed: jsonResponse.receipt_cumulative_gas_used,\r\n        contractAddress: jsonResponse.receipt_contract_address,\r\n        logs: ((_a = jsonResponse.logs) !== null && _a !== void 0 ? _a : []).map(function (log) {\r\n            return EvmTransactionLog.create({\r\n                address: log.address,\r\n                blockHash: log.block_hash,\r\n                blockNumber: +log.block_number,\r\n                data: log.data,\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                topics: [log.topic0, log.topic1, log.topic2, log.topic3],\r\n                transactionHash: log.transaction_hash,\r\n                blockTimestamp: log.block_timestamp,\r\n                logIndex: +log.log_index,\r\n                transactionIndex: +log.transaction_index,\r\n                chain: chain,\r\n            });\r\n        }),\r\n        internalTransactions: ((_b = jsonResponse.internal_transactions) !== null && _b !== void 0 ? _b : []).map(function (jsonInternalTransaction) {\r\n            var internalTransaction = commonCore.toCamelCase(jsonInternalTransaction);\r\n            return EvmInternalTransaction.create(__assign({ chain: chain }, internalTransaction));\r\n        }),\r\n        receiptRoot: jsonResponse.receipt_root,\r\n        receiptStatus: jsonResponse.receipt_status,\r\n    });\r\n}\n\n/** Get the contents of a transaction by the given transaction hash. */\r\nvar getTransactionVerboseOperation = {\r\n    method: 'GET',\r\n    name: 'getTransactionVerbose',\r\n    id: 'getTransactionVerbose',\r\n    groupName: 'transaction',\r\n    isNullable: true,\r\n    urlPathPattern: '/transaction/{transactionHash}/verbose',\r\n    urlPathParamNames: ['transactionHash'],\r\n    urlSearchParamNames: ['chain', 'include'],\r\n    getRequestUrlParams: getRequestUrlParams$6,\r\n    serializeRequest: serializeRequest$6,\r\n    deserializeRequest: deserializeRequest$6,\r\n    deserializeResponse: deserializeResponse$6,\r\n};\r\nfunction getRequestUrlParams$6(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        transactionHash: request.transactionHash,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction serializeRequest$6(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        transactionHash: request.transactionHash,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction deserializeRequest$6(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        transactionHash: jsonRequest.transactionHash,\r\n        include: jsonRequest.include,\r\n    };\r\n}\r\nfunction deserializeResponse$6(jsonResponse, request, core) {\r\n    var _a;\r\n    return EvmTransactionVerbose.create({\r\n        from: jsonResponse.from_address,\r\n        to: jsonResponse.to_address,\r\n        value: jsonResponse.value,\r\n        gasPrice: jsonResponse.gas_price,\r\n        gasUsed: jsonResponse.receipt_gas_used,\r\n        data: jsonResponse.input,\r\n        nonce: jsonResponse.nonce,\r\n        blockHash: jsonResponse.block_hash,\r\n        blockNumber: jsonResponse.block_number,\r\n        blockTimestamp: jsonResponse.block_timestamp,\r\n        index: jsonResponse.transaction_index,\r\n        chain: EvmChainResolver.resolve(request.chain, core),\r\n        hash: jsonResponse.hash,\r\n        gas: jsonResponse.gas,\r\n        cumulativeGasUsed: jsonResponse.receipt_cumulative_gas_used,\r\n        contractAddress: jsonResponse.receipt_contract_address,\r\n        logs: ((_a = jsonResponse.logs) !== null && _a !== void 0 ? _a : []).map(function (log) {\r\n            return EvmTransactionLogDecoded.create({\r\n                address: log.address,\r\n                blockHash: log.block_hash,\r\n                blockNumber: +log.block_number,\r\n                data: log.data,\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                topics: [log.topic0, log.topic1, log.topic2, log.topic3],\r\n                transactionHash: log.transaction_hash,\r\n                blockTimestamp: log.block_timestamp,\r\n                logIndex: +log.log_index,\r\n                transactionIndex: +log.transaction_index,\r\n                chain: EvmChainResolver.resolve(request.chain, core),\r\n                decodedEvent: log.decoded_event,\r\n            });\r\n        }),\r\n        decodedCall: jsonResponse.decoded_call,\r\n        receiptRoot: jsonResponse.receipt_root,\r\n        receiptStatus: jsonResponse.receipt_status,\r\n    });\r\n}\n\n/** Get native transactions ordered by block number in descending order. */\r\nvar getWalletTransactionsOperation = {\r\n    method: 'GET',\r\n    name: 'getWalletTransactions',\r\n    id: 'getWalletTransactions',\r\n    groupName: 'transaction',\r\n    urlPathPattern: '/{address}',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'cursor', 'limit', 'include'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$5,\r\n    serializeRequest: serializeRequest$5,\r\n    deserializeRequest: deserializeRequest$5,\r\n    deserializeResponse: deserializeResponse$5,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$5(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        from_block: commonCore.maybe(request.fromBlock, String),\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        cursor: request.cursor,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction serializeRequest$5(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        fromDate: request.fromDate,\r\n        toDate: request.toDate,\r\n        cursor: request.cursor,\r\n        limit: request.limit,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction deserializeRequest$5(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        fromDate: jsonRequest.fromDate,\r\n        toDate: jsonRequest.toDate,\r\n        cursor: jsonRequest.cursor,\r\n        limit: jsonRequest.limit,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        include: jsonRequest.include,\r\n    };\r\n}\r\nfunction deserializeResponse$5(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\r\n        var _a;\r\n        var chain = EvmChainResolver.resolve(request.chain, core);\r\n        return EvmTransaction.create({\r\n            cumulativeGasUsed: transfer.receipt_cumulative_gas_used,\r\n            gasPrice: transfer.gas_price,\r\n            gasUsed: transfer.receipt_gas_used,\r\n            index: +transfer.transaction_index,\r\n            contractAddress: transfer.receipt_contract_address,\r\n            receiptRoot: transfer.receipt_root,\r\n            receiptStatus: +transfer.receipt_status,\r\n            chain: EvmChainResolver.resolve(request.chain, core),\r\n            data: transfer.input,\r\n            from: transfer.from_address,\r\n            hash: transfer.hash,\r\n            nonce: transfer.nonce,\r\n            value: transfer.value,\r\n            blockHash: transfer.block_hash,\r\n            blockNumber: +transfer.block_number,\r\n            blockTimestamp: new Date(transfer.block_timestamp),\r\n            gas: transfer.gas ? commonCore.BigNumber.create(transfer.gas) : null,\r\n            to: transfer.to_address ? transfer.to_address : null,\r\n            internalTransactions: ((_a = transfer.internal_transactions) !== null && _a !== void 0 ? _a : []).map(function (jsonInternalTransaction) {\r\n                var internalTransaction = commonCore.toCamelCase(jsonInternalTransaction);\r\n                return EvmInternalTransaction.create(__assign({ chain: chain }, internalTransaction));\r\n            }),\r\n        });\r\n    });\r\n}\n\n/** Get native transactions ordered by block number in descending order. */\r\nvar getWalletTransactionsVerboseOperation = {\r\n    method: 'GET',\r\n    name: 'getWalletTransactionsVerbose',\r\n    id: 'getWalletTransactionsVerbose',\r\n    groupName: 'transaction',\r\n    urlPathPattern: '/{address}/verbose',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'cursor', 'limit', 'include'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$4,\r\n    serializeRequest: serializeRequest$4,\r\n    deserializeRequest: deserializeRequest$4,\r\n    deserializeResponse: deserializeResponse$4,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$4(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        from_block: commonCore.maybe(request.fromBlock, String),\r\n        to_block: commonCore.maybe(request.toBlock, String),\r\n        from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\r\n        to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\r\n        cursor: request.cursor,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction serializeRequest$4(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        fromBlock: request.fromBlock,\r\n        toBlock: request.toBlock,\r\n        fromDate: request.fromDate,\r\n        toDate: request.toDate,\r\n        cursor: request.cursor,\r\n        limit: request.limit,\r\n        address: EvmAddress.create(request.address).checksum,\r\n        include: request.include,\r\n    };\r\n}\r\nfunction deserializeRequest$4(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        fromBlock: jsonRequest.fromBlock,\r\n        toBlock: jsonRequest.toBlock,\r\n        fromDate: jsonRequest.fromDate,\r\n        toDate: jsonRequest.toDate,\r\n        cursor: jsonRequest.cursor,\r\n        limit: jsonRequest.limit,\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        include: jsonRequest.include,\r\n    };\r\n}\r\nfunction deserializeResponse$4(jsonResponse, request, core) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\r\n        var _a;\r\n        return EvmTransaction.create({\r\n            cumulativeGasUsed: transfer.receipt_cumulative_gas_used,\r\n            gasPrice: transfer.gas_price,\r\n            gasUsed: transfer.receipt_gas_used,\r\n            index: +transfer.transaction_index,\r\n            contractAddress: transfer.receipt_contract_address,\r\n            receiptRoot: transfer.receipt_root,\r\n            receiptStatus: +transfer.receipt_status,\r\n            chain: EvmChainResolver.resolve(request.chain, core),\r\n            data: transfer.input,\r\n            from: EvmAddress.create(transfer.from_address),\r\n            hash: transfer.hash,\r\n            nonce: transfer.nonce,\r\n            value: transfer.value,\r\n            blockHash: transfer.block_hash,\r\n            blockNumber: +transfer.block_number,\r\n            blockTimestamp: new Date(transfer.block_timestamp),\r\n            gas: commonCore.BigNumber.create(transfer.gas),\r\n            to: EvmAddress.create(transfer.to_address),\r\n            logs: ((_a = transfer.logs) !== null && _a !== void 0 ? _a : []).map(function (log) {\r\n                return EvmTransactionLog.create({\r\n                    logIndex: +log.log_index,\r\n                    transactionHash: log.transaction_hash,\r\n                    transactionIndex: +log.transaction_index,\r\n                    address: log.address,\r\n                    data: log.data,\r\n                    topics: [log.topic0, log.topic1, log.topic2, log.topic3],\r\n                    blockHash: log.block_hash,\r\n                    blockNumber: +log.block_number,\r\n                    blockTimestamp: transfer.block_timestamp,\r\n                    chain: EvmChainResolver.resolve(request.chain, core),\r\n                });\r\n            }),\r\n        });\r\n    });\r\n}\n\n/** Get native transactions ordered by block number in descending order. */\r\nvar getInternalTransactionsOperation = {\r\n    method: 'GET',\r\n    name: 'getInternalTransactions',\r\n    id: 'getInternalTransactions',\r\n    groupName: 'transaction',\r\n    urlPathPattern: '/transaction/{transactionHash}/internal-transactions',\r\n    urlPathParamNames: ['transactionHash'],\r\n    urlSearchParamNames: ['chain'],\r\n    getRequestUrlParams: getRequestUrlParams$3,\r\n    serializeRequest: serializeRequest$3,\r\n    deserializeRequest: deserializeRequest$3,\r\n    deserializeResponse: deserializeResponse$3,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$3(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        transactionHash: request.transactionHash,\r\n    };\r\n}\r\nfunction serializeRequest$3(request, core) {\r\n    return {\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        transactionHash: request.transactionHash,\r\n    };\r\n}\r\nfunction deserializeRequest$3(jsonRequest) {\r\n    return {\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        transactionHash: jsonRequest.transactionHash,\r\n    };\r\n}\r\nfunction deserializeResponse$3(jsonResponse, request, core) {\r\n    return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (transaction) {\r\n        var chain = EvmChainResolver.resolve(request.chain, core);\r\n        return EvmInternalTransaction.create({\r\n            chain: chain,\r\n            blockHash: transaction.block_hash,\r\n            blockNumber: transaction.block_number,\r\n            from: transaction.from,\r\n            gas: transaction.gas,\r\n            gasUsed: transaction.gas_used,\r\n            input: transaction.input,\r\n            output: transaction.output,\r\n            to: transaction.to,\r\n            transactionHash: transaction.transaction_hash,\r\n            type: transaction.type,\r\n            value: transaction.value,\r\n        });\r\n    });\r\n}\n\n/** Run a given function of a contract ABI and retrieve readonly data. */\r\nvar runContractFunctionOperation = {\r\n    method: 'POST',\r\n    name: 'runContractFunction',\r\n    id: 'runContractFunction',\r\n    groupName: 'utils',\r\n    urlPathParamNames: ['address'],\r\n    urlSearchParamNames: ['chain', 'functionName'],\r\n    urlPathPattern: '/{address}/function',\r\n    bodyType: 'properties',\r\n    bodyParamNames: ['abi', 'params'],\r\n    getRequestUrlParams: getRequestUrlParams$2,\r\n    getRequestBody: getRequestBody,\r\n    deserializeResponse: deserializeResponse$2,\r\n    serializeRequest: serializeRequest$2,\r\n    deserializeRequest: deserializeRequest$2,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$2(request, core) {\r\n    return {\r\n        address: EvmAddress.create(request.address).lowercase,\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        function_name: request.functionName,\r\n    };\r\n}\r\nfunction getRequestBody(request) {\r\n    return {\r\n        abi: request.abi,\r\n        params: request.params,\r\n    };\r\n}\r\nfunction deserializeResponse$2(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$2(request, core) {\r\n    return {\r\n        address: EvmAddress.create(request.address).checksum,\r\n        chain: EvmChainResolver.resolve(request.chain, core).apiHex,\r\n        functionName: request.functionName,\r\n        abi: request.abi,\r\n        params: request.params,\r\n    };\r\n}\r\nfunction deserializeRequest$2(jsonRequest) {\r\n    return {\r\n        address: EvmAddress.create(jsonRequest.address),\r\n        chain: EvmChain.create(jsonRequest.chain),\r\n        functionName: jsonRequest.functionName,\r\n        abi: jsonRequest.abi,\r\n        params: jsonRequest.params,\r\n    };\r\n}\n\n/** Get the endpoint price list for rate limits and cost. */\r\nvar endpointWeightsOperation = {\r\n    method: 'GET',\r\n    name: 'endpointWeights',\r\n    id: 'endpointWeights',\r\n    groupName: 'utils',\r\n    urlPathPattern: '/info/endpointWeights',\r\n    getRequestUrlParams: getRequestUrlParams$1,\r\n    deserializeRequest: deserializeRequest$1,\r\n    serializeRequest: serializeRequest$1,\r\n    deserializeResponse: deserializeResponse$1,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$1() {\r\n    return {};\r\n}\r\nfunction serializeRequest$1() {\r\n    return undefined;\r\n}\r\nfunction deserializeRequest$1() {\r\n    return {};\r\n}\r\nfunction deserializeResponse$1(jsonResponse) {\r\n    return jsonResponse;\r\n}\n\n/** Get the current version of the Moralis Web3 API. */\r\nvar web3ApiVersionOperation = {\r\n    method: 'GET',\r\n    name: 'web3ApiVersion',\r\n    id: 'web3ApiVersion',\r\n    groupName: 'utils',\r\n    urlPathPattern: '/web3/version',\r\n    deserializeRequest: deserializeRequest,\r\n    serializeRequest: serializeRequest,\r\n    getRequestUrlParams: getRequestUrlParams,\r\n    deserializeResponse: deserializeResponse,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams() {\r\n    return {};\r\n}\r\nfunction serializeRequest() {\r\n    return undefined;\r\n}\r\nfunction deserializeRequest() {\r\n    return {};\r\n}\r\nfunction deserializeResponse(jsonResponse) {\r\n    return jsonResponse;\r\n}\n\nvar operationsV2 = [\r\n    getBlockOperation,\r\n    getContractEventsOperation,\r\n    getContractLogsOperation,\r\n    getContractNFTsOperation,\r\n    getDateToBlockOperation,\r\n    getInternalTransactionsOperation,\r\n    getMultipleNFTsOperation,\r\n    getNativeBalanceOperation,\r\n    getNativeBalancesForAddressesOperation,\r\n    getNFTContractMetadataOperation,\r\n    getNFTContractTransfersOperation,\r\n    getNFTLowestPriceOperation,\r\n    getNFTMetadataOperation,\r\n    getNFTOwnersOperation,\r\n    getNFTTokenIdOwnersOperation,\r\n    getNFTTransfersByBlockOperation,\r\n    getNFTTransfersFromToBlockOperation,\r\n    getNFTTransfersOperation,\r\n    getPairAddressOperation,\r\n    getPairReservesOperation,\r\n    getTokenAllowanceOperation,\r\n    getTokenMetadataBySymbolOperation,\r\n    getTokenMetadataOperation,\r\n    getTokenPriceOperation,\r\n    getTokenTransfersOperation,\r\n    getTransactionOperation,\r\n    getTransactionVerboseOperation,\r\n    getWalletNFTCollectionsOperation,\r\n    getWalletNFTsOperation,\r\n    getWalletNFTTransfersOperation,\r\n    getWalletTokenBalancesOperation,\r\n    getWalletTokenTransfersOperation,\r\n    getWalletTransactionsOperation,\r\n    getWalletTransactionsVerboseOperation,\r\n    resolveAddressOperation,\r\n    resolveDomainOperation,\r\n    resolveENSDomainOperation,\r\n    reSyncMetadataOperation,\r\n    runContractFunctionOperation,\r\n    syncNFTContractOperation,\r\n    uploadFolderOperation,\r\n];\r\n/**\r\n * @deprecated This list includes upgraded operations to the hybrid approach in the old format.\r\n */\r\nvar operationsV2All = __spreadArray(__spreadArray([], operationsV2, true), [\r\n    endpointWeightsOperation,\r\n    web3ApiVersionOperation,\r\n    getNFTTradesOperation,\r\n], false);\n\nexports.CommonEvmUtils = CommonEvmUtils;\nexports.CommonEvmUtilsConfig = CommonEvmUtilsConfig;\nexports.CommonEvmUtilsConfigSetup = CommonEvmUtilsConfigSetup;\nexports.EndpointWeightsOperation = EndpointWeightsOperation;\nexports.Erc20Approval = Erc20Approval;\nexports.Erc20Burn = Erc20Burn;\nexports.Erc20Mint = Erc20Mint;\nexports.Erc20Token = Erc20Token;\nexports.Erc20Transaction = Erc20Transaction;\nexports.Erc20Value = Erc20Value;\nexports.EvmAddress = EvmAddress;\nexports.EvmBlock = EvmBlock;\nexports.EvmBlockDate = EvmBlockDate;\nexports.EvmBlockTokenStat = EvmBlockTokenStat;\nexports.EvmBlockTokenStatNftTransfers = EvmBlockTokenStatNftTransfers;\nexports.EvmBlockTokenStatTransactions = EvmBlockTokenStatTransactions;\nexports.EvmChain = EvmChain;\nexports.EvmChainList = EvmChainList;\nexports.EvmChainParser = EvmChainParser;\nexports.EvmChainResolver = EvmChainResolver;\nexports.EvmContractsReviewDto = EvmContractsReviewDto;\nexports.EvmContractsReviewItem = EvmContractsReviewItem;\nexports.EvmContractsReviewItemContractTypeEnum = EvmContractsReviewItemContractTypeEnum;\nexports.EvmContractsReviewItemReportTypeEnum = EvmContractsReviewItemReportTypeEnum;\nexports.EvmEndpointWeights = EvmEndpointWeights;\nexports.EvmErc20TokenStat = EvmErc20TokenStat;\nexports.EvmErc20TokenStatTransfers = EvmErc20TokenStatTransfers;\nexports.EvmEvent = EvmEvent;\nexports.EvmGetNFTTradesMarketplaceEnum = EvmGetNFTTradesMarketplaceEnum;\nexports.EvmInternalTransaction = EvmInternalTransaction;\nexports.EvmMarketDataERC20TokenItem = EvmMarketDataERC20TokenItem;\nexports.EvmMarketDataERC20TokensByPriceMovers = EvmMarketDataERC20TokensByPriceMovers;\nexports.EvmMarketDataHottestNFTCollectionByTradingVolumeItem = EvmMarketDataHottestNFTCollectionByTradingVolumeItem;\nexports.EvmMarketDataTopNFTCollectionByMarketCapItem = EvmMarketDataTopNFTCollectionByMarketCapItem;\nexports.EvmNative = EvmNative;\nexports.EvmNft = EvmNft;\nexports.EvmNftCollection = EvmNftCollection;\nexports.EvmNftCollectionStat = EvmNftCollectionStat;\nexports.EvmNftCollectionStatOwners = EvmNftCollectionStatOwners;\nexports.EvmNftCollectionStatTransfers = EvmNftCollectionStatTransfers;\nexports.EvmNftMedia = EvmNftMedia;\nexports.EvmNftMetadata = EvmNftMetadata;\nexports.EvmNftTokenStat = EvmNftTokenStat;\nexports.EvmNftTokenStatOwners = EvmNftTokenStatOwners;\nexports.EvmNftTokenStatTransfers = EvmNftTokenStatTransfers;\nexports.EvmNftTransfer = EvmNftTransfer;\nexports.EvmReviewContracts = EvmReviewContracts;\nexports.EvmSignature = EvmSignature;\nexports.EvmSimpleBlock = EvmSimpleBlock;\nexports.EvmTrade = EvmTrade;\nexports.EvmTradeCollection = EvmTradeCollection;\nexports.EvmTransaction = EvmTransaction;\nexports.EvmTransactionLog = EvmTransactionLog;\nexports.EvmTransactionLogDecoded = EvmTransactionLogDecoded;\nexports.EvmTransactionTimestamp = EvmTransactionTimestamp;\nexports.EvmTransactionVerbose = EvmTransactionVerbose;\nexports.EvmWalletActiveChain = EvmWalletActiveChain;\nexports.EvmWalletActiveChains = EvmWalletActiveChains;\nexports.EvmWalletStat = EvmWalletStat;\nexports.EvmWalletStatNftTransfers = EvmWalletStatNftTransfers;\nexports.EvmWalletStatTokenTransfers = EvmWalletStatTokenTransfers;\nexports.EvmWalletStatTransactions = EvmWalletStatTransactions;\nexports.EvmWeb3version = EvmWeb3version;\nexports.GetBlockStatsOperation = GetBlockStatsOperation;\nexports.GetHottestNFTCollectionsByTradingVolumeOperation = GetHottestNFTCollectionsByTradingVolumeOperation;\nexports.GetNFTCollectionStatsOperation = GetNFTCollectionStatsOperation;\nexports.GetNFTTokenStatsOperation = GetNFTTokenStatsOperation;\nexports.GetNFTTradesOperation = GetNFTTradesOperation;\nexports.GetTokenStatsOperation = GetTokenStatsOperation;\nexports.GetTopERC20TokensByMarketCapOperation = GetTopERC20TokensByMarketCapOperation;\nexports.GetTopERC20TokensByPriceMoversOperation = GetTopERC20TokensByPriceMoversOperation;\nexports.GetTopNFTCollectionsByMarketCapOperation = GetTopNFTCollectionsByMarketCapOperation;\nexports.GetWalletActiveChainsOperation = GetWalletActiveChainsOperation;\nexports.GetWalletStatsOperation = GetWalletStatsOperation;\nexports.ReviewContractsOperation = ReviewContractsOperation;\nexports.Web3ApiVersionOperation = Web3ApiVersionOperation;\nexports.endpointWeightsOperation = endpointWeightsOperation;\nexports.getBlockOperation = getBlockOperation;\nexports.getContractEventsOperation = getContractEventsOperation;\nexports.getContractLogsOperation = getContractLogsOperation;\nexports.getContractNFTsOperation = getContractNFTsOperation;\nexports.getDateToBlockOperation = getDateToBlockOperation;\nexports.getInternalTransactionsOperation = getInternalTransactionsOperation;\nexports.getMultipleNFTsOperation = getMultipleNFTsOperation;\nexports.getNFTContractMetadataOperation = getNFTContractMetadataOperation;\nexports.getNFTContractTransfersOperation = getNFTContractTransfersOperation;\nexports.getNFTLowestPriceOperation = getNFTLowestPriceOperation;\nexports.getNFTMetadataOperation = getNFTMetadataOperation;\nexports.getNFTOwnersOperation = getNFTOwnersOperation;\nexports.getNFTTokenIdOwnersOperation = getNFTTokenIdOwnersOperation;\nexports.getNFTTradesOperation = getNFTTradesOperation;\nexports.getNFTTransfersByBlockOperation = getNFTTransfersByBlockOperation;\nexports.getNFTTransfersFromToBlockOperation = getNFTTransfersFromToBlockOperation;\nexports.getNFTTransfersOperation = getNFTTransfersOperation;\nexports.getNativeBalanceOperation = getNativeBalanceOperation;\nexports.getNativeBalancesForAddressesOperation = getNativeBalancesForAddressesOperation;\nexports.getPairAddressOperation = getPairAddressOperation;\nexports.getPairReservesOperation = getPairReservesOperation;\nexports.getTokenAllowanceOperation = getTokenAllowanceOperation;\nexports.getTokenMetadataBySymbolOperation = getTokenMetadataBySymbolOperation;\nexports.getTokenMetadataOperation = getTokenMetadataOperation;\nexports.getTokenPriceOperation = getTokenPriceOperation;\nexports.getTokenTransfersOperation = getTokenTransfersOperation;\nexports.getTransactionOperation = getTransactionOperation;\nexports.getTransactionVerboseOperation = getTransactionVerboseOperation;\nexports.getWalletNFTCollectionsOperation = getWalletNFTCollectionsOperation;\nexports.getWalletNFTTransfersOperation = getWalletNFTTransfersOperation;\nexports.getWalletNFTsOperation = getWalletNFTsOperation;\nexports.getWalletTokenBalancesOperation = getWalletTokenBalancesOperation;\nexports.getWalletTokenTransfersOperation = getWalletTokenTransfersOperation;\nexports.getWalletTransactionsOperation = getWalletTransactionsOperation;\nexports.getWalletTransactionsVerboseOperation = getWalletTransactionsVerboseOperation;\nexports.operations = operations;\nexports.operationsV2 = operationsV2;\nexports.operationsV2All = operationsV2All;\nexports.reSyncMetadataOperation = reSyncMetadataOperation;\nexports.resolveAddressOperation = resolveAddressOperation;\nexports.resolveDomainOperation = resolveDomainOperation;\nexports.resolveENSDomainOperation = resolveENSDomainOperation;\nexports.runContractFunctionOperation = runContractFunctionOperation;\nexports.syncNFTContractOperation = syncNFTContractOperation;\nexports.uploadFolderOperation = uploadFolderOperation;\nexports.web3ApiVersionOperation = web3ApiVersionOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/common-evm-utils/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/common-sol-utils/lib/cjs/index.cjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@moralisweb3/common-sol-utils/lib/cjs/index.cjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nvar bs58 = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\");\nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }\n\nvar BN__default = /*#__PURE__*/_interopDefault(BN);\nvar bs58__default = /*#__PURE__*/_interopDefault(bs58);\n\n/**\r\n * Copied (and remove obsolete functionalities) from https://github.com/solana-labs/solana-web3.js/blob/master/src/publickey.ts because\r\n * - We only care about address validation and conversion\r\n * - Resolving this dependency in UMD gives dependency errors\r\n */\r\n/**\r\n * Size of public key in bytes\r\n */\r\nvar PUBLIC_KEY_LENGTH = 32;\r\nfunction isPublicKeyData(value) {\r\n    return value._bn !== undefined;\r\n}\r\nvar PublicKey = /** @class */ (function () {\r\n    /**\r\n     * Create a new PublicKey object\r\n     * @param value ed25519 public key as buffer or base-58 encoded string\r\n     */\r\n    function PublicKey(value) {\r\n        if (isPublicKeyData(value)) {\r\n            this._bn = value._bn;\r\n        }\r\n        else {\r\n            if (typeof value === 'string') {\r\n                // assume base 58 encoding by default\r\n                var decoded = bs58__default.default.decode(value);\r\n                if (decoded.length !== PUBLIC_KEY_LENGTH) {\r\n                    throw new Error(\"Invalid public key input\");\r\n                }\r\n                this._bn = new BN__default.default(decoded);\r\n            }\r\n            else {\r\n                this._bn = new BN__default.default(value);\r\n            }\r\n            if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\r\n                throw new Error(\"Invalid public key input\");\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Return the base-58 representation of the public key\r\n     */\r\n    PublicKey.prototype.toBase58 = function () {\r\n        return bs58__default.default.encode(this.toBytes());\r\n    };\r\n    /**\r\n     * Return the byte array representation of the public key in big endian\r\n     */\r\n    PublicKey.prototype.toBytes = function () {\r\n        var buf = this.toBuffer();\r\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\r\n    };\r\n    /**\r\n     * Return the Buffer representation of the public key in big endian\r\n     */\r\n    PublicKey.prototype.toBuffer = function () {\r\n        var b = this._bn.toArrayLike(buffer.Buffer);\r\n        if (b.length === PUBLIC_KEY_LENGTH) {\r\n            return b;\r\n        }\r\n        var zeroPad = buffer.Buffer.alloc(32);\r\n        b.copy(zeroPad, 32 - b.length);\r\n        return zeroPad;\r\n    };\r\n    Object.defineProperty(PublicKey.prototype, Symbol.toStringTag, {\r\n        get: function () {\r\n            return \"PublicKey(\".concat(this.toString(), \")\");\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Return the base-58 representation of the public key\r\n     */\r\n    PublicKey.prototype.toString = function () {\r\n        return this.toBase58();\r\n    };\r\n    return PublicKey;\r\n}());\n\n/**\r\n * A representation of an address on the Solana network.\r\n *\r\n * Use this class any time you work with an address.\r\n *\r\n * @category DataType\r\n */\r\nvar SolAddress = /** @class */ (function () {\r\n    function SolAddress(address) {\r\n        this.address = address;\r\n    }\r\n    /**\r\n     * Create a new instance of SolAddress from any valid address input.\r\n     *\r\n     * @example `const address = SolAddress.create(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\")`\r\n     * @throws an error when a passed address is invalid.\r\n     */\r\n    SolAddress.create = function (address) {\r\n        return address instanceof SolAddress ? address : new SolAddress(SolAddress.parse(address));\r\n    };\r\n    SolAddress.fromJSON = function (address) {\r\n        return SolAddress.create(address);\r\n    };\r\n    SolAddress.parse = function (address) {\r\n        try {\r\n            var publicKey = new PublicKey(address);\r\n            return publicKey.toBase58();\r\n        }\r\n        catch (e) {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Invalid Solana address provided: \".concat(address),\r\n                cause: e,\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    SolAddress.prototype.format = function () {\r\n        return this.address;\r\n    };\r\n    /**\r\n     * Checks the equality of the current address with another Solana address.\r\n     * @example `address.equals(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\")`\r\n     * @example `address.equals(SolAddress.create(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"))`\r\n     */\r\n    SolAddress.prototype.equals = function (address) {\r\n        return this.address === SolAddress.create(address).address;\r\n    };\r\n    /**\r\n     * @returns a string representing the address.\r\n     * @example address.toString(); // \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\r\n     */\r\n    SolAddress.prototype.toString = function () {\r\n        return this.address;\r\n    };\r\n    /**\r\n     * @returns a string representing the address.\r\n     * @example address.toJSON(); // \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\r\n     */\r\n    SolAddress.prototype.toJSON = function () {\r\n        return this.address;\r\n    };\r\n    return SolAddress;\r\n}());\n\nvar solNetworkNames = ['mainnet', 'devnet'];\r\n/**\r\n * A representation of a Solana network.\r\n *\r\n * @category DataType\r\n */\r\nvar SolNetwork = /** @class */ (function () {\r\n    function SolNetwork(network) {\r\n        this.network = network;\r\n    }\r\n    Object.defineProperty(SolNetwork, \"MAINNET\", {\r\n        /**\r\n         * Returns MAINNET network\r\n         *\r\n         * @example SolNetwork.MAINNET\r\n         */\r\n        get: function () {\r\n            return SolNetwork.create('mainnet');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SolNetwork, \"DEVNET\", {\r\n        /**\r\n         * Returns DEVNET network\r\n         *\r\n         * @example SolNetwork.MAINNET\r\n         */\r\n        get: function () {\r\n            return SolNetwork.create('devnet');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create a new instance of SolNetwork from any valid network input.\r\n     *\r\n     * @example `const network = SolNetwork.create(\"mainnet\")`\r\n     * @throws an error when a passed network is invalid.\r\n     */\r\n    SolNetwork.create = function (network) {\r\n        return network instanceof SolNetwork ? network : new SolNetwork(SolNetwork.parse(network));\r\n    };\r\n    SolNetwork.fromJSON = function (network) {\r\n        return SolNetwork.create(network);\r\n    };\r\n    SolNetwork.parse = function (network) {\r\n        if (typeof network === 'string') {\r\n            if (!solNetworkNames.includes(network)) {\r\n                throw new commonCore.CoreError({\r\n                    code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                    message: \"Solana network is not supported: \".concat(network),\r\n                });\r\n            }\r\n        }\r\n        return network;\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    SolNetwork.prototype.format = function () {\r\n        return this.network;\r\n    };\r\n    /**\r\n     * Checks the equality of the current network with another Solana network.\r\n     * @example `network.equals(\"mainnet\")`\r\n     * @example `network.equals(SolNetwork.create(\"mainnet\"))`\r\n     */\r\n    SolNetwork.prototype.equals = function (network) {\r\n        return this.network === SolNetwork.create(network).network;\r\n    };\r\n    /**\r\n     * @returns a string representing the network.\r\n     * @example network.toJSON(); // \"mainnet\"\r\n     */\r\n    SolNetwork.prototype.toJSON = function () {\r\n        return this.network;\r\n    };\r\n    /**\r\n     * @returns a string representing the network.\r\n     * @example network.toString(); // \"mainnet\"\r\n     */\r\n    SolNetwork.prototype.toString = function () {\r\n        return this.network;\r\n    };\r\n    return SolNetwork;\r\n}());\n\nvar unitToDecimals = {\r\n    solana: 9,\r\n    lamports: 0,\r\n};\r\n/**\r\n * The SolNative class is a MoralisData that references to the value of Solana native currency SOL\r\n *\r\n * @category DataType\r\n */\r\nvar SolNative = /** @class */ (function () {\r\n    function SolNative(rawValue) {\r\n        this.rawValue = rawValue;\r\n    }\r\n    /**\r\n     * Create a new instance of SolNative from any valid {@link SolNativeish} value.\r\n     * @param value - the value to create the SolNative from\r\n     * @param unit - the unit of the value (optional), defaults to `solana`\r\n     * @returns a new instance of SolNative\r\n     * @example\r\n     * ```ts\r\n     * const native = SolNative.create(2, 'lamports');\r\n     * const native = SolNative.create(2);\r\n     *```\r\n     */\r\n    SolNative.create = function (value, unit) {\r\n        if (value instanceof SolNative) {\r\n            return value;\r\n        }\r\n        return new SolNative(SolNative.parse(value, unit));\r\n    };\r\n    SolNative.fromJSON = function (json) {\r\n        return SolNative.create(json, 'lamports');\r\n    };\r\n    SolNative.parse = function (value, unit) {\r\n        if (unit === void 0) { unit = 'solana'; }\r\n        var decimal;\r\n        if (typeof unit === 'number') {\r\n            decimal = unit;\r\n        }\r\n        else if (unitToDecimals[unit] !== undefined) {\r\n            decimal = unitToDecimals[unit];\r\n        }\r\n        else {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Not supported Solana unit: \".concat(unit),\r\n            });\r\n        }\r\n        return commonCore.BigNumber.fromDecimal(value.toString(), decimal);\r\n    };\r\n    /**\r\n     * Compares two SolNativeish values.\r\n     * @param valueA - the first value to compare\r\n     * @param valueB - the second value to compare\r\n     * @returns true if the values are equal\r\n     * @example\r\n     * ```ts\r\n     * SolNative.equals(SolNative.create(1), SolNative.create(1)); // true\r\n     * ```\r\n     */\r\n    SolNative.equals = function (valueA, valueB) {\r\n        var solNativeA = SolNative.create(valueA);\r\n        var solNativeB = SolNative.create(valueB);\r\n        return solNativeA.lamports === solNativeB.lamports;\r\n    };\r\n    /**\r\n     * Compares SolNative with current instance.\r\n     * @param value - the value to compare with\r\n     * @returns true if the values are equal\r\n     * @example\r\n     * ```ts\r\n     * const native = SolNative.create(2, 'lamports');\r\n     * native.equals(SolNative.create(1)); // false\r\n     * ```\r\n     */\r\n    SolNative.prototype.equals = function (value) {\r\n        return SolNative.equals(this, value);\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    SolNative.prototype.format = function () {\r\n        // TODO: add `format` argument\r\n        return this.lamports;\r\n    };\r\n    /**\r\n     * Converts the SolNative to a string.\r\n     * @returns the value of the SolNative as a string\r\n     * @example `native.toJSON()`\r\n     */\r\n    SolNative.prototype.toJSON = function () {\r\n        return this.lamports;\r\n    };\r\n    /**\r\n     * Converts the SolNative to a string.\r\n     * @returns the value of the SolNative as a string\r\n     * @example `native.toString()`\r\n     */\r\n    SolNative.prototype.toString = function () {\r\n        return this.lamports;\r\n    };\r\n    Object.defineProperty(SolNative.prototype, \"value\", {\r\n        /**\r\n         * @returns the value of the SolNative as a BigNumber\r\n         * @example `native.value`\r\n         */\r\n        get: function () {\r\n            return this.rawValue;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SolNative.prototype, \"solana\", {\r\n        /**\r\n         * Converts the SolNative to a solana unit.\r\n         * @returns the value of the SolNative as a solana string\r\n         * @example `native.solana`\r\n         */\r\n        get: function () {\r\n            return this.rawValue.toDecimal(unitToDecimals['solana']);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SolNative.prototype, \"lamports\", {\r\n        /**\r\n         * Converts the SolNative to a string.\r\n         * @returns the value of the SolNative as a string\r\n         * @example `native.lamports`\r\n         */\r\n        get: function () {\r\n            return this.rawValue.toString();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return SolNative;\r\n}());\n\n// $ref: #/components/schemas/SPLNativePrice\r\n// type: SPLNativePrice\r\n// properties:\r\n// - value ($ref: #/components/schemas/SPLNativePrice/properties/value)\r\n// - decimals ($ref: #/components/schemas/SPLNativePrice/properties/decimals)\r\n// - name ($ref: #/components/schemas/SPLNativePrice/properties/name)\r\n// - symbol ($ref: #/components/schemas/SPLNativePrice/properties/symbol)\r\nvar SolSPLNativePrice = /** @class */ (function () {\r\n    function SolSPLNativePrice(input) {\r\n        this.value = input.value;\r\n        this.decimals = input.decimals;\r\n        this.name = input.name;\r\n        this.symbol = input.symbol;\r\n    }\r\n    SolSPLNativePrice.create = function (input) {\r\n        if (input instanceof SolSPLNativePrice) {\r\n            return input;\r\n        }\r\n        return new SolSPLNativePrice(input);\r\n    };\r\n    SolSPLNativePrice.fromJSON = function (json) {\r\n        var input = {\r\n            value: json.value,\r\n            decimals: json.decimals,\r\n            name: json.name,\r\n            symbol: json.symbol,\r\n        };\r\n        return SolSPLNativePrice.create(input);\r\n    };\r\n    SolSPLNativePrice.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value,\r\n            decimals: this.decimals,\r\n            name: this.name,\r\n            symbol: this.symbol,\r\n        };\r\n    };\r\n    return SolSPLNativePrice;\r\n}());\n\nvar SolSPLTokenPrice = /** @class */ (function () {\r\n    function SolSPLTokenPrice(input) {\r\n        this.nativePrice = input.nativePrice ? SolSPLNativePrice.create(input.nativePrice) : undefined;\r\n        this.usdPrice = input.usdPrice;\r\n        this.exchangeAddress = SolAddress.create(input.exchangeAddress);\r\n        this.exchangeName = input.exchangeName;\r\n    }\r\n    SolSPLTokenPrice.create = function (input) {\r\n        if (input instanceof SolSPLTokenPrice) {\r\n            return input;\r\n        }\r\n        return new SolSPLTokenPrice(input);\r\n    };\r\n    SolSPLTokenPrice.fromJSON = function (json) {\r\n        var input = {\r\n            nativePrice: json.nativePrice ? SolSPLNativePrice.fromJSON(json.nativePrice) : undefined,\r\n            usdPrice: json.usdPrice,\r\n            exchangeAddress: SolAddress.fromJSON(json.exchangeAddress),\r\n            exchangeName: json.exchangeName,\r\n        };\r\n        return SolSPLTokenPrice.create(input);\r\n    };\r\n    SolSPLTokenPrice.prototype.toJSON = function () {\r\n        return {\r\n            nativePrice: this.nativePrice ? this.nativePrice.toJSON() : undefined,\r\n            usdPrice: this.usdPrice,\r\n            exchangeAddress: this.exchangeAddress.toJSON(),\r\n            exchangeName: this.exchangeName,\r\n        };\r\n    };\r\n    return SolSPLTokenPrice;\r\n}());\n\nvar GetTokenPriceOperation = {\r\n    operationId: \"getTokenPrice\",\r\n    groupName: \"token\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/token/{network}/{address}/price\",\r\n    parameterNames: [\"network\", \"address\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return SolSPLTokenPrice.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var network = SolNetwork.create(request.network);\r\n        var address = SolAddress.create(request.address);\r\n        return {\r\n            network: network.toJSON(),\r\n            address: address.toJSON(),\r\n        };\r\n    },\r\n};\n\nvar operations = [\r\n    GetTokenPriceOperation,\r\n];\n\n// $ref: #/paths/~1token~1{network}~1{address}~1price/get/parameters/0/schema\r\n// typeName: getTokenPrice_network_Enum\r\nvar SolGetTokenPriceNetworkEnum = /** @class */ (function () {\r\n    function SolGetTokenPriceNetworkEnum() {\r\n    }\r\n    SolGetTokenPriceNetworkEnum.create = function (input) {\r\n        return input;\r\n    };\r\n    SolGetTokenPriceNetworkEnum.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return SolGetTokenPriceNetworkEnum;\r\n}());\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nvar CommonSolUtilsConfig = {\r\n    defaultSolNetwork: {\r\n        name: 'defaultSolNetwork',\r\n        defaultValue: 'mainnet',\r\n    },\r\n};\n\nvar CommonSolUtilsConfigSetup = /** @class */ (function () {\r\n    function CommonSolUtilsConfigSetup() {\r\n    }\r\n    CommonSolUtilsConfigSetup.register = function (config) {\r\n        config.registerKey(CommonSolUtilsConfig.defaultSolNetwork);\r\n    };\r\n    return CommonSolUtilsConfigSetup;\r\n}());\n\nvar CommonSolUtils = /** @class */ (function (_super) {\r\n    __extends(CommonSolUtils, _super);\r\n    function CommonSolUtils(core) {\r\n        return _super.call(this, CommonSolUtils.moduleName, core) || this;\r\n    }\r\n    CommonSolUtils.create = function (core) {\r\n        return new CommonSolUtils(core !== null && core !== void 0 ? core : commonCore.CoreProvider.getDefault());\r\n    };\r\n    CommonSolUtils.prototype.setup = function () {\r\n        CommonSolUtilsConfigSetup.register(this.core.config);\r\n    };\r\n    CommonSolUtils.prototype.start = function () {\r\n        // Nothing\r\n    };\r\n    Object.defineProperty(CommonSolUtils.prototype, \"SolAddress\", {\r\n        get: function () {\r\n            return SolAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommonSolUtils.prototype, \"SolNative\", {\r\n        get: function () {\r\n            return SolNative;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommonSolUtils.prototype, \"SolNetwork\", {\r\n        get: function () {\r\n            return SolNetwork;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    CommonSolUtils.moduleName = 'solUtils';\r\n    return CommonSolUtils;\r\n}(commonCore.Module));\n\nvar SolNetworkResolver = /** @class */ (function () {\r\n    function SolNetworkResolver() {\r\n    }\r\n    SolNetworkResolver.resolve = function (network, core) {\r\n        if (!network) {\r\n            network = core.config.get(CommonSolUtilsConfig.defaultSolNetwork);\r\n        }\r\n        return SolNetwork.create(network).network;\r\n    };\r\n    return SolNetworkResolver;\r\n}());\n\n/** Gets native balance owned by the given network and address */\r\nvar getBalanceOperation = {\r\n    method: 'GET',\r\n    name: 'getBalance',\r\n    id: 'balance',\r\n    groupName: 'account',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/account/{network}/{address}/balance',\r\n    getRequestUrlParams: getRequestUrlParams$5,\r\n    deserializeResponse: deserializeResponse$5,\r\n    serializeRequest: serializeRequest$5,\r\n    deserializeRequest: deserializeRequest$5,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$5(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$5(jsonResponse) {\r\n    return SolNative.create(jsonResponse.lamports);\r\n}\r\nfunction serializeRequest$5(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$5(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets NFTs owned by the given network and address */\r\nvar getNFTsOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTs',\r\n    id: 'getNFTs',\r\n    groupName: 'account',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/account/{network}/{address}/nft',\r\n    getRequestUrlParams: getRequestUrlParams$4,\r\n    deserializeResponse: deserializeResponse$4,\r\n    serializeRequest: serializeRequest$4,\r\n    deserializeRequest: deserializeRequest$4,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$4(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$4(jsonResponse) {\r\n    return jsonResponse.map(function (item) {\r\n        return {\r\n            associatedTokenAddress: SolAddress.create(item.associatedTokenAddress),\r\n            mint: SolAddress.create(item.mint),\r\n            name: item.name,\r\n            symbol: item.symbol,\r\n        };\r\n    });\r\n}\r\nfunction serializeRequest$4(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$4(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets the portfolio of the given network and address */\r\nvar getPortfolioOperation = {\r\n    method: 'GET',\r\n    name: 'getPortfolio',\r\n    id: 'getPortfolio',\r\n    groupName: 'account',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/account/{network}/{address}/portfolio',\r\n    getRequestUrlParams: getRequestUrlParams$3,\r\n    deserializeResponse: deserializeResponse$3,\r\n    serializeRequest: serializeRequest$3,\r\n    deserializeRequest: deserializeRequest$3,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$3(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$3(jsonResponse) {\r\n    return {\r\n        nativeBalance: SolNative.create(jsonResponse.nativeBalance.lamports, 'lamports'),\r\n        nfts: jsonResponse.nfts.map(function (nft) {\r\n            return {\r\n                associatedTokenAddress: SolAddress.create(nft.associatedTokenAddress),\r\n                mint: SolAddress.create(nft.mint),\r\n                name: nft.name,\r\n                symbol: nft.symbol,\r\n            };\r\n        }),\r\n        tokens: jsonResponse.tokens.map(function (token) {\r\n            return {\r\n                associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),\r\n                mint: SolAddress.create(token.mint),\r\n                amount: SolNative.create(token.amountRaw, 'lamports'),\r\n                name: token.name,\r\n                symbol: token.symbol,\r\n            };\r\n        }),\r\n    };\r\n}\r\nfunction serializeRequest$3(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$3(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets token balances owned by the given network and address */\r\nvar getSPLOperation = {\r\n    method: 'GET',\r\n    name: 'getSPL',\r\n    id: 'getSPL',\r\n    groupName: 'account',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/account/{network}/{address}/tokens',\r\n    getRequestUrlParams: getRequestUrlParams$2,\r\n    deserializeResponse: deserializeResponse$2,\r\n    serializeRequest: serializeRequest$2,\r\n    deserializeRequest: deserializeRequest$2,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$2(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$2(jsonResponse) {\r\n    return jsonResponse.map(function (token) {\r\n        return {\r\n            associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),\r\n            mint: SolAddress.create(token.mint),\r\n            amount: SolNative.create(token.amountRaw, 'lamports'),\r\n            name: token.name,\r\n            symbol: token.symbol,\r\n        };\r\n    });\r\n}\r\nfunction serializeRequest$2(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$2(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */\r\nvar getNFTMetadataOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTMetadata',\r\n    id: 'getNFTMetadata',\r\n    groupName: 'nft',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/nft/{network}/{address}/metadata',\r\n    getRequestUrlParams: getRequestUrlParams$1,\r\n    deserializeResponse: deserializeResponse$1,\r\n    serializeRequest: serializeRequest$1,\r\n    deserializeRequest: deserializeRequest$1,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$1(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$1(jsonResponse) {\r\n    return {\r\n        mint: SolAddress.create(jsonResponse.mint),\r\n        standard: jsonResponse.standard,\r\n        name: jsonResponse.name,\r\n        symbol: jsonResponse.symbol,\r\n        metaplex: {\r\n            metadataUri: jsonResponse.metaplex.metadataUri,\r\n            updateAuthority: SolAddress.create(jsonResponse.metaplex.updateAuthority),\r\n            sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,\r\n            primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,\r\n            isMutable: jsonResponse.metaplex.isMutable,\r\n            masterEdition: jsonResponse.metaplex.masterEdition,\r\n        },\r\n    };\r\n}\r\nfunction serializeRequest$1(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$1(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets the token price (usd and native) for a given contract address and network */\r\nvar getTokenPriceOperation = {\r\n    method: 'GET',\r\n    name: 'getTokenPrice',\r\n    id: 'getTokenPrice',\r\n    groupName: 'token',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/token/{network}/{address}/price',\r\n    getRequestUrlParams: getRequestUrlParams,\r\n    deserializeResponse: deserializeResponse,\r\n    serializeRequest: serializeRequest,\r\n    deserializeRequest: deserializeRequest,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams(request, core) {\r\n    var network = SolNetworkResolver.resolve(request.network, core);\r\n    if (network !== 'mainnet') {\r\n        throw new commonCore.MoralisApiError({\r\n            message: \"Incorrct value for 'network', getTokenPrice is only available on mainnet\",\r\n            code: commonCore.ApiErrorCode.INVALID_PARAMS,\r\n        });\r\n    }\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse(jsonResponse) {\r\n    return SolSPLTokenPrice.fromJSON(jsonResponse);\r\n}\r\nfunction serializeRequest(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\nvar operationsV2 = [\r\n    getBalanceOperation,\r\n    getNFTsOperation,\r\n    getPortfolioOperation,\r\n    getSPLOperation,\r\n    getNFTMetadataOperation,\r\n];\r\n/**\r\n * @deprecated This list includes upgraded operations to the hybrid approach in the old format.\r\n */\r\nvar operationsV2All = __spreadArray(__spreadArray([], operationsV2, true), [getTokenPriceOperation], false);\n\nexports.CommonSolUtils = CommonSolUtils;\nexports.CommonSolUtilsConfig = CommonSolUtilsConfig;\nexports.CommonSolUtilsConfigSetup = CommonSolUtilsConfigSetup;\nexports.GetTokenPriceOperation = GetTokenPriceOperation;\nexports.SolAddress = SolAddress;\nexports.SolGetTokenPriceNetworkEnum = SolGetTokenPriceNetworkEnum;\nexports.SolNative = SolNative;\nexports.SolNetwork = SolNetwork;\nexports.SolNetworkResolver = SolNetworkResolver;\nexports.SolSPLNativePrice = SolSPLNativePrice;\nexports.SolSPLTokenPrice = SolSPLTokenPrice;\nexports.getBalanceOperation = getBalanceOperation;\nexports.getNFTMetadataOperation = getNFTMetadataOperation;\nexports.getNFTsOperation = getNFTsOperation;\nexports.getPortfolioOperation = getPortfolioOperation;\nexports.getSPLOperation = getSPLOperation;\nexports.getTokenPriceOperation = getTokenPriceOperation;\nexports.operations = operations;\nexports.operationsV2 = operationsV2;\nexports.operationsV2All = operationsV2All;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/common-sol-utils/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/common-streams-utils/lib/cjs/index.cjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@moralisweb3/common-streams-utils/lib/cjs/index.cjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonAptosUtils = __webpack_require__(/*! @moralisweb3/common-aptos-utils */ \"(ssr)/./node_modules/@moralisweb3/common-aptos-utils/lib/cjs/index.cjs\");\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar commonEvmUtils = __webpack_require__(/*! @moralisweb3/common-evm-utils */ \"(ssr)/./node_modules/@moralisweb3/common-evm-utils/lib/cjs/index.cjs\");\nvar abi = __webpack_require__(/*! @ethersproject/abi */ \"(ssr)/./node_modules/@ethersproject/abi/lib/index.js\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\n/**\r\n * The AptosStream class is a representation of an Aptos Stream that is returned by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar AptosStream = /** @class */ (function () {\r\n    function AptosStream(data) {\r\n        this._data = AptosStream.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of AptosStream\r\n     *\r\n     * @param data - the AptosStreamish type\r\n     * @example\r\n     * ```ts\r\n     * const aptosStream = AptosStream.create(data);\r\n     * ```\r\n     * @returns an instance of AptosStream\r\n     */\r\n    AptosStream.create = function (data) {\r\n        if (data instanceof AptosStream) {\r\n            return data;\r\n        }\r\n        return new AptosStream(data);\r\n    };\r\n    /**\r\n     * Compares two AptosStream data. It checks a deep equality check of both values.\r\n     * @param valueA - the first AptosStreamish data to compare\r\n     * @param valueB - the second AptosStreamish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  AptosStream.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    AptosStream.equals = function (valueA, valueB) {\r\n        var aptosStreamA = AptosStream.create(valueA);\r\n        var aptosStreamB = AptosStream.create(valueB);\r\n        if (aptosStreamA.id !== aptosStreamB.id) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an AptosStreamish data to this AptosStream instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * aptosStream.equals(value);\r\n     * ```\r\n     */\r\n    AptosStream.prototype.equals = function (value) {\r\n        return AptosStream.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the AptosStream instance to a JSON object.\r\n     * @returns JSON object of the AptosStream instance\r\n     * @example `aptosStream.toJSON()`\r\n     */\r\n    AptosStream.prototype.toJSON = function () {\r\n        return __assign(__assign({}, this._data), { network: this.network.map(function (network) { return network.toJSON(); }) });\r\n    };\r\n    /**\r\n     * Converts the AptosStream instance to a JSON object.\r\n     * @returns JSON object of the AptosStream instance\r\n     * @example `aptosStream.format()`\r\n     */\r\n    AptosStream.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(AptosStream.prototype, \"network\", {\r\n        get: function () {\r\n            return this._data.network;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"webhookUrl\", {\r\n        get: function () {\r\n            return this._data.webhookUrl;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"description\", {\r\n        get: function () {\r\n            return this._data.description;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"tag\", {\r\n        get: function () {\r\n            return this._data.tag;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"allAddresses\", {\r\n        get: function () {\r\n            return this._data.allAddresses;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"id\", {\r\n        get: function () {\r\n            return this._data.id;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"status\", {\r\n        get: function () {\r\n            return this._data.status;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"statusMessage\", {\r\n        get: function () {\r\n            return this._data.statusMessage;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"demo\", {\r\n        get: function () {\r\n            return this._data.demo;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"includeChanges\", {\r\n        get: function () {\r\n            return this._data.includeChanges;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"includeEvents\", {\r\n        get: function () {\r\n            return this._data.includeEvents;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"includePayload\", {\r\n        get: function () {\r\n            return this._data.includePayload;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"isErrorSince\", {\r\n        get: function () {\r\n            return this._data.isErrorSince;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"events\", {\r\n        get: function () {\r\n            return this._data.events;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"functions\", {\r\n        get: function () {\r\n            return this._data.functions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AptosStream.prototype, \"amountOfAddresses\", {\r\n        get: function () {\r\n            return this._data.amountOfAddresses;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    AptosStream.parse = function (data) {\r\n        return __assign(__assign({}, data), { network: data.network.map(function (network) { return commonAptosUtils.AptosNetwork.create(network); }) });\r\n    };\r\n    return AptosStream;\r\n}());\n\n/**\r\n * The StreamSelector class is a representation of a stream selector\r\n *\r\n * Use this class any time you want to use a value in your stream trigger data that is not a static value\r\n *\r\n * @category DataType\r\n */\r\nvar StreamSelector = /** @class */ (function () {\r\n    /**\r\n     * Create a new instance of StreamSelector from any valid stream data field\r\n     *\r\n     * @example\r\n     * ```\r\n     * const receiverSelector = StreamSelector.create('$to')\r\n     * const selector = StreamSelector.create('$contract')\r\n     * ```\r\n     */\r\n    function StreamSelector(data) {\r\n        this._value = StreamSelector.parse(data);\r\n    }\r\n    StreamSelector.isSelectorString = function (selector) {\r\n        if (selector instanceof StreamSelector) {\r\n            return true;\r\n        }\r\n        return selector.startsWith('$');\r\n    };\r\n    StreamSelector.create = function (streamSelector) {\r\n        if (streamSelector instanceof StreamSelector) {\r\n            return streamSelector;\r\n        }\r\n        return new StreamSelector(streamSelector);\r\n    };\r\n    StreamSelector.parse = function (streamSelector) {\r\n        if (!StreamSelector.isSelectorString(streamSelector)) {\r\n            throw new commonCore.CoreError({\r\n                code: commonCore.CoreErrorCode.INVALID_ARGUMENT,\r\n                message: 'Invalid selector string provided',\r\n            });\r\n        }\r\n        return streamSelector;\r\n    };\r\n    /**\r\n     * Compares two StreamSelector data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamSelectorish data to compare\r\n     * @param valueB - the second StreamSelectorish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamSelector.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    StreamSelector.equals = function (valueA, valueB) {\r\n        var streamSelectorA = StreamSelector.create(valueA);\r\n        var streamSelectorB = StreamSelector.create(valueB);\r\n        return streamSelectorA.value === streamSelectorB.value;\r\n    };\r\n    /**\r\n     * Compares an StreamSelectorish data to this StreamSelector instance.\r\n     * @param streamSelector - the streamSelector to compare\r\n     * @returns true if the streamSelector is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * streamSelector.equals(streamSelector);\r\n     * ```\r\n     */\r\n    StreamSelector.prototype.equals = function (streamSelector) {\r\n        return StreamSelector.equals(this, streamSelector);\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamSelector.prototype.format = function () {\r\n        return this.value;\r\n    };\r\n    Object.defineProperty(StreamSelector.prototype, \"value\", {\r\n        /**\r\n         * @returns the selector path\r\n         * @example '$from'\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StreamSelector.prototype.toJSON = function () {\r\n        return this.value;\r\n    };\r\n    return StreamSelector;\r\n}());\n\n/**\r\n * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar StreamTrigger = /** @class */ (function () {\r\n    function StreamTrigger(data) {\r\n        this._data = StreamTrigger.parse(data);\r\n    }\r\n    StreamTrigger.create = function (data) {\r\n        if (data instanceof StreamTrigger) {\r\n            return data;\r\n        }\r\n        return new StreamTrigger(data);\r\n    };\r\n    StreamTrigger.parseSelectorOrAddress = function (input) {\r\n        var result;\r\n        // If it is not an EvmAddress, it can be a string, but only the ones that are selectors should be treated that way\r\n        if (!(input instanceof commonEvmUtils.EvmAddress) && StreamSelector.isSelectorString(input)) {\r\n            result = StreamSelector.create(input);\r\n        }\r\n        else {\r\n            result = commonEvmUtils.EvmAddress.create(input);\r\n        }\r\n        return result;\r\n    };\r\n    // eslint-disable-next-line complexity\r\n    StreamTrigger.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var streamTriggerA = StreamTrigger.create(valueA);\r\n        var streamTriggerB = StreamTrigger.create(valueB);\r\n        if (streamTriggerA.type !== streamTriggerB.type) {\r\n            return false;\r\n        }\r\n        // contractAddress can be a StreamSelector or an EvmAddress. It is easier to compare them as strings\r\n        if (streamTriggerA.contractAddress.toJSON() !== streamTriggerB.contractAddress.toJSON()) {\r\n            return false;\r\n        }\r\n        if (streamTriggerA.functionAbi !== streamTriggerB.functionAbi) {\r\n            return false;\r\n        }\r\n        if (((_a = streamTriggerA.inputs) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = streamTriggerB.inputs) === null || _b === void 0 ? void 0 : _b.length)) {\r\n            return false;\r\n        }\r\n        var triggerInputsA = streamTriggerA.inputs || [];\r\n        var triggerInputsB = streamTriggerB.inputs || [];\r\n        for (var i = 0; i < (triggerInputsA === null || triggerInputsA === void 0 ? void 0 : triggerInputsA.length); i++) {\r\n            if (triggerInputsA[i] !== triggerInputsB[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        if (streamTriggerA.topic0 !== streamTriggerB.topic0) {\r\n            return false;\r\n        }\r\n        if (streamTriggerA.callFrom !== streamTriggerB.callFrom) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares two StreamTrigger arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.\r\n     * @param valueA - the first StreamTriggerish[] data to compare\r\n     * @param valueB - the second StreamTriggerish[] data to compare\r\n     * @returns true if all values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamTrigger.arrayEquals(valueA, valueB);\r\n     * ```\r\n     */\r\n    StreamTrigger.arrayEquals = function (valueA, valueB) {\r\n        if (valueA.length !== valueB.length) {\r\n            return false;\r\n        }\r\n        var triggersA = valueA.map(function (trigger) { return StreamTrigger.create(trigger); });\r\n        var triggersB = valueB.map(function (trigger) { return StreamTrigger.create(trigger); });\r\n        var seenTriggersB = Array(triggersB.length).fill(false);\r\n        var _loop_1 = function (i) {\r\n            var indexB = triggersB.findIndex(function (triggerB) { return triggerB.equals(triggersA[i]); });\r\n            if (indexB < 0) {\r\n                return { value: false };\r\n            }\r\n            seenTriggersB[indexB] = true;\r\n        };\r\n        for (var i = 0; i < triggersA.length; i++) {\r\n            var state_1 = _loop_1(i);\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n        if (seenTriggersB.some(function (seen) { return !seen; })) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamTrigger data to this StreamTrigger instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * streamTrigger.equals(value);\r\n     * ```\r\n     */\r\n    StreamTrigger.prototype.equals = function (value) {\r\n        return StreamTrigger.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamTrigger instance to a JSON object.\r\n     * @returns JSON object of the StreamTrigger instance\r\n     * @example `streamTrigger.toJSON()`\r\n     */\r\n    StreamTrigger.prototype.toJSON = function () {\r\n        var _a = this._data, contractAddress = _a.contractAddress, callFrom = _a.callFrom, data = __rest(_a, [\"contractAddress\", \"callFrom\"]);\r\n        return __assign(__assign({}, data), { contractAddress: contractAddress.toJSON(), callFrom: callFrom === null || callFrom === void 0 ? void 0 : callFrom.toJSON() });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamTrigger.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamTrigger.prototype, \"type\", {\r\n        get: function () {\r\n            return this._data.type;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamTrigger.prototype, \"contractAddress\", {\r\n        get: function () {\r\n            return this._data.contractAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamTrigger.prototype, \"functionAbi\", {\r\n        get: function () {\r\n            return this._data.functionAbi;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamTrigger.prototype, \"inputs\", {\r\n        get: function () {\r\n            return this._data.inputs;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamTrigger.prototype, \"topic0\", {\r\n        get: function () {\r\n            return this._data.topic0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamTrigger.prototype, \"callFrom\", {\r\n        get: function () {\r\n            return this._data.callFrom;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StreamTrigger.parse = function (data) {\r\n        var contractAddressInput = data.contractAddress, callFromInput = data.callFrom, input = __rest(data, [\"contractAddress\", \"callFrom\"]);\r\n        var contractAddress = StreamTrigger.parseSelectorOrAddress(contractAddressInput);\r\n        var callFrom = commonCore.maybe(callFromInput, function (value) { return StreamTrigger.parseSelectorOrAddress(value); });\r\n        return __assign(__assign({}, input), { contractAddress: contractAddress, callFrom: callFrom });\r\n    };\r\n    return StreamTrigger;\r\n}());\n\n/**\r\n * The EvmStream class is a representation of Moralis Stream that is returned by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar EvmStream = /** @class */ (function () {\r\n    function EvmStream(data) {\r\n        this._data = EvmStream.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmStream\r\n     *\r\n     * @param data - the EvmStreamish type\r\n     * @example\r\n     * ```ts\r\n     * const evmStream = EvmStream.create(data);\r\n     * ```\r\n     * @returns an instance of EvmStream\r\n     */\r\n    EvmStream.create = function (data) {\r\n        if (data instanceof EvmStream) {\r\n            return data;\r\n        }\r\n        return new EvmStream(data);\r\n    };\r\n    /**\r\n     * Compares two EvmStream data. It checks a deep equality check of both values.\r\n     * @param valueA - the first EvmStreamish data to compare\r\n     * @param valueB - the second EvmStreamish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  EvmStream.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    EvmStream.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var evmStreamA = EvmStream.create(valueA);\r\n        var evmStreamB = EvmStream.create(valueB);\r\n        if (evmStreamA.id !== evmStreamB.id) {\r\n            return false;\r\n        }\r\n        if (((_a = evmStreamA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmStreamB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\r\n            !StreamTrigger.arrayEquals(evmStreamA.triggers || [], evmStreamB.triggers || [])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an EvmStreamish data to this EvmStream instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * evmStream.equals(value);\r\n     * ```\r\n     */\r\n    EvmStream.prototype.equals = function (value) {\r\n        return EvmStream.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the EvmStream instance to a JSON object.\r\n     * @returns JSON object of the EvmStream instance\r\n     * @example `evmStream.toJSON()`\r\n     */\r\n    EvmStream.prototype.toJSON = function () {\r\n        var _a = this._data, chains = _a.chains, triggers = _a.triggers, data = __rest(_a, [\"chains\", \"triggers\"]);\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        return __assign(__assign({}, data), { chainIds: chains.map(function (chain) { return chain.toJSON(); }), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmStream.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmStream.prototype, \"chains\", {\r\n        get: function () {\r\n            return this._data.chains;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"chainIds\", {\r\n        get: function () {\r\n            return this._data.chains.map(function (chain) { return chain.hex; });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"webhookUrl\", {\r\n        get: function () {\r\n            return this._data.webhookUrl;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"description\", {\r\n        get: function () {\r\n            return this._data.description;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"tag\", {\r\n        get: function () {\r\n            return this._data.tag;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"topic0\", {\r\n        get: function () {\r\n            return this._data.topic0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"allAddresses\", {\r\n        get: function () {\r\n            return this._data.allAddresses;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"includeNativeTxs\", {\r\n        get: function () {\r\n            return this._data.includeNativeTxs;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"includeContractLogs\", {\r\n        get: function () {\r\n            return this._data.includeContractLogs;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"includeInternalTxs\", {\r\n        get: function () {\r\n            return this._data.includeInternalTxs;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"includeAllTxLogs\", {\r\n        get: function () {\r\n            return this._data.includeAllTxLogs;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"abi\", {\r\n        get: function () {\r\n            return this._data.abi;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"advancedOptions\", {\r\n        get: function () {\r\n            return this._data.advancedOptions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"id\", {\r\n        get: function () {\r\n            return this._data.id;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"status\", {\r\n        get: function () {\r\n            return this._data.status;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"statusMessage\", {\r\n        get: function () {\r\n            return this._data.statusMessage;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"triggers\", {\r\n        get: function () {\r\n            return this._data.triggers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStream.prototype, \"getNativeBalances\", {\r\n        get: function () {\r\n            return this._data.getNativeBalances;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmStream.parse = function (data) {\r\n        var _a, _b, _c, _d, _e;\r\n        return __assign(__assign({}, data), { chains: data.chainIds.map(function (chainId) { return commonEvmUtils.EvmChain.create(chainId); }), topic0: commonCore.maybe(data.topic0), allAddresses: (_a = data.allAddresses) !== null && _a !== void 0 ? _a : false, includeContractLogs: (_b = data.includeContractLogs) !== null && _b !== void 0 ? _b : false, includeInternalTxs: (_c = data.includeInternalTxs) !== null && _c !== void 0 ? _c : false, includeAllTxLogs: (_d = data.includeAllTxLogs) !== null && _d !== void 0 ? _d : false, includeNativeTxs: (_e = data.includeNativeTxs) !== null && _e !== void 0 ? _e : false, advancedOptions: commonCore.maybe(data.advancedOptions), abi: commonCore.maybe(data.abi), triggers: commonCore.maybe(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTrigger.create(trigger); }); }), getNativeBalances: commonCore.maybe(data.getNativeBalances) });\r\n    };\r\n    return EvmStream;\r\n}());\n\nvar EvmStreamResultFormatter = /** @class */ (function () {\r\n    function EvmStreamResultFormatter() {\r\n    }\r\n    EvmStreamResultFormatter.toJSON = function (data) {\r\n        return __assign(__assign({}, data), { erc20Transfers: data.erc20Transfers.map(function (value) { return value.toJSON(); }), erc20Approvals: data.erc20Approvals.map(function (value) { return value.toJSON(); }), nftTransfers: data.nftTransfers.map(function (value) { return value.toJSON(); }), nftApprovals: {\r\n                ERC721: data.nftApprovals.ERC721.map(function (value) { return value.toJSON(); }),\r\n                ERC1155: data.nftApprovals.ERC1155.map(function (value) { return value.toJSON(); }),\r\n            }, ntfTokenApprovals: data.ntfTokenApprovals.map(function (value) { return value.toJSON(); }), chain: data.chain.toJSON(), block: data.block.toJSON(), logs: data.logs.map(function (value) { return value.toJSON(); }), txs: data.txs.map(function (value) { return value.toJSON(); }), txsInternal: data.txsInternal.map(function (value) { return value.toJSON(); }), abi: data.abi, nativeBalances: data.nativeBalances.map(function (nativeBalance) { return nativeBalance.toJSON(); }) });\r\n    };\r\n    return EvmStreamResultFormatter;\r\n}());\n\n/**\r\n * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar StreamTriggerOutput = /** @class */ (function () {\r\n    function StreamTriggerOutput(data) {\r\n        this._data = StreamTriggerOutput.parse(data);\r\n    }\r\n    StreamTriggerOutput.create = function (data) {\r\n        if (data instanceof StreamTriggerOutput) {\r\n            return data;\r\n        }\r\n        return new StreamTriggerOutput(data);\r\n    };\r\n    /**\r\n     * Compares two StreamTriggerOutput data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamTriggerOutputish data to compare\r\n     * @param valueB - the second StreamTriggerOutputish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamTriggerOutput.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    StreamTriggerOutput.equals = function (valueA, valueB) {\r\n        var streamTriggerOutputA = StreamTriggerOutput.create(valueA);\r\n        var streamTriggerOutputB = StreamTriggerOutput.create(valueB);\r\n        return (streamTriggerOutputA.name === streamTriggerOutputB.name &&\r\n            streamTriggerOutputA.value === streamTriggerOutputB.value);\r\n    };\r\n    /**\r\n     * Compares two StreamTriggerOutput arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.\r\n     * @param valueA - the first StreamTriggerOutputish[] data to compare\r\n     * @param valueB - the second StreamTriggerOutputish[] data to compare\r\n     * @returns true if all values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamTriggerOutput.arrayEquals(valueA, valueB);\r\n     * ```\r\n     */\r\n    StreamTriggerOutput.arrayEquals = function (valueA, valueB) {\r\n        if (valueA.length !== valueB.length) {\r\n            return false;\r\n        }\r\n        var triggerOutputsA = valueA.map(function (triggerOutput) { return StreamTriggerOutput.create(triggerOutput); });\r\n        var triggerOutputsB = valueB.map(function (triggerOutput) { return StreamTriggerOutput.create(triggerOutput); });\r\n        triggerOutputsA.sort(function (a, b) { return (b.name > a.name ? 1 : -1); });\r\n        triggerOutputsB.sort(function (a, b) { return (b.name > a.name ? 1 : -1); });\r\n        for (var i = 0; i < (triggerOutputsA === null || triggerOutputsA === void 0 ? void 0 : triggerOutputsA.length); i++) {\r\n            if (!triggerOutputsA[i].equals(triggerOutputsB[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamTriggerOutputish data to this StreamTriggerOutput instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * streamTriggerOutput.equals(value);\r\n     * ```\r\n     */\r\n    StreamTriggerOutput.prototype.equals = function (value) {\r\n        return StreamTriggerOutput.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamTriggerOutput instance to a JSON object.\r\n     * @returns JSON object of the StreamTriggerOutput instance\r\n     * @example `streamTriggerOutput.toJSON()`\r\n     */\r\n    StreamTriggerOutput.prototype.toJSON = function () {\r\n        var data = __rest(this._data, []);\r\n        return __assign({}, data);\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamTriggerOutput.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamTriggerOutput.prototype, \"name\", {\r\n        get: function () {\r\n            return this._data.name;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamTriggerOutput.prototype, \"value\", {\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StreamTriggerOutput.parse = function (data) {\r\n        return __assign({}, data);\r\n    };\r\n    return StreamTriggerOutput;\r\n}());\n\n/**\r\n * The StreamErc1155Approval class is a representation of a nft approval (ERC1155) that is returned by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar StreamErc1155Approval = /** @class */ (function () {\r\n    function StreamErc1155Approval(data) {\r\n        this._data = StreamErc1155Approval.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of StreamErc1155Approval\r\n     *\r\n     * @param data - the StreamErc1155Approvalish type\r\n     * @example\r\n     * ```ts\r\n     * const evmNftApproval = StreamErc1155Approval.create(data);\r\n     * ```\r\n     * @returns an instance of StreamErc1155Approval\r\n     */\r\n    StreamErc1155Approval.create = function (data) {\r\n        if (data instanceof StreamErc1155Approval) {\r\n            return data;\r\n        }\r\n        return new StreamErc1155Approval(data);\r\n    };\r\n    /**\r\n     * Compares two StreamErc1155Approval data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamErc1155Approvalish data to compare\r\n     * @param valueB - the second StreamErc1155Approvalish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamErc1155Approval.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    StreamErc1155Approval.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var evmNftApprovalA = StreamErc1155Approval.create(valueA);\r\n        var evmNftApprovalB = StreamErc1155Approval.create(valueB);\r\n        if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {\r\n            return false;\r\n        }\r\n        if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {\r\n            return false;\r\n        }\r\n        if (!evmNftApprovalA.account.equals(evmNftApprovalB.account)) {\r\n            return false;\r\n        }\r\n        if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {\r\n            return false;\r\n        }\r\n        if (!evmNftApprovalA.operator.equals(evmNftApprovalB.operator)) {\r\n            return false;\r\n        }\r\n        if (evmNftApprovalA.approved !== evmNftApprovalB.approved) {\r\n            return false;\r\n        }\r\n        if (((_a = evmNftApprovalA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\r\n            !StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamErc1155Approvalish data to this StreamErc1155Approval instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * evmNftApproval.equals(value);\r\n     * ```\r\n     */\r\n    StreamErc1155Approval.prototype.equals = function (value) {\r\n        return StreamErc1155Approval.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamErc1155Approval instance to a JSON object.\r\n     * @returns JSON object of the StreamErc1155Approval instance\r\n     * @example `evmNftApproval.toJSON()`\r\n     */\r\n    StreamErc1155Approval.prototype.toJSON = function () {\r\n        var _a;\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), contract: data.contract.toJSON(), account: data.account.toJSON(), operator: data.operator.toJSON(), triggers: (_a = data.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return trigger.format(); }) });\r\n    };\r\n    /**\r\n     * Converts the StreamErc1155Approval instance to a JSON object.\r\n     * @returns JSON object of the StreamErc1155Approval instance\r\n     * @example `evmNftApproval.format()`\r\n     */\r\n    StreamErc1155Approval.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"approved\", {\r\n        get: function () {\r\n            return this._data.approved;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"transactionHash\", {\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"contract\", {\r\n        get: function () {\r\n            return this._data.contract;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"logIndex\", {\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"account\", {\r\n        get: function () {\r\n            return this._data.account;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"operator\", {\r\n        get: function () {\r\n            return this._data.operator;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"tokenContractType\", {\r\n        get: function () {\r\n            return this._data.tokenContractType;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"tokenName\", {\r\n        get: function () {\r\n            return this._data.tokenName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"tokenSymbol\", {\r\n        get: function () {\r\n            return this._data.tokenSymbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc1155Approval.prototype, \"triggers\", {\r\n        get: function () {\r\n            return this._data.triggers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StreamErc1155Approval.parse = function (data) {\r\n        var chain = commonEvmUtils.EvmChain.create(data.chain);\r\n        return __assign(__assign({}, data), { chain: chain, logIndex: +data.logIndex, account: commonEvmUtils.EvmAddress.create(data.account), operator: commonEvmUtils.EvmAddress.create(data.operator), contract: commonEvmUtils.EvmAddress.create(data.contract), tokenContractType: data.tokenContractType, triggers: commonCore.maybe(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput.create(trigger); }); }) });\r\n    };\r\n    return StreamErc1155Approval;\r\n}());\n\n/**\r\n * The StreamErc20Transfer class is a representation of a erc20 approval that is returned by the Moralis Stream API\r\n *\r\n * @category DataTypexw\r\n */\r\nvar StreamErc20Approval = /** @class */ (function () {\r\n    function StreamErc20Approval(data) {\r\n        this._data = StreamErc20Approval.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of StreamErc20Approval\r\n     *\r\n     * @param data - the StreamErc20Approvalish type\r\n     * @example\r\n     * ```ts\r\n     * const erc20Approval = StreamErc20Approval.create(data);\r\n     * ```\r\n     * @returns an instance of StreamErc20Approval\r\n     */\r\n    StreamErc20Approval.create = function (data) {\r\n        if (data instanceof StreamErc20Approval) {\r\n            return data;\r\n        }\r\n        return new StreamErc20Approval(data);\r\n    };\r\n    /**\r\n     * Compares two StreamErc20Approval data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamErc20Approvalish data to compare\r\n     * @param valueB - the second StreamErc20Approvalish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamErc20Approval.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    StreamErc20Approval.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var erc20ApprovalA = StreamErc20Approval.create(valueA);\r\n        var erc20ApprovalB = StreamErc20Approval.create(valueB);\r\n        if (!erc20ApprovalA.chain.equals(erc20ApprovalB.chain)) {\r\n            return false;\r\n        }\r\n        if (erc20ApprovalA.transactionHash !== erc20ApprovalB.transactionHash) {\r\n            return false;\r\n        }\r\n        if (erc20ApprovalA.logIndex !== erc20ApprovalB.logIndex) {\r\n            return false;\r\n        }\r\n        if (((_a = erc20ApprovalA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = erc20ApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\r\n            !StreamTriggerOutput.arrayEquals(erc20ApprovalA.triggers || [], erc20ApprovalB.triggers || [])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamErc20Approvalish data to this StreamErc20Approval instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * erc20Approval.equals(value);\r\n     * ```\r\n     */\r\n    StreamErc20Approval.prototype.equals = function (value) {\r\n        return StreamErc20Approval.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamErc20Approval instance to a JSON object.\r\n     * @returns JSON object of the StreamErc20Approval instance\r\n     * @example `erc20Approval.toJSON()`\r\n     */\r\n    StreamErc20Approval.prototype.toJSON = function () {\r\n        var _a = this._data, chain = _a.chain, owner = _a.owner, spender = _a.spender, contract = _a.contract, value = _a.value, triggers = _a.triggers, data = __rest(_a, [\"chain\", \"owner\", \"spender\", \"contract\", \"value\", \"triggers\"]);\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        return __assign(__assign({}, data), { chain: chain.toJSON(), owner: owner.toJSON(), spender: spender.toJSON(), contract: contract.toJSON(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamErc20Approval.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"transactionHash\", {\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"logIndex\", {\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"owner\", {\r\n        get: function () {\r\n            return this._data.owner;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"spender\", {\r\n        get: function () {\r\n            return this._data.spender;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"value\", {\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"contract\", {\r\n        get: function () {\r\n            return this._data.contract;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"tokenName\", {\r\n        get: function () {\r\n            return this._data.tokenName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"tokenSymbol\", {\r\n        get: function () {\r\n            return this._data.tokenSymbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"tokenDecimals\", {\r\n        get: function () {\r\n            return this._data.tokenDecimals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"valueWithDecimals\", {\r\n        get: function () {\r\n            return this._data.valueWithDecimals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Approval.prototype, \"triggers\", {\r\n        get: function () {\r\n            return this._data.triggers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StreamErc20Approval.parse = function (data) {\r\n        var chain = commonEvmUtils.EvmChain.create(data.chain);\r\n        return __assign(__assign({}, data), { chain: chain, spender: commonEvmUtils.EvmAddress.create(data.spender), owner: commonEvmUtils.EvmAddress.create(data.owner), logIndex: +data.logIndex, contract: commonEvmUtils.EvmAddress.create(data.contract), value: commonCore.BigNumber.create(data.value), valueWithDecimals: commonCore.maybe(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === '' ? undefined : +data.tokenDecimals, triggers: commonCore.maybe(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput.create(trigger); }); }) });\r\n    };\r\n    return StreamErc20Approval;\r\n}());\n\n/**\r\n * The StreamErc20Transfer class is a representation of a erc20 transfer that is returned by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar StreamErc20Transfer = /** @class */ (function () {\r\n    function StreamErc20Transfer(data) {\r\n        this._data = StreamErc20Transfer.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of StreamErc20Transfer\r\n     *\r\n     * @param data - the StreamErc20Transferish type\r\n     * @example\r\n     * ```ts\r\n     * const erc20Transfer = StreamErc20Transfer.create(data);\r\n     * ```\r\n     * @returns an instance of StreamErc20Transfer\r\n     */\r\n    StreamErc20Transfer.create = function (data) {\r\n        if (data instanceof StreamErc20Transfer) {\r\n            return data;\r\n        }\r\n        return new StreamErc20Transfer(data);\r\n    };\r\n    /**\r\n     * Compares two StreamErc20Transfer data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamErc20Transferish data to compare\r\n     * @param valueB - the second StreamErc20Transferish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamErc20Transfer.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    StreamErc20Transfer.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var erc20TransferA = StreamErc20Transfer.create(valueA);\r\n        var erc20TransferB = StreamErc20Transfer.create(valueB);\r\n        if (!erc20TransferA.chain.equals(erc20TransferB.chain)) {\r\n            return false;\r\n        }\r\n        if (erc20TransferA.transactionHash !== erc20TransferB.transactionHash) {\r\n            return false;\r\n        }\r\n        if (erc20TransferA.logIndex !== erc20TransferB.logIndex) {\r\n            return false;\r\n        }\r\n        if (((_a = erc20TransferA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = erc20TransferB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\r\n            !StreamTriggerOutput.arrayEquals(erc20TransferA.triggers || [], erc20TransferB.triggers || [])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamErc20Transferish data to this StreamErc20Transfer instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * erc20Transfer.equals(value);\r\n     * ```\r\n     */\r\n    StreamErc20Transfer.prototype.equals = function (value) {\r\n        return StreamErc20Transfer.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamErc20Transfer instance to a JSON object.\r\n     * @returns JSON object of the StreamErc20Transfer instance\r\n     * @example `erc20Transfer.toJSON()`\r\n     */\r\n    StreamErc20Transfer.prototype.toJSON = function () {\r\n        var _a = this._data, chain = _a.chain, from = _a.from, to = _a.to, contract = _a.contract, value = _a.value, triggers = _a.triggers, data = __rest(_a, [\"chain\", \"from\", \"to\", \"contract\", \"value\", \"triggers\"]);\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        return __assign(__assign({}, data), { chain: chain.toJSON(), from: from.toJSON(), to: to.toJSON(), contract: contract.toJSON(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamErc20Transfer.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"transactionHash\", {\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"logIndex\", {\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"from\", {\r\n        get: function () {\r\n            return this._data.from;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"to\", {\r\n        get: function () {\r\n            return this._data.to;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"value\", {\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"contract\", {\r\n        get: function () {\r\n            return this._data.contract;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"tokenName\", {\r\n        get: function () {\r\n            return this._data.tokenName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"tokenSymbol\", {\r\n        get: function () {\r\n            return this._data.tokenSymbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"tokenDecimals\", {\r\n        get: function () {\r\n            return this._data.tokenDecimals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"valueWithDecimals\", {\r\n        get: function () {\r\n            return this._data.valueWithDecimals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc20Transfer.prototype, \"triggers\", {\r\n        get: function () {\r\n            return this._data.triggers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StreamErc20Transfer.parse = function (data) {\r\n        var chain = commonEvmUtils.EvmChain.create(data.chain);\r\n        return __assign(__assign({}, data), { chain: chain, from: commonEvmUtils.EvmAddress.create(data.from), to: commonEvmUtils.EvmAddress.create(data.to), logIndex: +data.logIndex, contract: commonEvmUtils.EvmAddress.create(data.contract), value: commonCore.BigNumber.create(data.value), valueWithDecimals: commonCore.maybe(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === '' ? undefined : +data.tokenDecimals, triggers: commonCore.maybe(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput.create(trigger); }); }) });\r\n    };\r\n    return StreamErc20Transfer;\r\n}());\n\n/**\r\n * The StreamErc1155Approval class is a representation of a nft approval (ERC721) that is returned by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar StreamErc721Approval = /** @class */ (function () {\r\n    function StreamErc721Approval(data) {\r\n        this._data = StreamErc721Approval.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of StreamErc721Approval\r\n     *\r\n     * @param data - the StreamErc721Approvalish type\r\n     * @example\r\n     * ```ts\r\n     * const evmNftApproval = StreamErc721Approval.create(data);\r\n     * ```\r\n     * @returns an instance of StreamErc721Approval\r\n     */\r\n    StreamErc721Approval.create = function (data) {\r\n        if (data instanceof StreamErc721Approval) {\r\n            return data;\r\n        }\r\n        return new StreamErc721Approval(data);\r\n    };\r\n    /**\r\n     * Compares two StreamErc721Approval data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamErc721Approvalish data to compare\r\n     * @param valueB - the second StreamErc721Approvalish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamErc721Approval.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    StreamErc721Approval.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var evmNftApprovalA = StreamErc721Approval.create(valueA);\r\n        var evmNftApprovalB = StreamErc721Approval.create(valueB);\r\n        if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {\r\n            return false;\r\n        }\r\n        if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {\r\n            return false;\r\n        }\r\n        if (!evmNftApprovalA.owner.equals(evmNftApprovalB.owner)) {\r\n            return false;\r\n        }\r\n        if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {\r\n            return false;\r\n        }\r\n        if (evmNftApprovalA.tokenId !== evmNftApprovalB.tokenId) {\r\n            return false;\r\n        }\r\n        if (!evmNftApprovalA.approved.equals(evmNftApprovalB.approved)) {\r\n            return false;\r\n        }\r\n        if (((_a = evmNftApprovalA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\r\n            !StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamErc721Approvalish data to this StreamErc721Approval instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * evmNftApproval.equals(value);\r\n     * ```\r\n     */\r\n    StreamErc721Approval.prototype.equals = function (value) {\r\n        return StreamErc721Approval.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamErc721Approval instance to a JSON object.\r\n     * @returns JSON object of the StreamErc721Approval instance\r\n     * @example `evmNftApproval.toJSON()`\r\n     */\r\n    StreamErc721Approval.prototype.toJSON = function () {\r\n        var _a;\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), contract: data.contract.toJSON(), owner: data.owner.toJSON(), approved: data.approved.toJSON(), triggers: (_a = data.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return trigger.format(); }) });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamErc721Approval.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"approved\", {\r\n        get: function () {\r\n            return this._data.approved;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"owner\", {\r\n        get: function () {\r\n            return this._data.owner;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"transactionHash\", {\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"contract\", {\r\n        get: function () {\r\n            return this._data.contract;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"logIndex\", {\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"tokenId\", {\r\n        get: function () {\r\n            return this._data.tokenId;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"tokenContractType\", {\r\n        get: function () {\r\n            return this._data.tokenContractType;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"tokenName\", {\r\n        get: function () {\r\n            return this._data.tokenName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"tokenSymbol\", {\r\n        get: function () {\r\n            return this._data.tokenSymbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamErc721Approval.prototype, \"triggers\", {\r\n        get: function () {\r\n            return this._data.triggers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StreamErc721Approval.parse = function (data) {\r\n        var chain = commonEvmUtils.EvmChain.create(data.chain);\r\n        return __assign(__assign({}, data), { chain: chain, logIndex: +data.logIndex, owner: commonEvmUtils.EvmAddress.create(data.owner), contract: commonEvmUtils.EvmAddress.create(data.contract), tokenContractType: data.tokenContractType, approved: commonEvmUtils.EvmAddress.create(data.approved), triggers: commonCore.maybe(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput.create(trigger); }); }) });\r\n    };\r\n    return StreamErc721Approval;\r\n}());\n\n/**\r\n * The StreamEvmInternalTransaction class is a representation of an internal transaction that is returned by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar StreamEvmInternalTransaction = /** @class */ (function () {\r\n    function StreamEvmInternalTransaction(data) {\r\n        this._data = StreamEvmInternalTransaction.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of StreamEvmInternalTransactionish\r\n     *\r\n     * @param data - the StreamEvmInternalTransactionishish type\r\n     * @example\r\n     * ```ts\r\n     * const transaction = StreamEvmTransactionish.create(data);\r\n     * ```\r\n     * @returns an instance of StreamEvmInternalTransaction\r\n     */\r\n    StreamEvmInternalTransaction.create = function (data) {\r\n        if (data instanceof StreamEvmInternalTransaction) {\r\n            return data;\r\n        }\r\n        return new StreamEvmInternalTransaction(data);\r\n    };\r\n    /**\r\n     * Compares two StreamEvmInternalTransaction data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamEvmInternalTransactionish data to compare\r\n     * @param valueB - the second StreamEvmInternalTransactionish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamEvmInternalTransaction.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    StreamEvmInternalTransaction.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var evmInternalTransactionA = StreamEvmInternalTransaction.create(valueA);\r\n        var evmInternalTransactionB = StreamEvmInternalTransaction.create(valueB);\r\n        if (!evmInternalTransactionA.chain.equals(evmInternalTransactionB.chain)) {\r\n            return false;\r\n        }\r\n        if (evmInternalTransactionA.transactionHash !== evmInternalTransactionB.transactionHash) {\r\n            return false;\r\n        }\r\n        if (((_a = evmInternalTransactionA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmInternalTransactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\r\n            !StreamTriggerOutput.arrayEquals(evmInternalTransactionA.triggers || [], evmInternalTransactionB.triggers || [])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamEvmInternalTransactionish data to this StreamEvmInternalTransaction instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * evmInternalTransaction.equals(value);\r\n     * ```\r\n     */\r\n    StreamEvmInternalTransaction.prototype.equals = function (value) {\r\n        return StreamEvmInternalTransaction.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamEvmInternalTransaction instance to a JSON object.\r\n     * @returns JSON object of the StreamEvmInternalTransaction instance\r\n     * @example `evmInternalTransaction.toJSON()`\r\n     */\r\n    StreamEvmInternalTransaction.prototype.toJSON = function () {\r\n        var _a, _b, _c, _d, _e;\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), from: (_a = data.from) === null || _a === void 0 ? void 0 : _a.toJSON(), to: (_b = data.to) === null || _b === void 0 ? void 0 : _b.toJSON(), value: (_c = data.value) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), triggers: (_e = data.triggers) === null || _e === void 0 ? void 0 : _e.map(function (trigger) { return trigger.format(); }) });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamEvmInternalTransaction.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamEvmInternalTransaction.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmInternalTransaction.prototype, \"from\", {\r\n        get: function () {\r\n            return this._data.from;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmInternalTransaction.prototype, \"to\", {\r\n        get: function () {\r\n            return this._data.to;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmInternalTransaction.prototype, \"value\", {\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmInternalTransaction.prototype, \"transactionHash\", {\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmInternalTransaction.prototype, \"gas\", {\r\n        get: function () {\r\n            return this._data.gas;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmInternalTransaction.prototype, \"triggers\", {\r\n        get: function () {\r\n            return this._data.triggers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StreamEvmInternalTransaction.parse = function (data) { return (__assign(__assign({}, data), { chain: commonEvmUtils.EvmChain.create(data.chain), from: commonCore.maybe(data.from, function (value) { return commonEvmUtils.EvmAddress.create(value); }), to: commonCore.maybe(data.to, function (value) { return commonEvmUtils.EvmAddress.create(value); }), value: commonCore.maybe(data.value, function (value) { return commonCore.BigNumber.create(value); }), gas: commonCore.maybe(data.gas, function (value) { return commonCore.BigNumber.create(value); }), triggers: commonCore.maybe(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput.create(trigger); }); }) })); };\r\n    return StreamEvmInternalTransaction;\r\n}());\n\n/**\r\n * The StreamEvmNftTransfer class is a representation of a nft transfer (EREC721 or ERC1155) that is returned by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar StreamEvmNftTransfer = /** @class */ (function () {\r\n    function StreamEvmNftTransfer(data) {\r\n        this._data = StreamEvmNftTransfer.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of StreamEvmNftTransferish\r\n     *\r\n     * @param data - the StreamEvmNftTransferishish type\r\n     * @example\r\n     * ```ts\r\n     * const transfer = StreamEvmTransactionish.create(data);\r\n     * ```\r\n     * @returns an instance of StreamEvmNftTransfer\r\n     */\r\n    StreamEvmNftTransfer.create = function (data) {\r\n        if (data instanceof StreamEvmNftTransfer) {\r\n            return data;\r\n        }\r\n        return new StreamEvmNftTransfer(data);\r\n    };\r\n    StreamEvmNftTransfer.parse = function (data) {\r\n        return __assign(__assign({}, data), { chain: commonEvmUtils.EvmChain.create(data.chain), to: commonEvmUtils.EvmAddress.create(data.to), contract: commonEvmUtils.EvmAddress.create(data.contract), from: commonEvmUtils.EvmAddress.create(data.from), logIndex: +data.logIndex, operator: commonCore.maybe(data.operator, function (operator) { return commonEvmUtils.EvmAddress.create(operator); }), tokenId: data.tokenId, transactionHash: data.transactionHash, amount: +data.amount, tokenName: data.tokenName, triggers: commonCore.maybe(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput.create(trigger); }); }) });\r\n    };\r\n    /**\r\n     * Compares two StreamEvmNftTransfer data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamEvmNftTransferish data to compare\r\n     * @param valueB - the second StreamEvmNftTransferish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamEvmNftTransfer.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    StreamEvmNftTransfer.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var transferA = StreamEvmNftTransfer.create(valueA);\r\n        var transferB = StreamEvmNftTransfer.create(valueB);\r\n        if (!transferA.chain.equals(transferB.chain)) {\r\n            return false;\r\n        }\r\n        if (transferA.transactionHash !== transferB.transactionHash) {\r\n            return false;\r\n        }\r\n        if (transferA.logIndex !== transferB.logIndex) {\r\n            return false;\r\n        }\r\n        if (!transferA.contract.equals(transferB.contract)) {\r\n            return false;\r\n        }\r\n        if (transferA.tokenId !== transferB.tokenId) {\r\n            return false;\r\n        }\r\n        if (((_a = transferA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transferB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\r\n            !StreamTriggerOutput.arrayEquals(transferA.triggers || [], transferB.triggers || [])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamEvmNftTransferish data to this StreamEvmNftTransfer instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * transfer.equals(value);\r\n     * ```\r\n     */\r\n    StreamEvmNftTransfer.prototype.equals = function (value) {\r\n        return StreamEvmNftTransfer.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamEvmNftTransfer instance to a JSON object.\r\n     * @returns JSON object of the StreamEvmNftTransfer instance\r\n     * @example `transfer.toJSON()`\r\n     */\r\n    StreamEvmNftTransfer.prototype.toJSON = function () {\r\n        var _a, _b;\r\n        var data = this._data;\r\n        return __assign(__assign({}, data), { chain: data.chain.toJSON(), from: data.from.toJSON(), to: data.to.toJSON(), contract: data.contract.toJSON(), operator: (_a = data.operator) === null || _a === void 0 ? void 0 : _a.toJSON(), triggers: (_b = data.triggers) === null || _b === void 0 ? void 0 : _b.map(function (trigger) { return trigger.format(); }) });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamEvmNftTransfer.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"transactionHash\", {\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"from\", {\r\n        get: function () {\r\n            return this._data.from;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"to\", {\r\n        get: function () {\r\n            return this._data.to;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"contract\", {\r\n        get: function () {\r\n            return this._data.contract;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"logIndex\", {\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenId\", {\r\n        get: function () {\r\n            return this._data.tokenId;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"amount\", {\r\n        get: function () {\r\n            return this._data.amount;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenContractType\", {\r\n        get: function () {\r\n            return this._data.tokenContractType;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenName\", {\r\n        get: function () {\r\n            return this._data.tokenName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenSymbol\", {\r\n        get: function () {\r\n            return this._data.tokenSymbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"operator\", {\r\n        get: function () {\r\n            return this._data.operator;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTransfer.prototype, \"triggers\", {\r\n        get: function () {\r\n            return this._data.triggers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return StreamEvmNftTransfer;\r\n}());\n\n/**\r\n * The StreamEvmTransaction class is a representation of a transaction that is returned by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar StreamEvmTransaction = /** @class */ (function () {\r\n    function StreamEvmTransaction(_a) {\r\n        var data = __rest(_a, []);\r\n        this._data = StreamEvmTransaction.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of StreamEvmTransactionish\r\n     *\r\n     * @param data - the StreamEvmTransactionishish type\r\n     * @example\r\n     * ```ts\r\n     * const transaction = StreamEvmTransactionish.create(data);\r\n     * ```\r\n     * @returns an instance of StreamEvmTransaction\r\n     */\r\n    StreamEvmTransaction.create = function (data) {\r\n        if (data instanceof StreamEvmTransaction) {\r\n            return data;\r\n        }\r\n        return new StreamEvmTransaction(data);\r\n    };\r\n    StreamEvmTransaction.parse = function (data) {\r\n        var signature = data.r != null && data.s != null && data.v != null\r\n            ? commonEvmUtils.EvmSignature.create({ r: data.r, s: data.s, v: data.v })\r\n            : undefined;\r\n        return __assign(__assign({}, data), { chain: commonEvmUtils.EvmChain.create(data.chain), gas: commonCore.maybe(data.gas, commonCore.BigNumber.create), gasPrice: commonCore.maybe(data.gasPrice, commonCore.BigNumber.create), nonce: commonCore.maybe(data.nonce, commonCore.BigNumber.create), input: commonCore.maybe(data.input), fromAddress: commonEvmUtils.EvmAddress.create(data.fromAddress), toAddress: commonCore.maybe(data.toAddress, function (address) { return commonEvmUtils.EvmAddress.create(address); }), value: commonCore.maybe(data.value, commonCore.BigNumber.create), type: commonCore.maybe(data.type, function (type) { return +type; }), receiptCumulativeGasUsed: commonCore.maybe(data.receiptCumulativeGasUsed, commonCore.BigNumber.create), receiptGasUsed: commonCore.maybe(data.receiptGasUsed, commonCore.BigNumber.create), receiptContractAddress: commonCore.maybe(data.receiptContractAddress, function (address) { return commonEvmUtils.EvmAddress.create(address); }), receiptRoot: commonCore.maybe(data.receiptRoot), receiptStatus: commonCore.maybe(data.receiptStatus, function (status) { return +status; }), signature: signature, transactionIndex: +data.transactionIndex, triggers: commonCore.maybe(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput.create(trigger); }); }) });\r\n    };\r\n    /**\r\n     * Compares two StreamEvmTransaction data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamEvmTransactionish data to compare\r\n     * @param valueB - the second StreamEvmTransactionish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamEvmTransaction.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    StreamEvmTransaction.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var transactionA = StreamEvmTransaction.create(valueA);\r\n        var transactionB = StreamEvmTransaction.create(valueB);\r\n        if (!transactionA.chain.equals(transactionB.chain)) {\r\n            return false;\r\n        }\r\n        if (transactionA.hash !== transactionB.hash) {\r\n            return false;\r\n        }\r\n        if (((_a = transactionA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\r\n            !StreamTriggerOutput.arrayEquals(transactionA.triggers || [], transactionB.triggers || [])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamEvmTransactionish data to this StreamEvmTransaction instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * transaction.equals(value);\r\n     * ```\r\n     */\r\n    StreamEvmTransaction.prototype.equals = function (value) {\r\n        return StreamEvmTransaction.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamEvmTransaction instance to a JSON object.\r\n     * @returns JSON object of the StreamEvmTransaction instance\r\n     * @example `transaction.toJSON()`\r\n     */\r\n    StreamEvmTransaction.prototype.toJSON = function () {\r\n        var _a = this._data, chain = _a.chain, gas = _a.gas, gasPrice = _a.gasPrice, nonce = _a.nonce, fromAddress = _a.fromAddress, toAddress = _a.toAddress, value = _a.value, receiptContractAddress = _a.receiptContractAddress, receiptCumulativeGasUsed = _a.receiptCumulativeGasUsed, receiptGasUsed = _a.receiptGasUsed, signature = _a.signature, triggers = _a.triggers, data = __rest(_a, [\"chain\", \"gas\", \"gasPrice\", \"nonce\", \"fromAddress\", \"toAddress\", \"value\", \"receiptContractAddress\", \"receiptCumulativeGasUsed\", \"receiptGasUsed\", \"signature\", \"triggers\"]);\r\n        return __assign(__assign({}, data), { chain: chain.toJSON(), gas: gas === null || gas === void 0 ? void 0 : gas.toString(), gasPrice: gasPrice === null || gasPrice === void 0 ? void 0 : gasPrice.toString(), nonce: nonce === null || nonce === void 0 ? void 0 : nonce.toString(), fromAddress: fromAddress.toJSON(), toAddress: toAddress === null || toAddress === void 0 ? void 0 : toAddress.toJSON(), value: value === null || value === void 0 ? void 0 : value.toString(), receiptCumulativeGasUsed: receiptCumulativeGasUsed === null || receiptCumulativeGasUsed === void 0 ? void 0 : receiptCumulativeGasUsed.toString(), receiptGasUsed: receiptGasUsed === null || receiptGasUsed === void 0 ? void 0 : receiptGasUsed.toString(), receiptContractAddress: receiptContractAddress === null || receiptContractAddress === void 0 ? void 0 : receiptContractAddress.toJSON(), r: signature === null || signature === void 0 ? void 0 : signature.r, s: signature === null || signature === void 0 ? void 0 : signature.s, v: signature === null || signature === void 0 ? void 0 : signature.v, triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamEvmTransaction.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"input\", {\r\n        get: function () {\r\n            return this._data.input;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"transactionIndex\", {\r\n        get: function () {\r\n            return this._data.transactionIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"fromAddress\", {\r\n        get: function () {\r\n            return this._data.fromAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"toAddress\", {\r\n        get: function () {\r\n            return this._data.toAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"receiptGasUsed\", {\r\n        get: function () {\r\n            return this._data.receiptGasUsed;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"receiptCumulativeGasUsed\", {\r\n        get: function () {\r\n            return this._data.receiptCumulativeGasUsed;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"receiptContractAddress\", {\r\n        get: function () {\r\n            return this._data.receiptContractAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"signature\", {\r\n        get: function () {\r\n            return this._data.signature;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"r\", {\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this.signature) === null || _a === void 0 ? void 0 : _a.r;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"s\", {\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this.signature) === null || _a === void 0 ? void 0 : _a.s;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"v\", {\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this.signature) === null || _a === void 0 ? void 0 : _a.v;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"hash\", {\r\n        get: function () {\r\n            return this._data.hash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"gas\", {\r\n        get: function () {\r\n            return this._data.gas;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"gasPrice\", {\r\n        get: function () {\r\n            return this._data.gasPrice;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"nonce\", {\r\n        get: function () {\r\n            return this._data.nonce;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"value\", {\r\n        get: function () {\r\n            return this._data.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"type\", {\r\n        get: function () {\r\n            return this._data.type;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"receiptRoot\", {\r\n        get: function () {\r\n            return this._data.receiptRoot;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"receiptStatus\", {\r\n        get: function () {\r\n            return this._data.receiptStatus;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransaction.prototype, \"triggers\", {\r\n        get: function () {\r\n            return this._data.triggers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return StreamEvmTransaction;\r\n}());\n\n/**\r\n * The StreamEvmTransactionLog class is a representation of a transaction log that is returned by the Moralis Stream API\r\n *\r\n * @category DataType\r\n */\r\nvar StreamEvmTransactionLog = /** @class */ (function () {\r\n    function StreamEvmTransactionLog(_a) {\r\n        var data = __rest(_a, []);\r\n        this._data = StreamEvmTransactionLog.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of StreamEvmTransactionLog\r\n     *\r\n     * @param data - the StreamEvmTransactionLogish type\r\n     * @example\r\n     * ```ts\r\n     * const transactionLog = StreamEvmTransactionLog.create(data);\r\n     * ```\r\n     * @returns an instance of StreamEvmTransactionLog\r\n     */\r\n    StreamEvmTransactionLog.create = function (data) {\r\n        if (data instanceof StreamEvmTransactionLog) {\r\n            return data;\r\n        }\r\n        return new StreamEvmTransactionLog(data);\r\n    };\r\n    StreamEvmTransactionLog.parse = function (data) {\r\n        return __assign(__assign({}, data), { chain: commonEvmUtils.EvmChain.create(data.chain), logIndex: +data.logIndex, address: commonEvmUtils.EvmAddress.create(data.address), topic0: commonCore.maybe(data.topic0), topic1: commonCore.maybe(data.topic1), topic2: commonCore.maybe(data.topic2), topic3: commonCore.maybe(data.topic3), triggers: commonCore.maybe(data.triggers, function (triggers) { return triggers.map(function (trigger) { return StreamTriggerOutput.create(trigger); }); }) });\r\n    };\r\n    /**\r\n     * Compares two StreamEvmTransactionLog data. It checks a deep equality check of both values.\r\n     * @param valueA - the first StreamEvmTransactionLogish data to compare\r\n     * @param valueB - the second StreamEvmTransactionLogish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  StreamEvmTransactionLog.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    StreamEvmTransactionLog.equals = function (valueA, valueB) {\r\n        var _a, _b;\r\n        var transactionLogA = StreamEvmTransactionLog.create(valueA);\r\n        var transactionLogB = StreamEvmTransactionLog.create(valueB);\r\n        if (!transactionLogA.chain.equals(transactionLogB.chain)) {\r\n            return false;\r\n        }\r\n        if (transactionLogA.transactionHash !== transactionLogB.transactionHash) {\r\n            return false;\r\n        }\r\n        if (transactionLogA.logIndex !== transactionLogB.logIndex) {\r\n            return false;\r\n        }\r\n        if (((_a = transactionLogA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transactionLogB.triggers) === null || _b === void 0 ? void 0 : _b.length) ||\r\n            !StreamTriggerOutput.arrayEquals(transactionLogA.triggers || [], transactionLogB.triggers || [])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an StreamEvmTransactionLogish data to this StreamEvmTransactionLog instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * transactionLog.equals(value);\r\n     * ```\r\n     */\r\n    StreamEvmTransactionLog.prototype.equals = function (value) {\r\n        return StreamEvmTransactionLog.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the StreamEvmTransactionLog instance to a JSON object.\r\n     * @returns JSON object of the StreamEvmTransactionLog instance\r\n     * @example `transactionLog.toJSON()`\r\n     */\r\n    StreamEvmTransactionLog.prototype.toJSON = function () {\r\n        var _a = this._data, chain = _a.chain, address = _a.address, triggers = _a.triggers, data = __rest(_a, [\"chain\", \"address\", \"triggers\"]);\r\n        return __assign(__assign({}, data), { chain: chain.toJSON(), address: address.toJSON(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) { return trigger.format(); }) });\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamEvmTransactionLog.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"logIndex\", {\r\n        get: function () {\r\n            return this._data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"transactionHash\", {\r\n        get: function () {\r\n            return this._data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"address\", {\r\n        get: function () {\r\n            return this._data.address;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"data\", {\r\n        get: function () {\r\n            return this._data.data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic0\", {\r\n        get: function () {\r\n            return this._data.topic0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic1\", {\r\n        get: function () {\r\n            return this._data.topic1;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic2\", {\r\n        get: function () {\r\n            return this._data.topic2;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic3\", {\r\n        get: function () {\r\n            return this._data.topic3;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmTransactionLog.prototype, \"triggers\", {\r\n        get: function () {\r\n            return this._data.triggers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return StreamEvmTransactionLog;\r\n}());\n\n/**\r\n * The NativeBalance class is a representation of a nativeBalance-address pair\r\n *\r\n * @category DataType\r\n */\r\nvar StreamNativeBalance = /** @class */ (function () {\r\n    function StreamNativeBalance(data) {\r\n        this._data = StreamNativeBalance.parse(data);\r\n    }\r\n    StreamNativeBalance.create = function (data) {\r\n        if (data instanceof StreamNativeBalance) {\r\n            return data;\r\n        }\r\n        return new StreamNativeBalance(data);\r\n    };\r\n    StreamNativeBalance.parse = function (input) {\r\n        return {\r\n            address: commonEvmUtils.EvmAddress.create(input.address),\r\n            balance: commonEvmUtils.EvmNative.create(input.balance, 'wei'),\r\n        };\r\n    };\r\n    StreamNativeBalance.equals = function (valueA, valueB) {\r\n        var nativeBalanceTriggerA = StreamNativeBalance.create(valueA);\r\n        var nativeBalanceTriggerB = StreamNativeBalance.create(valueB);\r\n        return (nativeBalanceTriggerA.address.equals(nativeBalanceTriggerB.address) &&\r\n            nativeBalanceTriggerA.balance.equals(nativeBalanceTriggerB.balance));\r\n    };\r\n    /**\r\n     * Compares an NativeBalance data to this NativeBalance instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * nativeBalanceTrigger.equals(value);\r\n     * ```\r\n     */\r\n    StreamNativeBalance.prototype.equals = function (value) {\r\n        return StreamNativeBalance.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the NativeBalance instance to a JSON object.\r\n     * @returns JSON object of the NativeBalance instance\r\n     * @example `nativeBalanceTrigger.toJSON()`\r\n     */\r\n    StreamNativeBalance.prototype.toJSON = function () {\r\n        var _a = this._data, address = _a.address, balance = _a.balance;\r\n        return {\r\n            address: address.toJSON(),\r\n            balance: balance.format(),\r\n        };\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    StreamNativeBalance.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(StreamNativeBalance.prototype, \"address\", {\r\n        get: function () {\r\n            return this._data.address;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamNativeBalance.prototype, \"balance\", {\r\n        get: function () {\r\n            return this._data.balance;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return StreamNativeBalance;\r\n}());\n\n/**\r\n * The `StreamEvmNftTokenApproval` class is a representation of the NFT approval data.\r\n *\r\n * @category DataType\r\n */\r\nvar StreamEvmNftTokenApproval = /** @class */ (function () {\r\n    function StreamEvmNftTokenApproval(data) {\r\n        this.data = data;\r\n    }\r\n    StreamEvmNftTokenApproval.create = function (data) {\r\n        var chain = commonEvmUtils.EvmChain.create(data.chain);\r\n        return new StreamEvmNftTokenApproval(__assign(__assign({}, data), { chain: chain }));\r\n    };\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"chain\", {\r\n        get: function () {\r\n            return this.data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"contract\", {\r\n        get: function () {\r\n            return this.data.contract;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"account\", {\r\n        get: function () {\r\n            return this.data.account;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"operator\", {\r\n        get: function () {\r\n            return this.data.operator;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"approvedAll\", {\r\n        get: function () {\r\n            return this.data.approvedAll;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"tokenId\", {\r\n        get: function () {\r\n            return this.data.tokenId;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"transactionHash\", {\r\n        get: function () {\r\n            return this.data.transactionHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"logIndex\", {\r\n        get: function () {\r\n            return this.data.logIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"tokenContractType\", {\r\n        get: function () {\r\n            return this.data.tokenContractType;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"tokenName\", {\r\n        get: function () {\r\n            return this.data.tokenName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamEvmNftTokenApproval.prototype, \"tokenSymbol\", {\r\n        get: function () {\r\n            return this.data.tokenSymbol;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StreamEvmNftTokenApproval.prototype.toJSON = function () {\r\n        return {\r\n            chain: this.chain.toJSON(),\r\n            contract: this.contract,\r\n            account: this.account,\r\n            operator: this.operator,\r\n            approvedAll: this.approvedAll,\r\n            tokenId: this.tokenId,\r\n            transactionHash: this.transactionHash,\r\n            logIndex: this.logIndex,\r\n            tokenContractType: this.tokenContractType,\r\n            tokenName: this.tokenName,\r\n            tokenSymbol: this.tokenSymbol,\r\n        };\r\n    };\r\n    StreamEvmNftTokenApproval.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    // eslint-disable-next-line complexity\r\n    StreamEvmNftTokenApproval.prototype.equals = function (value) {\r\n        return (this.contract === value.contract &&\r\n            this.account === value.account &&\r\n            this.operator === value.operator &&\r\n            this.approvedAll === value.approvedAll &&\r\n            this.tokenId === value.tokenId &&\r\n            this.transactionHash === value.transactionHash &&\r\n            this.logIndex === value.logIndex &&\r\n            this.tokenContractType === value.tokenContractType &&\r\n            this.tokenName === value.tokenName &&\r\n            this.tokenSymbol === value.tokenSymbol);\r\n    };\r\n    return StreamEvmNftTokenApproval;\r\n}());\n\nvar EvmStreamResultParser = /** @class */ (function () {\r\n    function EvmStreamResultParser() {\r\n    }\r\n    EvmStreamResultParser.parseChainId = function (value) {\r\n        // Only needed for the initial test-response where we get an empty string as chain\r\n        return value === '' ? commonEvmUtils.EvmChain.ETHEREUM : commonEvmUtils.EvmChain.create(value);\r\n    };\r\n    EvmStreamResultParser.parseErc20Transfers = function (value, chain) {\r\n        return value.map(function (transfer) {\r\n            return StreamErc20Transfer.create(__assign({ chain: chain }, transfer));\r\n        });\r\n    };\r\n    EvmStreamResultParser.parseErc20Approvals = function (value, chain) {\r\n        return value.map(function (approval) {\r\n            return StreamErc20Approval.create(__assign({ chain: chain }, approval));\r\n        });\r\n    };\r\n    EvmStreamResultParser.parseNftTransfers = function (value, chain) {\r\n        return value.map(function (transfer) {\r\n            return StreamEvmNftTransfer.create(__assign({ chain: chain }, transfer));\r\n        });\r\n    };\r\n    EvmStreamResultParser.parseNftApprovals = function (value, chain) {\r\n        return {\r\n            ERC721: value.ERC721.map(function (approval) {\r\n                return StreamErc721Approval.create(__assign({ chain: chain }, approval));\r\n            }),\r\n            ERC1155: value.ERC1155.map(function (approval) {\r\n                return StreamErc1155Approval.create(__assign({ chain: chain }, approval));\r\n            }),\r\n        };\r\n    };\r\n    EvmStreamResultParser.parseNftTokenApprovals = function (values, chain) {\r\n        return values.map(function (value) {\r\n            return StreamEvmNftTokenApproval.create(__assign({ chain: chain }, value));\r\n        });\r\n    };\r\n    EvmStreamResultParser.parseBlock = function (value, chain) {\r\n        if (value.number === '') {\r\n            return commonEvmUtils.EvmSimpleBlock.create({\r\n                chain: chain,\r\n                number: 0,\r\n                hash: '',\r\n                timestamp: '0',\r\n            });\r\n        }\r\n        return commonEvmUtils.EvmSimpleBlock.create(__assign({ chain: chain }, value));\r\n    };\r\n    EvmStreamResultParser.parseLogs = function (value, chain) {\r\n        return value.map(function (log) {\r\n            return StreamEvmTransactionLog.create(__assign({ chain: chain }, log));\r\n        });\r\n    };\r\n    EvmStreamResultParser.parseTransactions = function (value, chain) {\r\n        return value.map(function (transaction) {\r\n            return StreamEvmTransaction.create(__assign({ chain: chain }, transaction));\r\n        });\r\n    };\r\n    EvmStreamResultParser.parseInternalTransactions = function (value, chain) {\r\n        return value.map(function (transaction) {\r\n            return StreamEvmInternalTransaction.create(__assign({ chain: chain }, transaction));\r\n        });\r\n    };\r\n    EvmStreamResultParser.parseNativeBalances = function (value) {\r\n        return value.map(function (nativeBalance) { return StreamNativeBalance.create(nativeBalance); });\r\n    };\r\n    var _a;\r\n    _a = EvmStreamResultParser;\r\n    EvmStreamResultParser.parse = function (value) {\r\n        var chain = _a.parseChainId(value.chainId);\r\n        return {\r\n            chain: chain,\r\n            erc20Transfers: _a.parseErc20Transfers(value.erc20Transfers, chain),\r\n            erc20Approvals: _a.parseErc20Approvals(value.erc20Approvals, chain),\r\n            nftTransfers: _a.parseNftTransfers(value.nftTransfers, chain),\r\n            nftApprovals: _a.parseNftApprovals(value.nftApprovals, chain),\r\n            ntfTokenApprovals: _a.parseNftTokenApprovals(value.nftTokenApprovals, chain),\r\n            block: _a.parseBlock(value.block, chain),\r\n            logs: _a.parseLogs(value.logs, chain),\r\n            txs: _a.parseTransactions(value.txs, chain),\r\n            txsInternal: _a.parseInternalTransactions(value.txsInternal, chain),\r\n            abi: value.abi,\r\n            retries: value.retries,\r\n            confirmed: value.confirmed,\r\n            streamId: value.streamId,\r\n            tag: value.tag,\r\n            nativeBalances: _a.parseNativeBalances(value.nativeBalances),\r\n        };\r\n    };\r\n    return EvmStreamResultParser;\r\n}());\n\n/**\r\n * The EvmStreamResult class is representation of the webhook data that is returned from the Stream api\r\n *\r\n * @category DataType\r\n */\r\nvar EvmStreamResult = /** @class */ (function () {\r\n    function EvmStreamResult(data) {\r\n        this._data = EvmStreamResult.parse(data);\r\n    }\r\n    /**\r\n     * Create a new instance of EvmStreamResult\r\n     *\r\n     * @param data - the EvmStreamResultish type\r\n     * @param core - the Core instance\r\n     * @example\r\n     * ```ts\r\n     * const evmStreamResult = EvmStreamResult.create(data);\r\n     * ```\r\n     * @returns an instance of EvmStreamResult\r\n     */\r\n    EvmStreamResult.create = function (data) {\r\n        if (data instanceof EvmStreamResult) {\r\n            return data;\r\n        }\r\n        return new EvmStreamResult(data);\r\n    };\r\n    /**\r\n     * Compares two EvmStreamResult data. It checks a deep equality check of both values.\r\n     * @param valueA - the first EvmStreamResultish data to compare\r\n     * @param valueB - the second EvmStreamResultish data to compare\r\n     * @returns true if the values are equal, false otherwise\r\n     * @example\r\n     * ```ts\r\n     *  EvmStreamResult.equals(valueA, valueB);\r\n     * ```\r\n     */\r\n    EvmStreamResult.equals = function (valueA, valueB) {\r\n        var evmStreamResultA = EvmStreamResult.create(valueA);\r\n        var evmStreamResultB = EvmStreamResult.create(valueB);\r\n        if (!evmStreamResultA.chain.equals(evmStreamResultB.chain)) {\r\n            return false;\r\n        }\r\n        if (!evmStreamResultA.block.equals(evmStreamResultB.block)) {\r\n            return false;\r\n        }\r\n        if (evmStreamResultA.streamId !== evmStreamResultB.streamId) {\r\n            return false;\r\n        }\r\n        if (evmStreamResultA.tag !== evmStreamResultB.tag) {\r\n            return false;\r\n        }\r\n        if (evmStreamResultA.confirmed !== evmStreamResultB.confirmed) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Compares an EvmStreamResultish data to this EvmStreamResult instance.\r\n     * @param value - the value to compare\r\n     * @returns true if the value is equal to the current instance, false otherwise\r\n     * @example\r\n     * ```ts\r\n     * evmStreamResult.equals(value);\r\n     * ```\r\n     */\r\n    EvmStreamResult.prototype.equals = function (value) {\r\n        return EvmStreamResult.equals(this, value);\r\n    };\r\n    /**\r\n     * Converts the EvmStreamResult instance to a JSON object.\r\n     * @returns JSON object of the EvmStreamResult instance\r\n     * @example `evmStreamResult.toJSON()`\r\n     */\r\n    EvmStreamResult.prototype.toJSON = function () {\r\n        return EvmStreamResultFormatter.toJSON(this._data);\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    EvmStreamResult.prototype.format = function () {\r\n        return this.toJSON();\r\n    };\r\n    Object.defineProperty(EvmStreamResult.prototype, \"abiInterface\", {\r\n        get: function () {\r\n            if (!this.abi || !this.abi.length) {\r\n                return null;\r\n            }\r\n            return new abi.Interface(this.abi);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"decodedLogs\", {\r\n        get: function () {\r\n            var abiInterface = this.abiInterface;\r\n            if (!abiInterface) {\r\n                return [];\r\n            }\r\n            return this.logs.map(function (log) {\r\n                return abiInterface.parseLog({\r\n                    data: log.data,\r\n                    topics: [log.topic0, log.topic1, log.topic2, log.topic3].filter(isNotEmpty),\r\n                });\r\n            });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"chain\", {\r\n        get: function () {\r\n            return this._data.chain;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"streamId\", {\r\n        get: function () {\r\n            return this._data.streamId;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"tag\", {\r\n        get: function () {\r\n            return this._data.tag;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"block\", {\r\n        get: function () {\r\n            return this._data.block;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"retries\", {\r\n        get: function () {\r\n            return this._data.retries;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"confirmed\", {\r\n        get: function () {\r\n            return this._data.confirmed;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"erc20Approvals\", {\r\n        get: function () {\r\n            return this._data.erc20Approvals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"erc20Transfers\", {\r\n        get: function () {\r\n            return this._data.erc20Transfers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"logs\", {\r\n        get: function () {\r\n            return this._data.logs;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"nftApprovals\", {\r\n        /**\r\n         * @deprecated Use `ntfTokenApprovals` instead. This property will be removed in the future.\r\n         */\r\n        get: function () {\r\n            return this._data.nftApprovals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"ntfTokenApprovals\", {\r\n        get: function () {\r\n            return this._data.ntfTokenApprovals;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"nftTransfers\", {\r\n        get: function () {\r\n            return this._data.nftTransfers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"txs\", {\r\n        get: function () {\r\n            return this._data.txs;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"txsInternal\", {\r\n        get: function () {\r\n            return this._data.txsInternal;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"abi\", {\r\n        get: function () {\r\n            return this._data.abi;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(EvmStreamResult.prototype, \"nativeBalances\", {\r\n        get: function () {\r\n            return this._data.nativeBalances;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EvmStreamResult.parse = function (data) { return EvmStreamResultParser.parse(data); };\r\n    return EvmStreamResult;\r\n}());\r\nvar isNotEmpty = function (value) { return value != null; };\n\nvar addAddressAptosOperation = {\r\n    method: 'POST',\r\n    name: 'addAddressAptos',\r\n    id: 'aptosStreamsAddAddresses',\r\n    groupName: 'aptosStreams',\r\n    urlPathPattern: '/streams/aptos/{id}/address',\r\n    bodyParamNames: ['address'],\r\n    urlPathParamNames: ['id'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$o,\r\n    getRequestBody: getRequestBody$d,\r\n    deserializeResponse: deserializeResponse$o,\r\n    serializeRequest: serializeRequest$o,\r\n    deserializeRequest: deserializeRequest$o,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$o(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$d(request) {\r\n    return {\r\n        address: Array.isArray(request.address)\r\n            ? request.address.map(function (a) { return commonAptosUtils.AptosAddress.create(a).address; })\r\n            : commonAptosUtils.AptosAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$o(jsonResponse) {\r\n    var data = commonCore.toCamelCase(jsonResponse);\r\n    return __assign(__assign({}, data), { address: data.address\r\n            ? typeof data.address === 'string'\r\n                ? commonAptosUtils.AptosAddress.create(data.address)\r\n                : data.address.map(function (address) { return commonAptosUtils.AptosAddress.create(address); })\r\n            : undefined });\r\n}\r\nfunction serializeRequest$o(request) {\r\n    return {\r\n        id: request.id,\r\n        address: Array.isArray(request.address)\r\n            ? request.address.map(function (a) { return commonAptosUtils.AptosAddress.create(a).address; })\r\n            : commonAptosUtils.AptosAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeRequest$o(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n        address: Array.isArray(jsonRequest.address)\r\n            ? jsonRequest.address.map(function (a) { return commonAptosUtils.AptosAddress.create(a); })\r\n            : commonAptosUtils.AptosAddress.create(jsonRequest.address),\r\n    };\r\n}\n\nvar getStreamsAptosOperation = {\r\n    method: 'GET',\r\n    name: 'getStreamsAptos',\r\n    id: 'aptosStreamsGetAll',\r\n    groupName: 'aptosStreams',\r\n    urlSearchParamNames: ['cursor', 'limit'],\r\n    urlPathPattern: '/streams/aptos',\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$n,\r\n    deserializeResponse: deserializeResponse$n,\r\n    serializeRequest: serializeRequest$n,\r\n    deserializeRequest: deserializeRequest$n,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$n(request) {\r\n    return {\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$n(jsonResponse) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (stream) { return AptosStream.create(stream); });\r\n}\r\nfunction serializeRequest$n(request) {\r\n    return {\r\n        cursor: request.cursor,\r\n        limit: request.limit,\r\n    };\r\n}\r\nfunction deserializeRequest$n(jsonRequest) {\r\n    return {\r\n        cursor: jsonRequest.cursor,\r\n        limit: jsonRequest.limit,\r\n    };\r\n}\n\nvar getStreamAptosOperation = {\r\n    method: 'GET',\r\n    name: 'getStreamAptos',\r\n    id: 'aptosStreamsGet',\r\n    groupName: 'aptosStreams',\r\n    urlPathPattern: '/streams/aptos/{id}',\r\n    urlPathParamNames: ['id'],\r\n    getRequestUrlParams: getRequestUrlParams$m,\r\n    deserializeResponse: deserializeResponse$m,\r\n    serializeRequest: serializeRequest$m,\r\n    deserializeRequest: deserializeRequest$m,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$m(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction deserializeResponse$m(jsonResponse) {\r\n    return AptosStream.create(jsonResponse);\r\n}\r\nfunction serializeRequest$m(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction deserializeRequest$m(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n    };\r\n}\n\nvar createStreamAptosOperation = {\r\n    method: 'PUT',\r\n    name: 'createStreamAptos',\r\n    id: 'aptosStreamsCreate',\r\n    groupName: 'aptosStreams',\r\n    urlPathPattern: '/streams/aptos',\r\n    bodyParamNames: [\r\n        'webhookUrl',\r\n        'tag',\r\n        'functions',\r\n        'events',\r\n        'network',\r\n        'includePayload',\r\n        'includeEvents',\r\n        'includeChanges',\r\n        'description',\r\n        'demo',\r\n        'allAddresses',\r\n    ],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$l,\r\n    getRequestBody: getRequestBody$c,\r\n    deserializeResponse: deserializeResponse$l,\r\n    serializeRequest: serializeRequest$l,\r\n    deserializeRequest: deserializeRequest$l,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$l() {\r\n    return {};\r\n}\r\nfunction getRequestBody$c(request) {\r\n    return {\r\n        allAddresses: request.allAddresses,\r\n        demo: request.demo,\r\n        description: request.description,\r\n        includeChanges: request.includeChanges,\r\n        includeEvents: request.includeEvents,\r\n        includePayload: request.includePayload,\r\n        network: request.network.map(function (network) { return commonAptosUtils.AptosNetwork.create(network); }),\r\n        events: request.events,\r\n        functions: request.functions,\r\n        tag: request.tag,\r\n        webhookUrl: request.webhookUrl,\r\n    };\r\n}\r\nfunction deserializeResponse$l(jsonResponse) {\r\n    return AptosStream.create(jsonResponse);\r\n}\r\nfunction serializeRequest$l(request) {\r\n    return {\r\n        allAddresses: request.allAddresses,\r\n        demo: request.demo,\r\n        description: request.description,\r\n        includeChanges: request.includeChanges,\r\n        includeEvents: request.includeEvents,\r\n        includePayload: request.includePayload,\r\n        network: request.network.map(function (network) { return commonAptosUtils.AptosNetwork.create(network).network; }),\r\n        events: request.events,\r\n        functions: request.functions,\r\n        tag: request.tag,\r\n        webhookUrl: request.webhookUrl,\r\n    };\r\n}\r\nfunction deserializeRequest$l(jsonRequest) {\r\n    return {\r\n        allAddresses: jsonRequest.allAddresses,\r\n        demo: jsonRequest.demo,\r\n        description: jsonRequest.description,\r\n        includeChanges: jsonRequest.includeChanges,\r\n        includeEvents: jsonRequest.includeEvents,\r\n        includePayload: jsonRequest.includePayload,\r\n        network: jsonRequest.network.map(function (network) { return commonAptosUtils.AptosNetwork.create(network); }),\r\n        events: jsonRequest.events,\r\n        functions: jsonRequest.functions,\r\n        tag: jsonRequest.tag,\r\n        webhookUrl: jsonRequest.webhookUrl,\r\n    };\r\n}\n\nvar deleteAddressAptosOperation = {\r\n    method: 'DELETE',\r\n    name: 'deleteAddressAptos',\r\n    id: 'aptosStreamsDeleteAddresses',\r\n    groupName: 'aptosStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlPathPattern: \"/streams/aptos/{id}/address\",\r\n    bodyParamNames: ['address'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$k,\r\n    getRequestBody: getRequestBody$b,\r\n    deserializeResponse: deserializeResponse$k,\r\n    serializeRequest: serializeRequest$k,\r\n    deserializeRequest: deserializeRequest$k,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$k(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$b(request) {\r\n    return {\r\n        address: Array.isArray(request.address)\r\n            ? request.address.map(function (address) { return commonAptosUtils.AptosAddress.create(address).address; })\r\n            : commonAptosUtils.AptosAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$k(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$k(request) {\r\n    return {\r\n        id: request.id,\r\n        address: Array.isArray(request.address)\r\n            ? request.address.map(function (address) { return commonAptosUtils.AptosAddress.create(address).address; })\r\n            : commonAptosUtils.AptosAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeRequest$k(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n        address: Array.isArray(jsonRequest.address)\r\n            ? jsonRequest.address.map(function (address) { return commonAptosUtils.AptosAddress.create(address); })\r\n            : commonAptosUtils.AptosAddress.create(jsonRequest.address),\r\n    };\r\n}\n\nvar deleteStreamAptosOperation = {\r\n    method: 'DELETE',\r\n    name: 'deleteStreamAptos',\r\n    id: 'aptosStreamsDelete',\r\n    groupName: 'aptosStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlPathPattern: \"/streams/aptos/{id}\",\r\n    bodyParamNames: [],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$j,\r\n    getRequestBody: getRequestBody$a,\r\n    deserializeResponse: deserializeResponse$j,\r\n    serializeRequest: serializeRequest$j,\r\n    deserializeRequest: deserializeRequest$j,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$j(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$a() {\r\n    return {};\r\n}\r\nfunction deserializeResponse$j(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$j(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction deserializeRequest$j(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n    };\r\n}\n\nvar getAddressesAptosOperation = {\r\n    method: 'GET',\r\n    name: 'getAddressesAptos',\r\n    id: 'aptosStreamsGetAddresses',\r\n    groupName: 'aptosStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlSearchParamNames: ['cursor', 'limit'],\r\n    urlPathPattern: '/streams/aptos/{id}/address',\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$i,\r\n    deserializeResponse: deserializeResponse$i,\r\n    serializeRequest: serializeRequest$i,\r\n    deserializeRequest: deserializeRequest$i,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$i(request) {\r\n    return {\r\n        id: request.id,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$i(jsonResponse) {\r\n    var _a;\r\n    return {\r\n        result: ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (address) { return commonAptosUtils.AptosAddress.create(address.address); }),\r\n        total: jsonResponse.total,\r\n    };\r\n}\r\nfunction serializeRequest$i(request) {\r\n    return {\r\n        id: request.id,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeRequest$i(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n    };\r\n}\n\nvar updateStreamAptosOperation = {\r\n    method: 'POST',\r\n    name: 'updateStreamAptos',\r\n    id: 'aptosStreamsUpdate',\r\n    groupName: 'aptosStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlPathPattern: '/streams/aptos/{id}',\r\n    bodyParamNames: [\r\n        'allAddresses',\r\n        'demo',\r\n        'description',\r\n        'includeChanges',\r\n        'includeEvents',\r\n        'includePayload',\r\n        'network',\r\n        'events',\r\n        'functions',\r\n        'tag',\r\n        'webhookUrl',\r\n    ],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$h,\r\n    getRequestBody: getRequestBody$9,\r\n    deserializeResponse: deserializeResponse$h,\r\n    serializeRequest: serializeRequest$h,\r\n    deserializeRequest: deserializeRequest$h,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$h(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$9(request) {\r\n    return {\r\n        allAddresses: request.allAddresses,\r\n        demo: request.demo,\r\n        description: request.description,\r\n        includeChanges: request.includeChanges,\r\n        includeEvents: request.includeEvents,\r\n        includePayload: request.includePayload,\r\n        network: request.network.map(function (network) { return commonAptosUtils.AptosNetwork.create(network); }),\r\n        events: request.events,\r\n        functions: request.functions,\r\n        tag: request.tag,\r\n        webhookUrl: request.webhookUrl,\r\n    };\r\n}\r\nfunction deserializeResponse$h(jsonResponse) {\r\n    return AptosStream.create(jsonResponse);\r\n}\r\nfunction serializeRequest$h(request) {\r\n    return {\r\n        id: request.id,\r\n        allAddresses: request.allAddresses,\r\n        demo: request.demo,\r\n        description: request.description,\r\n        includeChanges: request.includeChanges,\r\n        includeEvents: request.includeEvents,\r\n        includePayload: request.includePayload,\r\n        network: request.network.map(function (network) { return commonAptosUtils.AptosNetwork.create(network).network; }),\r\n        events: request.events,\r\n        functions: request.functions,\r\n        tag: request.tag,\r\n        webhookUrl: request.webhookUrl,\r\n    };\r\n}\r\nfunction deserializeRequest$h(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n        allAddresses: jsonRequest.allAddresses,\r\n        demo: jsonRequest.demo,\r\n        description: jsonRequest.description,\r\n        includeChanges: jsonRequest.includeChanges,\r\n        includeEvents: jsonRequest.includeEvents,\r\n        includePayload: jsonRequest.includePayload,\r\n        network: jsonRequest.network.map(function (network) { return commonAptosUtils.AptosNetwork.create(network); }),\r\n        events: jsonRequest.events,\r\n        functions: jsonRequest.functions,\r\n        tag: jsonRequest.tag,\r\n        webhookUrl: jsonRequest.webhookUrl,\r\n    };\r\n}\n\nvar updateStreamStatusAptosOperation = {\r\n    method: 'POST',\r\n    name: 'updateStreamStatusAptos',\r\n    id: 'aptosStreamsUpdateStatus',\r\n    groupName: 'aptosStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlPathPattern: '/streams/aptos/{id}/status',\r\n    bodyParamNames: ['status'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$g,\r\n    getRequestBody: getRequestBody$8,\r\n    deserializeResponse: deserializeResponse$g,\r\n    serializeRequest: serializeRequest$g,\r\n    deserializeRequest: deserializeRequest$g,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$g(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$8(request) {\r\n    return {\r\n        status: request.status,\r\n    };\r\n}\r\nfunction deserializeResponse$g(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$g(request) {\r\n    return {\r\n        id: request.id,\r\n        status: request.status,\r\n    };\r\n}\r\nfunction deserializeRequest$g(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n        status: jsonRequest.status,\r\n    };\r\n}\n\nvar addAddressEvmOperation = {\r\n    method: 'POST',\r\n    name: 'addAddressEvm',\r\n    id: 'AddAddressToStream',\r\n    groupName: 'evmStreams',\r\n    urlPathPattern: '/streams/evm/{id}/address',\r\n    bodyParamNames: ['address'],\r\n    urlPathParamNames: ['id'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$f,\r\n    getRequestBody: getRequestBody$7,\r\n    deserializeResponse: deserializeResponse$f,\r\n    serializeRequest: serializeRequest$f,\r\n    deserializeRequest: deserializeRequest$f,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$f(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$7(request) {\r\n    return {\r\n        address: Array.isArray(request.address)\r\n            ? request.address.map(function (a) { return commonEvmUtils.EvmAddress.create(a).checksum; })\r\n            : commonEvmUtils.EvmAddress.create(request.address).checksum,\r\n    };\r\n}\r\nfunction deserializeResponse$f(jsonResponse) {\r\n    var data = commonCore.toCamelCase(jsonResponse);\r\n    return __assign(__assign({}, data), { address: data.address\r\n            ? typeof data.address === 'string'\r\n                ? commonEvmUtils.EvmAddress.create(data.address)\r\n                : data.address.map(function (address) { return commonEvmUtils.EvmAddress.create(address); })\r\n            : undefined });\r\n}\r\nfunction serializeRequest$f(request) {\r\n    return {\r\n        id: request.id,\r\n        address: Array.isArray(request.address)\r\n            ? request.address.map(function (a) { return commonEvmUtils.EvmAddress.create(a).checksum; })\r\n            : commonEvmUtils.EvmAddress.create(request.address).checksum,\r\n    };\r\n}\r\nfunction deserializeRequest$f(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n        address: Array.isArray(jsonRequest.address)\r\n            ? jsonRequest.address.map(function (a) { return commonEvmUtils.EvmAddress.create(a); })\r\n            : commonEvmUtils.EvmAddress.create(jsonRequest.address),\r\n    };\r\n}\n\nvar getStreamsEvmOperation = {\r\n    method: 'GET',\r\n    name: 'getStreamsEvm',\r\n    id: 'GetStreams',\r\n    groupName: 'evmStreams',\r\n    urlSearchParamNames: ['cursor', 'limit'],\r\n    urlPathPattern: '/streams/evm',\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$e,\r\n    deserializeResponse: deserializeResponse$e,\r\n    serializeRequest: serializeRequest$e,\r\n    deserializeRequest: deserializeRequest$e,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$e(request) {\r\n    return {\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$e(jsonResponse) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (stream) { return EvmStream.create(stream); });\r\n}\r\nfunction serializeRequest$e(request) {\r\n    return {\r\n        cursor: request.cursor,\r\n        limit: request.limit,\r\n    };\r\n}\r\nfunction deserializeRequest$e(jsonRequest) {\r\n    return {\r\n        cursor: jsonRequest.cursor,\r\n        limit: jsonRequest.limit,\r\n    };\r\n}\n\nvar getStreamEvmOperation = {\r\n    method: 'GET',\r\n    name: 'getStreamEvm',\r\n    id: 'GetStream',\r\n    groupName: 'evmStreams',\r\n    urlPathPattern: '/streams/evm/{id}',\r\n    urlPathParamNames: ['id'],\r\n    getRequestUrlParams: getRequestUrlParams$d,\r\n    deserializeResponse: deserializeResponse$d,\r\n    serializeRequest: serializeRequest$d,\r\n    deserializeRequest: deserializeRequest$d,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$d(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction deserializeResponse$d(jsonResponse) {\r\n    return EvmStream.create(jsonResponse);\r\n}\r\nfunction serializeRequest$d(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction deserializeRequest$d(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n    };\r\n}\n\nvar createStreamEvmOperation = {\r\n    method: 'PUT',\r\n    name: 'createStreamEvm',\r\n    id: 'CreateStream',\r\n    groupName: 'evmStreams',\r\n    urlPathPattern: '/streams/evm',\r\n    bodyParamNames: [\r\n        'webhookUrl',\r\n        'description',\r\n        'tag',\r\n        'topic0',\r\n        'allAddresses',\r\n        'includeNativeTxs',\r\n        'includeContractLogs',\r\n        'includeInternalTxs',\r\n        'includeAllTxLogs',\r\n        'getNativeBalances',\r\n        'chains',\r\n        'abi',\r\n        'advancedOptions',\r\n        'demo',\r\n        'triggers',\r\n    ],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$c,\r\n    getRequestBody: getRequestBody$6,\r\n    deserializeResponse: deserializeResponse$c,\r\n    serializeRequest: serializeRequest$c,\r\n    deserializeRequest: deserializeRequest$c,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$c() {\r\n    return {};\r\n}\r\nfunction getRequestBody$6(request) {\r\n    var _a;\r\n    return {\r\n        webhookUrl: request.webhookUrl,\r\n        description: request.description,\r\n        tag: request.tag,\r\n        topic0: request.topic0,\r\n        allAddresses: request.allAddresses,\r\n        includeNativeTxs: request.includeNativeTxs,\r\n        includeContractLogs: request.includeContractLogs,\r\n        includeInternalTxs: request.includeInternalTxs,\r\n        includeAllTxLogs: request.includeAllTxLogs,\r\n        getNativeBalances: request.getNativeBalances,\r\n        chainIds: request.chains.map(function (chain) { return commonEvmUtils.EvmChain.create(chain).apiHex; }),\r\n        abi: request.abi,\r\n        advancedOptions: request.advancedOptions,\r\n        demo: request.demo,\r\n        triggers: (_a = request.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return StreamTrigger.create(trigger).format(); }),\r\n    };\r\n}\r\nfunction deserializeResponse$c(jsonResponse) {\r\n    return EvmStream.create(jsonResponse);\r\n}\r\nfunction serializeRequest$c(request) {\r\n    var _a;\r\n    return {\r\n        webhookUrl: request.webhookUrl,\r\n        description: request.description,\r\n        tag: request.tag,\r\n        topic0: request.topic0,\r\n        allAddresses: request.allAddresses,\r\n        includeNativeTxs: request.includeNativeTxs,\r\n        includeContractLogs: request.includeContractLogs,\r\n        includeInternalTxs: request.includeInternalTxs,\r\n        includeAllTxLogs: request.includeAllTxLogs,\r\n        chainIds: request.chains.map(function (chain) { return commonEvmUtils.EvmChain.create(chain).apiHex; }),\r\n        abi: request.abi,\r\n        advancedOptions: request.advancedOptions,\r\n        demo: request.demo,\r\n        triggers: (_a = request.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return StreamTrigger.create(trigger).format(); }),\r\n    };\r\n}\r\nfunction deserializeRequest$c(jsonRequest) {\r\n    var _a;\r\n    return {\r\n        webhookUrl: jsonRequest.webhookUrl,\r\n        description: jsonRequest.description,\r\n        tag: jsonRequest.tag,\r\n        topic0: jsonRequest.topic0,\r\n        allAddresses: jsonRequest.allAddresses,\r\n        includeNativeTxs: jsonRequest.includeNativeTxs,\r\n        includeContractLogs: jsonRequest.includeContractLogs,\r\n        includeInternalTxs: jsonRequest.includeInternalTxs,\r\n        includeAllTxLogs: jsonRequest.includeAllTxLogs,\r\n        chains: jsonRequest.chainIds.map(function (chainId) { return commonEvmUtils.EvmChain.create(chainId); }),\r\n        abi: jsonRequest.abi,\r\n        advancedOptions: jsonRequest.advancedOptions,\r\n        demo: jsonRequest.demo,\r\n        triggers: (_a = jsonRequest.triggers) === null || _a === void 0 ? void 0 : _a.map(function (trigger) { return StreamTrigger.create(trigger); }),\r\n    };\r\n}\n\nvar deleteAddressEvmOperation = {\r\n    method: 'DELETE',\r\n    name: 'deleteAddressEvm',\r\n    id: 'DeleteAddressFromStream',\r\n    groupName: 'evmStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlPathPattern: \"/streams/evm/{id}/address\",\r\n    bodyParamNames: ['address'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$b,\r\n    getRequestBody: getRequestBody$5,\r\n    deserializeResponse: deserializeResponse$b,\r\n    serializeRequest: serializeRequest$b,\r\n    deserializeRequest: deserializeRequest$b,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$b(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$5(request) {\r\n    return {\r\n        address: Array.isArray(request.address)\r\n            ? request.address.map(function (address) { return commonEvmUtils.EvmAddress.create(address).lowercase; })\r\n            : commonEvmUtils.EvmAddress.create(request.address).lowercase,\r\n    };\r\n}\r\nfunction deserializeResponse$b(jsonResponse) {\r\n    var data = commonCore.toCamelCase(jsonResponse);\r\n    return {\r\n        streamId: jsonResponse.streamId,\r\n        address: data.address\r\n            ? typeof data.address === 'string'\r\n                ? commonEvmUtils.EvmAddress.create(data.address)\r\n                : data.address.map(function (address) { return commonEvmUtils.EvmAddress.create(address); })\r\n            : undefined,\r\n    };\r\n}\r\nfunction serializeRequest$b(request) {\r\n    return {\r\n        id: request.id,\r\n        address: Array.isArray(request.address)\r\n            ? request.address.map(function (address) { return commonEvmUtils.EvmAddress.create(address).lowercase; })\r\n            : commonEvmUtils.EvmAddress.create(request.address).lowercase,\r\n    };\r\n}\r\nfunction deserializeRequest$b(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n        address: Array.isArray(jsonRequest.address)\r\n            ? jsonRequest.address.map(function (address) { return commonEvmUtils.EvmAddress.create(address); })\r\n            : commonEvmUtils.EvmAddress.create(jsonRequest.address),\r\n    };\r\n}\n\nvar deleteStreamEvmOperation = {\r\n    method: 'DELETE',\r\n    name: 'deleteStreamEvm',\r\n    id: 'DeleteStream',\r\n    groupName: 'evmStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlPathPattern: \"/streams/evm/{id}\",\r\n    bodyParamNames: [],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$a,\r\n    getRequestBody: getRequestBody$4,\r\n    deserializeResponse: deserializeResponse$a,\r\n    serializeRequest: serializeRequest$a,\r\n    deserializeRequest: deserializeRequest$a,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$a(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$4() {\r\n    return {};\r\n}\r\nfunction deserializeResponse$a(jsonResponse) {\r\n    return EvmStream.create(jsonResponse);\r\n}\r\nfunction serializeRequest$a(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction deserializeRequest$a(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n    };\r\n}\n\nvar getAddressesEvmOperation = {\r\n    method: 'GET',\r\n    name: 'getAddressesEvm',\r\n    id: 'GetAddresses',\r\n    groupName: 'evmStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlSearchParamNames: ['cursor', 'limit'],\r\n    urlPathPattern: '/streams/evm/{id}/address',\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$9,\r\n    deserializeResponse: deserializeResponse$9,\r\n    serializeRequest: serializeRequest$9,\r\n    deserializeRequest: deserializeRequest$9,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$9(request) {\r\n    return {\r\n        id: request.id,\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$9(jsonResponse) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (stream) { return (__assign(__assign({}, stream), { address: stream.address ? commonEvmUtils.EvmAddress.create(stream.address) : undefined })); });\r\n}\r\nfunction serializeRequest$9(request) {\r\n    return {\r\n        id: request.id,\r\n        limit: request.limit,\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeRequest$9(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n        limit: jsonRequest.limit,\r\n        cursor: jsonRequest.cursor,\r\n    };\r\n}\n\nvar updateStreamEvmOperation = {\r\n    method: 'POST',\r\n    name: 'updateStreamEvm',\r\n    id: 'UpdateStream',\r\n    groupName: 'evmStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlPathPattern: '/streams/evm/{id}',\r\n    bodyParamNames: [\r\n        'webhookUrl',\r\n        'description',\r\n        'tag',\r\n        'topic0',\r\n        'allAddresses',\r\n        'includeNativeTxs',\r\n        'includeContractLogs',\r\n        'includeInternalTxs',\r\n        'includeAllTxLogs',\r\n        'getNativeBalances',\r\n        'chains',\r\n        'abi',\r\n        'advancedOptions',\r\n        'demo',\r\n        'triggers',\r\n    ],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$8,\r\n    getRequestBody: getRequestBody$3,\r\n    deserializeResponse: deserializeResponse$8,\r\n    serializeRequest: serializeRequest$8,\r\n    deserializeRequest: deserializeRequest$8,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$8(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$3(request) {\r\n    var _a, _b;\r\n    return {\r\n        webhookUrl: request.webhookUrl,\r\n        description: request.description,\r\n        tag: request.tag,\r\n        topic0: request.topic0,\r\n        allAddresses: request.allAddresses,\r\n        includeNativeTxs: request.includeNativeTxs,\r\n        includeContractLogs: request.includeContractLogs,\r\n        includeInternalTxs: request.includeInternalTxs,\r\n        includeAllTxLogs: request.includeAllTxLogs,\r\n        getNativeBalances: request.getNativeBalances,\r\n        chainIds: (_a = request.chains) === null || _a === void 0 ? void 0 : _a.map(function (chain) { return commonEvmUtils.EvmChain.create(chain).apiHex; }),\r\n        abi: request.abi,\r\n        advancedOptions: request.advancedOptions,\r\n        demo: request.demo,\r\n        triggers: (_b = request.triggers) === null || _b === void 0 ? void 0 : _b.map(function (trigger) { return StreamTrigger.create(trigger); }),\r\n    };\r\n}\r\nfunction deserializeResponse$8(jsonResponse) {\r\n    return EvmStream.create(jsonResponse);\r\n}\r\nfunction serializeRequest$8(request) {\r\n    var _a, _b;\r\n    return {\r\n        id: request.id,\r\n        webhookUrl: request.webhookUrl,\r\n        description: request.description,\r\n        tag: request.tag,\r\n        topic0: request.topic0,\r\n        allAddresses: request.allAddresses,\r\n        includeNativeTxs: request.includeNativeTxs,\r\n        includeContractLogs: request.includeContractLogs,\r\n        includeInternalTxs: request.includeInternalTxs,\r\n        includeAllTxLogs: request.includeAllTxLogs,\r\n        chainIds: (_a = request.chains) === null || _a === void 0 ? void 0 : _a.map(function (chain) { return commonEvmUtils.EvmChain.create(chain).apiHex; }),\r\n        abi: request.abi,\r\n        advancedOptions: request.advancedOptions,\r\n        demo: request.demo,\r\n        triggers: (_b = request.triggers) === null || _b === void 0 ? void 0 : _b.map(function (trigger) { return StreamTrigger.create(trigger).format(); }),\r\n    };\r\n}\r\nfunction deserializeRequest$8(jsonRequest) {\r\n    var _a, _b;\r\n    return {\r\n        id: jsonRequest.id,\r\n        webhookUrl: jsonRequest.webhookUrl,\r\n        description: jsonRequest.description,\r\n        tag: jsonRequest.tag,\r\n        topic0: jsonRequest.topic0,\r\n        allAddresses: jsonRequest.allAddresses,\r\n        includeNativeTxs: jsonRequest.includeNativeTxs,\r\n        includeContractLogs: jsonRequest.includeContractLogs,\r\n        includeInternalTxs: jsonRequest.includeInternalTxs,\r\n        includeAllTxLogs: jsonRequest.includeAllTxLogs,\r\n        chains: (_a = jsonRequest.chainIds) === null || _a === void 0 ? void 0 : _a.map(function (chainId) { return commonEvmUtils.EvmChain.create(chainId); }),\r\n        abi: jsonRequest.abi,\r\n        advancedOptions: jsonRequest.advancedOptions,\r\n        demo: jsonRequest.demo,\r\n        triggers: (_b = jsonRequest.triggers) === null || _b === void 0 ? void 0 : _b.map(function (trigger) { return StreamTrigger.create(trigger); }),\r\n    };\r\n}\n\nvar updateStreamStatusEvmOperation = {\r\n    method: 'POST',\r\n    name: 'updateStreamStatusEvm',\r\n    id: 'UpdateStreamStatus',\r\n    groupName: 'evmStreams',\r\n    urlPathParamNames: ['id'],\r\n    urlPathPattern: '/streams/evm/{id}/status',\r\n    bodyParamNames: ['status'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$7,\r\n    getRequestBody: getRequestBody$2,\r\n    deserializeResponse: deserializeResponse$7,\r\n    serializeRequest: serializeRequest$7,\r\n    deserializeRequest: deserializeRequest$7,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$7(request) {\r\n    return {\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$2(request) {\r\n    return {\r\n        status: request.status,\r\n    };\r\n}\r\nfunction deserializeResponse$7(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$7(request) {\r\n    return {\r\n        id: request.id,\r\n        status: request.status,\r\n    };\r\n}\r\nfunction deserializeRequest$7(jsonRequest) {\r\n    return {\r\n        id: jsonRequest.id,\r\n        status: jsonRequest.status,\r\n    };\r\n}\n\nvar getHistoryOperation = {\r\n    method: 'GET',\r\n    name: 'getHistory',\r\n    id: 'GetHistory',\r\n    groupName: 'history',\r\n    urlPathPattern: '/history',\r\n    urlSearchParamNames: ['excludePayload', 'limit', 'cursor'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$6,\r\n    deserializeResponse: deserializeResponse$6,\r\n    serializeRequest: serializeRequest$6,\r\n    deserializeRequest: deserializeRequest$6,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$6(request) {\r\n    return {\r\n        excludePayload: commonCore.maybe(request.excludePayload, String),\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$6(jsonResponse) {\r\n    var _a;\r\n    return (_a = jsonResponse.result) !== null && _a !== void 0 ? _a : [];\r\n}\r\nfunction serializeRequest$6(request) {\r\n    return request;\r\n}\r\nfunction deserializeRequest$6(jsonRequest) {\r\n    return jsonRequest;\r\n}\n\nvar replayHistoryOperation = {\r\n    method: 'POST',\r\n    name: 'replayHistory',\r\n    id: 'ReplayHistory',\r\n    groupName: 'history',\r\n    urlPathPattern: '/history/replay/{streamId}/{id}',\r\n    urlPathParamNames: ['streamId', 'id'],\r\n    bodyParamNames: [],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$5,\r\n    getRequestBody: getRequestBody$1,\r\n    deserializeResponse: deserializeResponse$5,\r\n    serializeRequest: serializeRequest$5,\r\n    deserializeRequest: deserializeRequest$5,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$5(request) {\r\n    return {\r\n        streamId: request.streamId,\r\n        id: request.id,\r\n    };\r\n}\r\nfunction getRequestBody$1() {\r\n    return {};\r\n}\r\nfunction deserializeResponse$5(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$5(request) {\r\n    return {\r\n        streamId: request.streamId,\r\n        id: request.id,\r\n    };\r\n}\r\nfunction deserializeRequest$5(jsonRequest) {\r\n    return {\r\n        streamId: jsonRequest.streamId,\r\n        id: jsonRequest.id,\r\n    };\r\n}\n\nvar getLogsOperation = {\r\n    method: 'GET',\r\n    name: 'getLogs',\r\n    id: 'GetLogs',\r\n    groupName: 'history',\r\n    urlPathPattern: '/history/logs',\r\n    urlSearchParamNames: ['limit', 'cursor'],\r\n    firstPageIndex: 0,\r\n    getRequestUrlParams: getRequestUrlParams$4,\r\n    deserializeResponse: deserializeResponse$4,\r\n    serializeRequest: serializeRequest$4,\r\n    deserializeRequest: deserializeRequest$4,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$4(request) {\r\n    return {\r\n        limit: commonCore.maybe(request.limit, String),\r\n        cursor: request.cursor,\r\n    };\r\n}\r\nfunction deserializeResponse$4(jsonResponse) {\r\n    var _a;\r\n    return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (result) { return (__assign(__assign({}, result), { chain: commonEvmUtils.EvmChain.create(result.chain) })); });\r\n}\r\nfunction serializeRequest$4(request) {\r\n    return request;\r\n}\r\nfunction deserializeRequest$4(jsonRequest) {\r\n    return jsonRequest;\r\n}\n\nvar getSettingsOperation = {\r\n    method: 'GET',\r\n    name: 'getSettings',\r\n    id: 'GetSettings',\r\n    groupName: 'project',\r\n    urlPathPattern: '/settings',\r\n    getRequestUrlParams: getRequestUrlParams$3,\r\n    deserializeResponse: deserializeResponse$3,\r\n    serializeRequest: serializeRequest$3,\r\n    deserializeRequest: deserializeRequest$3,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$3() {\r\n    return {};\r\n}\r\nfunction deserializeResponse$3(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$3() {\r\n    return undefined;\r\n}\r\nfunction deserializeRequest$3() {\r\n    return {};\r\n}\n\nvar setSettingsOperation = {\r\n    method: 'POST',\r\n    name: 'setSettings',\r\n    id: 'SetSettings',\r\n    groupName: 'project',\r\n    urlPathPattern: '/settings',\r\n    bodyParamNames: ['region'],\r\n    bodyType: 'properties',\r\n    getRequestUrlParams: getRequestUrlParams$2,\r\n    getRequestBody: getRequestBody,\r\n    deserializeResponse: deserializeResponse$2,\r\n    serializeRequest: serializeRequest$2,\r\n    deserializeRequest: deserializeRequest$2,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$2() {\r\n    return {};\r\n}\r\nfunction getRequestBody(request) {\r\n    return {\r\n        region: request.region,\r\n    };\r\n}\r\nfunction deserializeResponse$2(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$2(request) {\r\n    return {\r\n        region: request.region,\r\n    };\r\n}\r\nfunction deserializeRequest$2(jsonRequest) {\r\n    return {\r\n        region: jsonRequest.region,\r\n    };\r\n}\n\nvar getStatsOperation = {\r\n    method: 'GET',\r\n    name: 'getStats',\r\n    id: 'getStats',\r\n    groupName: 'streams',\r\n    urlPathPattern: '/stats',\r\n    getRequestUrlParams: getRequestUrlParams$1,\r\n    deserializeResponse: deserializeResponse$1,\r\n    serializeRequest: serializeRequest$1,\r\n    deserializeRequest: deserializeRequest$1,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$1() {\r\n    return {};\r\n}\r\nfunction deserializeResponse$1(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest$1() {\r\n    return undefined;\r\n}\r\nfunction deserializeRequest$1() {\r\n    return {};\r\n}\n\nvar getStatsByIdOperation = {\r\n    method: 'GET',\r\n    name: 'getStatsById',\r\n    id: 'GetStatsByStreamId',\r\n    groupName: 'stats',\r\n    urlPathPattern: '/stats/{streamId}',\r\n    urlPathParamNames: ['streamId'],\r\n    getRequestUrlParams: getRequestUrlParams,\r\n    deserializeResponse: deserializeResponse,\r\n    serializeRequest: serializeRequest,\r\n    deserializeRequest: deserializeRequest,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams(request) {\r\n    return {\r\n        streamId: request.streamId,\r\n    };\r\n}\r\nfunction deserializeResponse(jsonResponse) {\r\n    return jsonResponse;\r\n}\r\nfunction serializeRequest(request) {\r\n    return request;\r\n}\r\nfunction deserializeRequest(jsonRequest) {\r\n    return jsonRequest;\r\n}\n\nexports.AptosStream = AptosStream;\nexports.EvmStream = EvmStream;\nexports.EvmStreamResult = EvmStreamResult;\nexports.StreamErc1155Approval = StreamErc1155Approval;\nexports.StreamErc20Approval = StreamErc20Approval;\nexports.StreamErc20Transfer = StreamErc20Transfer;\nexports.StreamErc721Approval = StreamErc721Approval;\nexports.StreamEvmInternalTransaction = StreamEvmInternalTransaction;\nexports.StreamEvmNftTokenApproval = StreamEvmNftTokenApproval;\nexports.StreamEvmNftTransfer = StreamEvmNftTransfer;\nexports.StreamEvmTransaction = StreamEvmTransaction;\nexports.StreamEvmTransactionLog = StreamEvmTransactionLog;\nexports.StreamTrigger = StreamTrigger;\nexports.StreamTriggerOutput = StreamTriggerOutput;\nexports.addAddressAptosOperation = addAddressAptosOperation;\nexports.addAddressEvmOperation = addAddressEvmOperation;\nexports.createStreamAptosOperation = createStreamAptosOperation;\nexports.createStreamEvmOperation = createStreamEvmOperation;\nexports.deleteAddressAptosOperation = deleteAddressAptosOperation;\nexports.deleteAddressEvmOperation = deleteAddressEvmOperation;\nexports.deleteStreamAptosOperation = deleteStreamAptosOperation;\nexports.deleteStreamEvmOperation = deleteStreamEvmOperation;\nexports.getAddressesAptosOperation = getAddressesAptosOperation;\nexports.getAddressesEvmOperation = getAddressesEvmOperation;\nexports.getHistoryOperation = getHistoryOperation;\nexports.getLogsOperation = getLogsOperation;\nexports.getSettingsOperation = getSettingsOperation;\nexports.getStatsByIdOperation = getStatsByIdOperation;\nexports.getStatsOperation = getStatsOperation;\nexports.getStreamAptosOperation = getStreamAptosOperation;\nexports.getStreamEvmOperation = getStreamEvmOperation;\nexports.getStreamsAptosOperation = getStreamsAptosOperation;\nexports.getStreamsEvmOperation = getStreamsEvmOperation;\nexports.replayHistoryOperation = replayHistoryOperation;\nexports.setSettingsOperation = setSettingsOperation;\nexports.updateStreamAptosOperation = updateStreamAptosOperation;\nexports.updateStreamEvmOperation = updateStreamEvmOperation;\nexports.updateStreamStatusAptosOperation = updateStreamStatusAptosOperation;\nexports.updateStreamStatusEvmOperation = updateStreamStatusEvmOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/common-streams-utils/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/evm-api/lib/cjs/index.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@moralisweb3/evm-api/lib/cjs/index.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar commonEvmUtils = __webpack_require__(/*! @moralisweb3/common-evm-utils */ \"(ssr)/./node_modules/@moralisweb3/common-evm-utils/lib/cjs/index.cjs\");\nvar apiUtils = __webpack_require__(/*! @moralisweb3/api-utils */ \"(ssr)/./node_modules/@moralisweb3/api-utils/lib/cjs/index.cjs\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar EvmApiConfig = {\r\n    evmApiBaseUrl: {\r\n        name: 'evmApiBaseUrl',\r\n        defaultValue: 'https://deep-index.moralis.io/api/v2.2',\r\n    },\r\n};\n\nvar EvmApiConfigSetup = /** @class */ (function () {\r\n    function EvmApiConfigSetup() {\r\n    }\r\n    EvmApiConfigSetup.register = function (config) {\r\n        config.registerKey(EvmApiConfig.evmApiBaseUrl);\r\n    };\r\n    return EvmApiConfigSetup;\r\n}());\n\nvar ClientEvmApi = /** @class */ (function (_super) {\r\n    __extends(ClientEvmApi, _super);\r\n    function ClientEvmApi() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.block = {\r\n            getBlock: function (request) {\r\n                return new apiUtils.NullableOperationResolver(commonEvmUtils.getBlockOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getDateToBlock: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getDateToBlockOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getBlockStats: function (request) {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetBlockStatsOperation, _this.baseUrl, _this.core).fetch(request, null);\r\n            },\r\n        };\r\n        _this.events = {\r\n            getContractEvents: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getContractEventsOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getContractLogs: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getContractLogsOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        _this.nft = {\r\n            getContractNFTs: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getContractNFTsOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getMultipleNFTs: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getMultipleNFTsOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTContractMetadata: function (request) {\r\n                return new apiUtils.NullableOperationResolver(commonEvmUtils.getNFTContractMetadataOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTContractTransfers: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getNFTContractTransfersOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTLowestPrice: function (request) {\r\n                return new apiUtils.NullableOperationResolver(commonEvmUtils.getNFTLowestPriceOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTMetadata: function (request) {\r\n                return new apiUtils.NullableOperationResolver(commonEvmUtils.getNFTMetadataOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTOwners: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getNFTOwnersOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTTokenIdOwners: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getNFTTokenIdOwnersOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTTransfersByBlock: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getNFTTransfersByBlockOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTTransfersFromToBlock: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getNFTTransfersFromToBlockOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTTransfers: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getWalletNFTCollections: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getWalletNFTCollectionsOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getWalletNFTs: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getWalletNFTsOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getWalletNFTTransfers: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getWalletNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            reSyncMetadata: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.reSyncMetadataOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            syncNFTContract: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.syncNFTContractOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTTrades: function (request) {\r\n                return new apiUtils.PaginatedOperationV3Resolver(commonEvmUtils.GetNFTTradesOperation, _this.baseUrl, _this.core).fetch(request, null);\r\n            },\r\n            getNFTCollectionStats: function (request) {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetNFTCollectionStatsOperation, _this.baseUrl, _this.core).fetch(request, null);\r\n            },\r\n            getNFTTokenStats: function (request) {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetNFTTokenStatsOperation, _this.baseUrl, _this.core).fetch(request, null);\r\n            },\r\n        };\r\n        _this.transaction = {\r\n            getInternalTransactions: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getInternalTransactionsOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getTransaction: function (request) {\r\n                return new apiUtils.NullableOperationResolver(commonEvmUtils.getTransactionOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getTransactionVerbose: function (request) {\r\n                return new apiUtils.NullableOperationResolver(commonEvmUtils.getTransactionVerboseOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getWalletTransactions: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getWalletTransactionsOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getWalletTransactionsVerbose: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getWalletTransactionsVerboseOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        _this.balance = {\r\n            getNativeBalance: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getNativeBalanceOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNativeBalancesForAddresses: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getNativeBalancesForAddressesOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        _this.defi = {\r\n            getPairAddress: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getPairAddressOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getPairReserves: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getPairReservesOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        _this.token = {\r\n            getTokenAllowance: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getTokenAllowanceOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getTokenMetadataBySymbol: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getTokenMetadataBySymbolOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getTokenMetadata: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getTokenMetadataOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getTokenPrice: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getTokenPriceOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getTokenTransfers: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getWalletTokenBalances: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.getWalletTokenBalancesOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getWalletTokenTransfers: function (request) {\r\n                return new apiUtils.PaginatedOperationResolver(commonEvmUtils.getWalletTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getTokenStats: function (request) {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetTokenStatsOperation, _this.baseUrl, _this.core).fetch(request, null);\r\n            },\r\n        };\r\n        _this.resolve = {\r\n            resolveAddress: function (request) {\r\n                return new apiUtils.NullableOperationResolver(commonEvmUtils.resolveAddressOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            resolveDomain: function (request) {\r\n                return new apiUtils.NullableOperationResolver(commonEvmUtils.resolveDomainOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            resolveENSDomain: function (request) {\r\n                return new apiUtils.NullableOperationResolver(commonEvmUtils.resolveENSDomainOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        _this.utils = {\r\n            runContractFunction: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.runContractFunctionOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            web3ApiVersion: function () {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.Web3ApiVersionOperation, _this.baseUrl, _this.core).fetch({}, null);\r\n            },\r\n            endpointWeights: function () {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.EndpointWeightsOperation, _this.baseUrl, _this.core).fetch({}, null);\r\n            },\r\n            reviewContracts: function (request, body) {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.ReviewContractsOperation, _this.baseUrl, _this.core).fetch(request, body);\r\n            },\r\n        };\r\n        _this.ipfs = {\r\n            uploadFolder: function (request) {\r\n                return new apiUtils.OperationResolver(commonEvmUtils.uploadFolderOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        _this.marketData = {\r\n            getTopERC20TokensByMarketCap: function () {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetTopERC20TokensByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);\r\n            },\r\n            getTopERC20TokensByPriceMovers: function () {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetTopERC20TokensByPriceMoversOperation, _this.baseUrl, _this.core).fetch({}, null);\r\n            },\r\n            getTopNFTCollectionsByMarketCap: function () {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetTopNFTCollectionsByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);\r\n            },\r\n            getHottestNFTCollectionsByTradingVolume: function () {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetHottestNFTCollectionsByTradingVolumeOperation, _this.baseUrl, _this.core).fetch({}, null);\r\n            },\r\n        };\r\n        _this.wallets = {\r\n            getWalletActiveChains: function (request) {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetWalletActiveChainsOperation, _this.baseUrl, _this.core).fetch(request, null);\r\n            },\r\n            getWalletStats: function (request) {\r\n                return new apiUtils.OperationV3Resolver(commonEvmUtils.GetWalletStatsOperation, _this.baseUrl, _this.core).fetch(request, null);\r\n            },\r\n        };\r\n        return _this;\r\n    }\r\n    return ClientEvmApi;\r\n}(commonCore.ApiModule));\n\nvar EvmApi = /** @class */ (function (_super) {\r\n    __extends(EvmApi, _super);\r\n    function EvmApi(core) {\r\n        return _super.call(this, EvmApi.moduleName, core, function () { return core.config.get(EvmApiConfig.evmApiBaseUrl); }) || this;\r\n    }\r\n    EvmApi.create = function (core) {\r\n        return new EvmApi(core !== null && core !== void 0 ? core : commonCore.CoreProvider.getDefault());\r\n    };\r\n    EvmApi.prototype.setup = function () {\r\n        EvmApiConfigSetup.register(this.core.config);\r\n    };\r\n    EvmApi.prototype.start = function () {\r\n        // Nothing\r\n    };\r\n    EvmApi.moduleName = 'evmApi';\r\n    return EvmApi;\r\n}(ClientEvmApi));\n\nexports.EvmApi = EvmApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/evm-api/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/sol-api/lib/cjs/index.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@moralisweb3/sol-api/lib/cjs/index.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar commonSolUtils = __webpack_require__(/*! @moralisweb3/common-sol-utils */ \"(ssr)/./node_modules/@moralisweb3/common-sol-utils/lib/cjs/index.cjs\");\nvar apiUtils = __webpack_require__(/*! @moralisweb3/api-utils */ \"(ssr)/./node_modules/@moralisweb3/api-utils/lib/cjs/index.cjs\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar ClientSolApi = /** @class */ (function (_super) {\r\n    __extends(ClientSolApi, _super);\r\n    function ClientSolApi() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.account = {\r\n            getBalance: function (request) {\r\n                return new apiUtils.OperationResolver(commonSolUtils.getBalanceOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getNFTs: function (request) {\r\n                return new apiUtils.OperationResolver(commonSolUtils.getNFTsOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getPortfolio: function (request) {\r\n                return new apiUtils.OperationResolver(commonSolUtils.getPortfolioOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n            getSPL: function (request) {\r\n                return new apiUtils.OperationResolver(commonSolUtils.getSPLOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        _this.nft = {\r\n            getNFTMetadata: function (request) {\r\n                return new apiUtils.OperationResolver(commonSolUtils.getNFTMetadataOperation, _this.baseUrl, _this.core).fetch(request);\r\n            },\r\n        };\r\n        _this.token = {\r\n            getTokenPrice: function (request) {\r\n                return new apiUtils.OperationV3Resolver(commonSolUtils.GetTokenPriceOperation, _this.baseUrl, _this.core).fetch(request, null);\r\n            },\r\n        };\r\n        return _this;\r\n    }\r\n    return ClientSolApi;\r\n}(commonCore.ApiModule));\n\nvar SolApiConfig = {\r\n    solApiBaseUrl: {\r\n        name: 'solApiBaseUrl',\r\n        defaultValue: 'https://solana-gateway.moralis.io',\r\n    },\r\n};\n\nvar EvmSolApiConfigSetup = /** @class */ (function () {\r\n    function EvmSolApiConfigSetup() {\r\n    }\r\n    EvmSolApiConfigSetup.register = function (config) {\r\n        config.registerKey(SolApiConfig.solApiBaseUrl);\r\n    };\r\n    return EvmSolApiConfigSetup;\r\n}());\n\nvar SolApi = /** @class */ (function (_super) {\r\n    __extends(SolApi, _super);\r\n    function SolApi(core) {\r\n        return _super.call(this, SolApi.moduleName, core, function () { return core.config.get(SolApiConfig.solApiBaseUrl); }) || this;\r\n    }\r\n    SolApi.create = function (core) {\r\n        return new SolApi(core !== null && core !== void 0 ? core : commonCore.CoreProvider.getDefault());\r\n    };\r\n    SolApi.prototype.setup = function () {\r\n        EvmSolApiConfigSetup.register(this.core.config);\r\n    };\r\n    SolApi.prototype.start = function () {\r\n        // Nothing\r\n    };\r\n    SolApi.moduleName = 'solApi';\r\n    return SolApi;\r\n}(ClientSolApi));\n\nexports.SolApi = SolApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vcmFsaXN3ZWIzL3NvbC1hcGkvbGliL2Nqcy9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaUJBQWlCLG1CQUFPLENBQUMsaUdBQTBCO0FBQ25ELHFCQUFxQixtQkFBTyxDQUFDLDJHQUErQjtBQUM1RCxlQUFlLG1CQUFPLENBQUMsNkZBQXdCOztBQUUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ25GLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLHFEQUFxRDtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb3JhbGlzd2ViMy9zb2wtYXBpL2xpYi9janMvaW5kZXguY2pzP2JkNTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29tbW9uQ29yZSA9IHJlcXVpcmUoJ0Btb3JhbGlzd2ViMy9jb21tb24tY29yZScpO1xudmFyIGNvbW1vblNvbFV0aWxzID0gcmVxdWlyZSgnQG1vcmFsaXN3ZWIzL2NvbW1vbi1zb2wtdXRpbHMnKTtcbnZhciBhcGlVdGlscyA9IHJlcXVpcmUoJ0Btb3JhbGlzd2ViMy9hcGktdXRpbHMnKTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XG5cbnZhciBDbGllbnRTb2xBcGkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQ2xpZW50U29sQXBpLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ2xpZW50U29sQXBpKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmFjY291bnQgPSB7XHJcbiAgICAgICAgICAgIGdldEJhbGFuY2U6IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGFwaVV0aWxzLk9wZXJhdGlvblJlc29sdmVyKGNvbW1vblNvbFV0aWxzLmdldEJhbGFuY2VPcGVyYXRpb24sIF90aGlzLmJhc2VVcmwsIF90aGlzLmNvcmUpLmZldGNoKHJlcXVlc3QpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRORlRzOiBmdW5jdGlvbiAocmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBhcGlVdGlscy5PcGVyYXRpb25SZXNvbHZlcihjb21tb25Tb2xVdGlscy5nZXRORlRzT3BlcmF0aW9uLCBfdGhpcy5iYXNlVXJsLCBfdGhpcy5jb3JlKS5mZXRjaChyZXF1ZXN0KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0UG9ydGZvbGlvOiBmdW5jdGlvbiAocmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBhcGlVdGlscy5PcGVyYXRpb25SZXNvbHZlcihjb21tb25Tb2xVdGlscy5nZXRQb3J0Zm9saW9PcGVyYXRpb24sIF90aGlzLmJhc2VVcmwsIF90aGlzLmNvcmUpLmZldGNoKHJlcXVlc3QpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRTUEw6IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGFwaVV0aWxzLk9wZXJhdGlvblJlc29sdmVyKGNvbW1vblNvbFV0aWxzLmdldFNQTE9wZXJhdGlvbiwgX3RoaXMuYmFzZVVybCwgX3RoaXMuY29yZSkuZmV0Y2gocmVxdWVzdCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBfdGhpcy5uZnQgPSB7XHJcbiAgICAgICAgICAgIGdldE5GVE1ldGFkYXRhOiBmdW5jdGlvbiAocmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBhcGlVdGlscy5PcGVyYXRpb25SZXNvbHZlcihjb21tb25Tb2xVdGlscy5nZXRORlRNZXRhZGF0YU9wZXJhdGlvbiwgX3RoaXMuYmFzZVVybCwgX3RoaXMuY29yZSkuZmV0Y2gocmVxdWVzdCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBfdGhpcy50b2tlbiA9IHtcclxuICAgICAgICAgICAgZ2V0VG9rZW5QcmljZTogZnVuY3Rpb24gKHJlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgYXBpVXRpbHMuT3BlcmF0aW9uVjNSZXNvbHZlcihjb21tb25Tb2xVdGlscy5HZXRUb2tlblByaWNlT3BlcmF0aW9uLCBfdGhpcy5iYXNlVXJsLCBfdGhpcy5jb3JlKS5mZXRjaChyZXF1ZXN0LCBudWxsKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBDbGllbnRTb2xBcGk7XHJcbn0oY29tbW9uQ29yZS5BcGlNb2R1bGUpKTtcblxudmFyIFNvbEFwaUNvbmZpZyA9IHtcclxuICAgIHNvbEFwaUJhc2VVcmw6IHtcclxuICAgICAgICBuYW1lOiAnc29sQXBpQmFzZVVybCcsXHJcbiAgICAgICAgZGVmYXVsdFZhbHVlOiAnaHR0cHM6Ly9zb2xhbmEtZ2F0ZXdheS5tb3JhbGlzLmlvJyxcclxuICAgIH0sXHJcbn07XG5cbnZhciBFdm1Tb2xBcGlDb25maWdTZXR1cCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEV2bVNvbEFwaUNvbmZpZ1NldHVwKCkge1xyXG4gICAgfVxyXG4gICAgRXZtU29sQXBpQ29uZmlnU2V0dXAucmVnaXN0ZXIgPSBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICAgICAgY29uZmlnLnJlZ2lzdGVyS2V5KFNvbEFwaUNvbmZpZy5zb2xBcGlCYXNlVXJsKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXZtU29sQXBpQ29uZmlnU2V0dXA7XHJcbn0oKSk7XG5cbnZhciBTb2xBcGkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoU29sQXBpLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU29sQXBpKGNvcmUpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgU29sQXBpLm1vZHVsZU5hbWUsIGNvcmUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmUuY29uZmlnLmdldChTb2xBcGlDb25maWcuc29sQXBpQmFzZVVybCk7IH0pIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBTb2xBcGkuY3JlYXRlID0gZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNvbEFwaShjb3JlICE9PSBudWxsICYmIGNvcmUgIT09IHZvaWQgMCA/IGNvcmUgOiBjb21tb25Db3JlLkNvcmVQcm92aWRlci5nZXREZWZhdWx0KCkpO1xyXG4gICAgfTtcclxuICAgIFNvbEFwaS5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgRXZtU29sQXBpQ29uZmlnU2V0dXAucmVnaXN0ZXIodGhpcy5jb3JlLmNvbmZpZyk7XHJcbiAgICB9O1xyXG4gICAgU29sQXBpLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBOb3RoaW5nXHJcbiAgICB9O1xyXG4gICAgU29sQXBpLm1vZHVsZU5hbWUgPSAnc29sQXBpJztcclxuICAgIHJldHVybiBTb2xBcGk7XHJcbn0oQ2xpZW50U29sQXBpKSk7XG5cbmV4cG9ydHMuU29sQXBpID0gU29sQXBpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/sol-api/lib/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@moralisweb3/streams/lib/cjs/index.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@moralisweb3/streams/lib/cjs/index.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar apiUtils = __webpack_require__(/*! @moralisweb3/api-utils */ \"(ssr)/./node_modules/@moralisweb3/api-utils/lib/cjs/index.cjs\");\nvar commonCore = __webpack_require__(/*! @moralisweb3/common-core */ \"(ssr)/./node_modules/@moralisweb3/common-core/lib/cjs/index.cjs\");\nvar commonStreamsUtils = __webpack_require__(/*! @moralisweb3/common-streams-utils */ \"(ssr)/./node_modules/@moralisweb3/common-streams-utils/lib/cjs/index.cjs\");\nvar ethereumjsUtil = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/ethereumjs-util/dist/index.js\");\nvar sha2 = __webpack_require__(/*! @ethersproject/sha2 */ \"(ssr)/./node_modules/@ethersproject/sha2/lib/index.js\");\nvar strings = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar bignumber = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar abi = __webpack_require__(/*! @ethersproject/abi */ \"(ssr)/./node_modules/@ethersproject/abi/lib/index.js\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nvar StreamNetwork;\r\n(function (StreamNetwork) {\r\n    StreamNetwork[\"APTOS\"] = \"aptos\";\r\n    StreamNetwork[\"EVM\"] = \"evm\";\r\n})(StreamNetwork || (StreamNetwork = {}));\n\nvar IncorrectNetworkError = /** @class */ (function (_super) {\r\n    __extends(IncorrectNetworkError, _super);\r\n    function IncorrectNetworkError(network) {\r\n        return _super.call(this, {\r\n            code: commonCore.StreamErrorCode.INCORRECT_NETWORK,\r\n            message: \"Incorrect network provided. Got \\\"\".concat(network, \"\\\", Valid values are: \").concat(Object.values(StreamNetwork)\r\n                .map(function (value) { return \"\\\"\".concat(value, \"\\\"\"); })\r\n                .join(', ')),\r\n        }) || this;\r\n    }\r\n    return IncorrectNetworkError;\r\n}(commonCore.MoralisStreamError));\n\nvar makeCreateAptosStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.createStreamAptosOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeCreateEvmStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.createStreamEvmOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeCreateStream = function (core, baseUrl) {\r\n    return (function (createStreamOptions) {\r\n        switch (createStreamOptions.networkType) {\r\n            case StreamNetwork.APTOS:\r\n                return makeCreateAptosStream(core, baseUrl, createStreamOptions);\r\n            case StreamNetwork.EVM:\r\n                return makeCreateEvmStream(core, baseUrl, createStreamOptions);\r\n            default:\r\n                if (createStreamOptions.networkType === undefined) {\r\n                    return makeCreateEvmStream(core, baseUrl, createStreamOptions);\r\n                }\r\n                throw new IncorrectNetworkError(createStreamOptions.networkType);\r\n        }\r\n    });\r\n};\n\nvar makeUpdateAptosStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.updateStreamAptosOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeUpdateEvmStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.updateStreamEvmOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeUpdateStream = function (core, baseUrl) {\r\n    return (function (updateStreamOptions) {\r\n        switch (updateStreamOptions.networkType) {\r\n            case StreamNetwork.APTOS:\r\n                return makeUpdateAptosStream(core, baseUrl, updateStreamOptions);\r\n            case StreamNetwork.EVM:\r\n                return makeUpdateEvmStream(core, baseUrl, updateStreamOptions);\r\n            default:\r\n                if (updateStreamOptions.networkType === undefined) {\r\n                    return makeUpdateEvmStream(core, baseUrl, updateStreamOptions);\r\n                }\r\n                throw new IncorrectNetworkError(updateStreamOptions.networkType);\r\n        }\r\n    });\r\n};\n\nvar makeDeleteAptosStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.deleteStreamAptosOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeDeleteEvmStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.deleteStreamEvmOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeDeleteStream = function (core, baseUrl) {\r\n    return (function (deleteStreamOptions) {\r\n        switch (deleteStreamOptions.networkType) {\r\n            case StreamNetwork.APTOS:\r\n                return makeDeleteAptosStream(core, baseUrl, deleteStreamOptions);\r\n            case StreamNetwork.EVM:\r\n                return makeDeleteEvmStream(core, baseUrl, deleteStreamOptions);\r\n            default:\r\n                if (deleteStreamOptions.networkType === undefined) {\r\n                    return makeDeleteEvmStream(core, baseUrl, deleteStreamOptions);\r\n                }\r\n                throw new IncorrectNetworkError(deleteStreamOptions.networkType);\r\n        }\r\n    });\r\n};\n\nvar makeGetAptosStream$1 = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.PaginatedOperationResolver(commonStreamsUtils.getStreamsAptosOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeGetEvmStream$1 = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.PaginatedOperationResolver(commonStreamsUtils.getStreamsEvmOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeGetStreams = function (core, baseUrl) {\r\n    return (function (getStreamsOptions) {\r\n        switch (getStreamsOptions.networkType) {\r\n            case StreamNetwork.APTOS:\r\n                return makeGetAptosStream$1(core, baseUrl, getStreamsOptions);\r\n            case StreamNetwork.EVM:\r\n                return makeGetEvmStream$1(core, baseUrl, getStreamsOptions);\r\n            default:\r\n                if (getStreamsOptions.networkType === undefined) {\r\n                    return makeGetEvmStream$1(core, baseUrl, getStreamsOptions);\r\n                }\r\n                throw new IncorrectNetworkError(getStreamsOptions.networkType);\r\n        }\r\n    });\r\n};\n\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\r\nvar isHexStrict = function (hex) {\r\n    return /^(-)?0x[0-9a-f]*$/i.test(hex);\r\n};\r\nvar sha3 = function (value) {\r\n    var bufferValue;\r\n    if (isHexStrict(value) && /^0x/i.test(value.toString())) {\r\n        bufferValue = ethereumjsUtil.toBuffer(value);\r\n    }\r\n    else {\r\n        // Assume value is an arbitrary string\r\n        bufferValue = Buffer.from(value, 'utf-8');\r\n    }\r\n    var returnValue = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak256(bufferValue));\r\n    if (returnValue === SHA3_NULL_S) {\r\n        return null;\r\n    }\r\n    return returnValue;\r\n};\n\nvar StreamsConfig = {\r\n    streamsSecret: {\r\n        name: 'streamsSecret',\r\n        defaultValue: null,\r\n    },\r\n};\n\nvar makeVerifySignature = function (config) {\r\n    return function (_a) {\r\n        var body = _a.body, signature = _a.signature;\r\n        var secret = config.get(StreamsConfig.streamsSecret);\r\n        if (!secret) {\r\n            secret = config.get(apiUtils.ApiUtilsConfig.apiKey);\r\n        }\r\n        if (!secret) {\r\n            throw new commonCore.MoralisStreamError({\r\n                code: commonCore.StreamErrorCode.GENERIC_STREAM_ERROR,\r\n                message: 'Unable to verify signature without an api key or streams secret',\r\n            });\r\n        }\r\n        var generatedSignature = sha3(JSON.stringify(body) + secret);\r\n        if (signature !== generatedSignature) {\r\n            throw new commonCore.MoralisStreamError({\r\n                code: commonCore.StreamErrorCode.INVALID_SIGNATURE,\r\n                message: 'Signature is not valid',\r\n            });\r\n        }\r\n        return true;\r\n    };\r\n};\n\nvar makeAddAddressAptosStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.addAddressAptosOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeAddAddressEvmStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.addAddressEvmOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeAddAddress = function (core, baseUrl) {\r\n    return (function (addAddressOptions) {\r\n        switch (addAddressOptions.networkType) {\r\n            case StreamNetwork.APTOS:\r\n                return makeAddAddressAptosStream(core, baseUrl, addAddressOptions);\r\n            case StreamNetwork.EVM:\r\n                return makeAddAddressEvmStream(core, baseUrl, addAddressOptions);\r\n            default:\r\n                if (addAddressOptions.networkType === undefined) {\r\n                    return makeAddAddressEvmStream(core, baseUrl, addAddressOptions);\r\n                }\r\n                throw new IncorrectNetworkError(addAddressOptions.networkType);\r\n        }\r\n    });\r\n};\n\nvar makeUpdateAptosStreamStatus = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.updateStreamStatusAptosOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeUpdateEvmStreamStatus = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.updateStreamStatusEvmOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeUpdateStreamStatus = function (core, baseUrl) {\r\n    return (function (updateStreamOptions) {\r\n        switch (updateStreamOptions.networkType) {\r\n            case StreamNetwork.APTOS:\r\n                return makeUpdateAptosStreamStatus(core, baseUrl, updateStreamOptions);\r\n            case StreamNetwork.EVM:\r\n                return makeUpdateEvmStreamStatus(core, baseUrl, updateStreamOptions);\r\n            default:\r\n                if (updateStreamOptions.networkType === undefined) {\r\n                    return makeUpdateEvmStreamStatus(core, baseUrl, updateStreamOptions);\r\n                }\r\n                throw new IncorrectNetworkError(updateStreamOptions.networkType);\r\n        }\r\n    });\r\n};\n\nvar hasAbis = function (webhookData) {\r\n    if (!webhookData.abi || webhookData.abi.length < 1) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nvar isWebhook = function (webhookData) {\r\n    if (typeof webhookData !== 'object' || webhookData === null || !('logs' in webhookData)) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\n\nvar CollectionNameBuilder = /** @class */ (function () {\r\n    function CollectionNameBuilder() {\r\n        this.cache = {};\r\n        this.cacheLimit = 256;\r\n    }\r\n    CollectionNameBuilder.prototype.build = function (tag) {\r\n        var result = this.cache[tag];\r\n        if (!result) {\r\n            result = this.process(tag);\r\n            if (this.cacheLimit > 0) {\r\n                // Simple anti DDOS protection.\r\n                this.cache[tag] = result;\r\n                this.cacheLimit--;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CollectionNameBuilder.prototype.process = function (tag) {\r\n        var parts = tag\r\n            .split(/[^a-zA-Z0-9_]/)\r\n            .filter(function (p) { return !!p; })\r\n            .map(function (p) {\r\n            return p.substring(0, 1).toUpperCase() + p.substring(1).toLowerCase();\r\n        });\r\n        if (parts.length < 1) {\r\n            throw new Error(\"Cannot build table name from value \\\"\".concat(tag, \"\\\"\"));\r\n        }\r\n        return parts.join('');\r\n    };\r\n    return CollectionNameBuilder;\r\n}());\n\nvar SimpleProcessor = /** @class */ (function () {\r\n    function SimpleProcessor(collectionNameBuilder, documentBuilder) {\r\n        this.collectionNameBuilder = collectionNameBuilder;\r\n        this.documentBuilder = documentBuilder;\r\n    }\r\n    SimpleProcessor.prototype.process = function (items, batch) {\r\n        var updates = [];\r\n        if (items) {\r\n            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\r\n                var item = items_1[_i];\r\n                var document_1 = this.documentBuilder(item, batch.block, batch.confirmed, batch.chainId);\r\n                updates.push({\r\n                    collectionName: this.collectionNameBuilder.build(batch.tag),\r\n                    document: document_1,\r\n                });\r\n            }\r\n        }\r\n        return updates;\r\n    };\r\n    return SimpleProcessor;\r\n}());\n\nvar Sha256 = /** @class */ (function () {\r\n    function Sha256() {\r\n    }\r\n    Sha256.hash = function (value) {\r\n        var bytes = strings.toUtf8Bytes(value);\r\n        return sha2.sha256(bytes);\r\n    };\r\n    return Sha256;\r\n}());\n\nvar LogRelatedId = /** @class */ (function () {\r\n    function LogRelatedId() {\r\n    }\r\n    LogRelatedId.create = function (chainId, transactionHash, logIndex) {\r\n        var safeTransactionHash = transactionHash.toLowerCase();\r\n        return Sha256.hash(\"\".concat(chainId, \";\").concat(safeTransactionHash, \";\").concat(logIndex));\r\n    };\r\n    return LogRelatedId;\r\n}());\n\nvar TriggerItemsBuilder = /** @class */ (function () {\r\n    function TriggerItemsBuilder() {\r\n    }\r\n    TriggerItemsBuilder.build = function (triggers) {\r\n        if (!triggers || triggers.length === 0) {\r\n            return undefined;\r\n        }\r\n        return triggers.map(function (trigger) { return ({\r\n            name: String(trigger.name),\r\n            value: convertValue(trigger.value),\r\n        }); });\r\n    };\r\n    return TriggerItemsBuilder;\r\n}());\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction convertValue(value) {\r\n    var type = typeof value;\r\n    if (type === 'string' || type === 'number' || type === 'boolean') {\r\n        return value;\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return value.map(convertValue);\r\n    }\r\n    return String(value);\r\n}\n\nvar Erc20TransferDocumentBuilder = /** @class */ (function () {\r\n    function Erc20TransferDocumentBuilder() {\r\n    }\r\n    Erc20TransferDocumentBuilder.build = function (transfer, block, confirmed, chainId) {\r\n        var chain = Number(chainId);\r\n        var document = {\r\n            id: LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),\r\n            transactionHash: transfer.transactionHash,\r\n            contract: transfer.contract,\r\n            logIndex: transfer.logIndex,\r\n            from: transfer.from,\r\n            to: transfer.to,\r\n            value: transfer.value,\r\n            tokenDecimals: parseInt(transfer.tokenDecimals, 10),\r\n            tokenName: transfer.tokenName,\r\n            tokenSymbol: transfer.tokenSymbol,\r\n            blockHash: block.hash,\r\n            blockTimestamp: parseInt(block.timestamp, 10),\r\n            blockNumber: parseInt(block.number, 10),\r\n            confirmed: confirmed,\r\n            chainId: chain,\r\n            triggers: TriggerItemsBuilder.build(transfer.triggers),\r\n        };\r\n        return document;\r\n    };\r\n    return Erc20TransferDocumentBuilder;\r\n}());\n\nvar Erc20TransfersProcessor = /** @class */ (function () {\r\n    function Erc20TransfersProcessor(collectionNameBuilder) {\r\n        this.collectionNameBuilder = collectionNameBuilder;\r\n        this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, Erc20TransferDocumentBuilder.build);\r\n    }\r\n    Erc20TransfersProcessor.prototype.process = function (batch) {\r\n        return this.simpleProcessor.process(batch.erc20Transfers, batch);\r\n    };\r\n    return Erc20TransfersProcessor;\r\n}());\n\nvar Erc20ApprovalDocumentBuilder = /** @class */ (function () {\r\n    function Erc20ApprovalDocumentBuilder() {\r\n    }\r\n    Erc20ApprovalDocumentBuilder.build = function (approval, block, confirmed, chainId) {\r\n        var chain = Number(chainId);\r\n        var document = {\r\n            id: LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),\r\n            transactionHash: approval.transactionHash,\r\n            contract: approval.contract,\r\n            logIndex: approval.logIndex,\r\n            owner: approval.owner,\r\n            spender: approval.spender,\r\n            value: approval.value,\r\n            tokenDecimals: parseInt(approval.tokenDecimals, 10),\r\n            tokenName: approval.tokenName,\r\n            tokenSymbol: approval.tokenSymbol,\r\n            blockHash: block.hash,\r\n            blockTimestamp: parseInt(block.timestamp, 10),\r\n            blockNumber: parseInt(block.number, 10),\r\n            confirmed: confirmed,\r\n            chainId: chain,\r\n            triggers: TriggerItemsBuilder.build(approval.triggers),\r\n        };\r\n        return document;\r\n    };\r\n    return Erc20ApprovalDocumentBuilder;\r\n}());\n\nvar Erc20ApprovalsProcessor = /** @class */ (function () {\r\n    function Erc20ApprovalsProcessor(collectionNameBuilder) {\r\n        this.collectionNameBuilder = collectionNameBuilder;\r\n        this.processor = new SimpleProcessor(this.collectionNameBuilder, Erc20ApprovalDocumentBuilder.build);\r\n    }\r\n    Erc20ApprovalsProcessor.prototype.process = function (batch) {\r\n        return this.processor.process(batch.erc20Approvals, batch);\r\n    };\r\n    return Erc20ApprovalsProcessor;\r\n}());\n\nvar TxRelatedId = /** @class */ (function () {\r\n    function TxRelatedId() {\r\n    }\r\n    TxRelatedId.create = function (chainId, transactionHash) {\r\n        var safeTransactionHash = transactionHash.toLowerCase();\r\n        return Sha256.hash(\"\".concat(chainId, \";\").concat(safeTransactionHash));\r\n    };\r\n    return TxRelatedId;\r\n}());\n\nvar InternalTxDocumentBuilder = /** @class */ (function () {\r\n    function InternalTxDocumentBuilder() {\r\n    }\r\n    InternalTxDocumentBuilder.build = function (tx, block, confirmed, chainId) {\r\n        var chain = Number(chainId);\r\n        return {\r\n            id: TxRelatedId.create(chain, tx.transactionHash),\r\n            hash: tx.transactionHash,\r\n            chainId: chain,\r\n            from: tx.from,\r\n            to: tx.to,\r\n            value: tx.value,\r\n            gas: parseInt(tx.gas || '0', 10),\r\n            blockHash: block.hash,\r\n            blockTimestamp: parseInt(block.timestamp, 10),\r\n            blockNumber: parseInt(block.number, 10),\r\n            confirmed: confirmed,\r\n        };\r\n    };\r\n    return InternalTxDocumentBuilder;\r\n}());\n\nvar InternalTxsProcessor = /** @class */ (function () {\r\n    function InternalTxsProcessor(collectionNameBuilder) {\r\n        this.collectionNameBuilder = collectionNameBuilder;\r\n        this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, InternalTxDocumentBuilder.build);\r\n    }\r\n    InternalTxsProcessor.prototype.process = function (batch) {\r\n        return this.simpleProcessor.process(batch.txsInternal, batch);\r\n    };\r\n    return InternalTxsProcessor;\r\n}());\n\nvar LogDocumentValueFormatter = /** @class */ (function () {\r\n    function LogDocumentValueFormatter() {\r\n    }\r\n    LogDocumentValueFormatter.format = function (param) {\r\n        switch (param.type) {\r\n            case 'string':\r\n                return param.value;\r\n            case 'address':\r\n                return param.value.toLowerCase();\r\n            default:\r\n                if (bignumber.BigNumber.isBigNumber(param.value)) {\r\n                    return param.value.toString();\r\n                }\r\n                return param.value.toString();\r\n        }\r\n    };\r\n    return LogDocumentValueFormatter;\r\n}());\n\nvar ParamNameResolver = /** @class */ (function () {\r\n    function ParamNameResolver(restrictedNames) {\r\n        this.restrictedNames = restrictedNames;\r\n        this.usedNames = [];\r\n    }\r\n    ParamNameResolver.prototype.iterate = function (object, callback) {\r\n        var _this = this;\r\n        // We need to always keep parameters in the same order\r\n        // because the RowParamNameResolver is order-sensitive.\r\n        var sortedNames = Object.keys(object).sort(function (a, b) { return a.localeCompare(b); });\r\n        sortedNames.forEach(function (name) {\r\n            var safeName = _this.resolve(name);\r\n            callback(safeName, object[name]);\r\n        });\r\n    };\r\n    ParamNameResolver.prototype.resolve = function (name) {\r\n        if (this.isUsed(name)) {\r\n            do {\r\n                name = \"_\".concat(name);\r\n            } while (this.isUsed(name));\r\n        }\r\n        this.usedNames.push(name);\r\n        return name;\r\n    };\r\n    ParamNameResolver.prototype.isUsed = function (name) {\r\n        return this.restrictedNames.includes(name) || this.usedNames.includes(name);\r\n    };\r\n    return ParamNameResolver;\r\n}());\n\nvar paramNames = [\r\n    'id',\r\n    'name',\r\n    'logIndex',\r\n    'transactionHash',\r\n    'address',\r\n    'blockHash',\r\n    'blockTimestamp',\r\n    'blockNumber',\r\n    'confirmed',\r\n    'chainId',\r\n    'triggers',\r\n];\r\nvar restrictedParamNames = __spreadArray(__spreadArray([], paramNames, true), [\r\n    // Some extra names\r\n    '_id',\r\n    'uniqueId',\r\n    'updatedAt',\r\n    'createdAt',\r\n    'user',\r\n    'userId',\r\n], false);\r\nvar LogDocumentBuilder = /** @class */ (function () {\r\n    function LogDocumentBuilder() {\r\n    }\r\n    LogDocumentBuilder.build = function (log, parsedLog, block, confirmed, chainId) {\r\n        var nameResolver = new ParamNameResolver(restrictedParamNames);\r\n        var chain = Number(chainId);\r\n        var document = {\r\n            id: LogRelatedId.create(chain, log.transactionHash, log.logIndex),\r\n            name: parsedLog.name,\r\n            logIndex: parseInt(log.logIndex, 10),\r\n            transactionHash: log.transactionHash,\r\n            address: log.address,\r\n            blockHash: block.hash,\r\n            blockTimestamp: parseInt(block.timestamp, 10),\r\n            blockNumber: parseInt(block.number, 10),\r\n            confirmed: confirmed,\r\n            chainId: chain,\r\n            triggers: TriggerItemsBuilder.build(log.triggers),\r\n        };\r\n        nameResolver.iterate(parsedLog.params, function (safeParamName, paramValue) {\r\n            document[safeParamName] = LogDocumentValueFormatter.format(paramValue);\r\n        });\r\n        return document;\r\n    };\r\n    return LogDocumentBuilder;\r\n}());\n\nvar LogParser = /** @class */ (function () {\r\n    function LogParser(abiItems) {\r\n        this.abiInterface = new abi.Interface(abiItems);\r\n    }\r\n    LogParser.prototype.read = function (log) {\r\n        // Solidity supports max 3 topics. https://docs.soliditylang.org/en/latest/contracts.html#events\r\n        var topics = [log.topic0, log.topic1, log.topic2, log.topic3].filter(function (t) { return t !== null; });\r\n        // Do not call the `this.abiInterface.parseLog()` method here! The @ethersproject/abi package (5.7.0) has a bug,\r\n        // that doesn't return `args` with named keys in a specific case. That problem doesn't occur when we call directly the decodeEventLog() method.\r\n        var eventFragment = this.abiInterface.getEvent(topics[0]);\r\n        var args = this.abiInterface.decodeEventLog(eventFragment, log.data, topics);\r\n        var params = {};\r\n        eventFragment.inputs.forEach(function (input, index) {\r\n            var type = input.type, name = input.name;\r\n            var value = args[index];\r\n            if (value instanceof abi.Indexed) {\r\n                value = value.hash;\r\n            }\r\n            params[name] = {\r\n                type: type,\r\n                value: value,\r\n            };\r\n        });\r\n        return {\r\n            name: eventFragment.name,\r\n            params: params,\r\n        };\r\n    };\r\n    return LogParser;\r\n}());\n\nvar LogsProcessor = /** @class */ (function () {\r\n    function LogsProcessor(collectionNameBuilder) {\r\n        this.collectionNameBuilder = collectionNameBuilder;\r\n    }\r\n    LogsProcessor.prototype.process = function (batch) {\r\n        var updates = [];\r\n        if (batch.abi.length < 1) {\r\n            return updates;\r\n        }\r\n        var logParser = new LogParser(batch.abi);\r\n        for (var _i = 0, _a = batch.logs; _i < _a.length; _i++) {\r\n            var log = _a[_i];\r\n            var logParams = logParser.read(log);\r\n            var document_1 = LogDocumentBuilder.build(log, logParams, batch.block, batch.confirmed, batch.chainId);\r\n            updates.push({\r\n                collectionName: this.collectionNameBuilder.build(batch.tag),\r\n                document: document_1,\r\n            });\r\n        }\r\n        return updates;\r\n    };\r\n    return LogsProcessor;\r\n}());\n\nvar NftTransferDocumentBuilder = /** @class */ (function () {\r\n    function NftTransferDocumentBuilder() {\r\n    }\r\n    NftTransferDocumentBuilder.build = function (transfer, block, confirmed, chainId) {\r\n        var chain = Number(chainId);\r\n        var document = {\r\n            id: LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),\r\n            transactionHash: transfer.transactionHash,\r\n            contract: transfer.contract,\r\n            logIndex: transfer.logIndex,\r\n            operator: transfer.operator,\r\n            from: transfer.from,\r\n            to: transfer.to,\r\n            tokenId: transfer.tokenId,\r\n            amount: transfer.amount,\r\n            tokenContractType: transfer.tokenContractType,\r\n            tokenName: transfer.tokenName,\r\n            tokenSymbol: transfer.tokenSymbol,\r\n            blockHash: block.hash,\r\n            blockTimestamp: parseInt(block.timestamp, 10),\r\n            blockNumber: parseInt(block.number, 10),\r\n            confirmed: confirmed,\r\n            chainId: chain,\r\n            triggers: TriggerItemsBuilder.build(transfer.triggers),\r\n        };\r\n        return document;\r\n    };\r\n    return NftTransferDocumentBuilder;\r\n}());\n\nvar NftTransfersProcessor = /** @class */ (function () {\r\n    function NftTransfersProcessor(collectionNameBuilder) {\r\n        this.collectionNameBuilder = collectionNameBuilder;\r\n        this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, NftTransferDocumentBuilder.build);\r\n    }\r\n    NftTransfersProcessor.prototype.process = function (batch) {\r\n        return this.simpleProcessor.process(batch.nftTransfers, batch);\r\n    };\r\n    return NftTransfersProcessor;\r\n}());\n\nvar NftApprovalDocumentBuilder = /** @class */ (function () {\r\n    function NftApprovalDocumentBuilder() {\r\n    }\r\n    NftApprovalDocumentBuilder.build = function (approval, block, confirmed, chainId) {\r\n        var chain = Number(chainId);\r\n        var document = {\r\n            id: LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),\r\n            transactionHash: approval.transactionHash,\r\n            contract: approval.contract,\r\n            logIndex: approval.logIndex,\r\n            operator: approval.operator,\r\n            account: approval.account,\r\n            approvedAll: approval.approvedAll,\r\n            tokenId: approval.tokenId,\r\n            tokenContractType: approval.tokenContractType,\r\n            tokenName: approval.tokenName,\r\n            tokenSymbol: approval.tokenSymbol,\r\n            blockHash: block.hash,\r\n            blockTimestamp: parseInt(block.timestamp, 10),\r\n            blockNumber: parseInt(block.number, 10),\r\n            confirmed: confirmed,\r\n            chainId: chain,\r\n        };\r\n        return document;\r\n    };\r\n    return NftApprovalDocumentBuilder;\r\n}());\n\nvar NftApprovalsProcessor = /** @class */ (function () {\r\n    function NftApprovalsProcessor(collectionNameBuilder) {\r\n        this.collectionNameBuilder = collectionNameBuilder;\r\n        this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, NftApprovalDocumentBuilder.build);\r\n    }\r\n    NftApprovalsProcessor.prototype.process = function (batch) {\r\n        return this.simpleProcessor.process(batch.nftTokenApprovals, batch);\r\n    };\r\n    return NftApprovalsProcessor;\r\n}());\n\nvar TxDocumentBuilder = /** @class */ (function () {\r\n    function TxDocumentBuilder() {\r\n    }\r\n    TxDocumentBuilder.build = function (tx, block, confirmed, chainId) {\r\n        var chain = Number(chainId);\r\n        return {\r\n            id: TxRelatedId.create(chain, tx.hash),\r\n            hash: tx.hash,\r\n            chainId: chain,\r\n            transactionIndex: parseInt(tx.transactionIndex, 10),\r\n            gas: parseInt(tx.gas, 10),\r\n            gasPrice: parseInt(tx.gasPrice, 10),\r\n            nonce: parseInt(tx.nonce, 10),\r\n            fromAddress: tx.fromAddress,\r\n            toAddress: tx.toAddress,\r\n            value: tx.value || '0',\r\n            input: tx.input,\r\n            type: parseInt(tx.type, 10),\r\n            receiptStatus: parseInt(tx.receiptStatus, 10),\r\n            receiptGasUsed: parseInt(tx.receiptGasUsed, 10),\r\n            receiptCumulativeGasUsed: parseInt(tx.receiptCumulativeGasUsed, 10),\r\n            blockHash: block.hash,\r\n            blockTimestamp: parseInt(block.timestamp, 10),\r\n            blockNumber: parseInt(block.number, 10),\r\n            confirmed: confirmed,\r\n            triggers: TriggerItemsBuilder.build(tx.triggers),\r\n        };\r\n    };\r\n    return TxDocumentBuilder;\r\n}());\n\nvar TxsProcessor = /** @class */ (function () {\r\n    function TxsProcessor(collectionNameBuilder) {\r\n        this.collectionNameBuilder = collectionNameBuilder;\r\n        this.processor = new SimpleProcessor(this.collectionNameBuilder, TxDocumentBuilder.build);\r\n    }\r\n    TxsProcessor.prototype.process = function (batch) {\r\n        return this.processor.process(batch.txs, batch);\r\n    };\r\n    return TxsProcessor;\r\n}());\n\nvar BatchProcessor = /** @class */ (function () {\r\n    function BatchProcessor(erc20ApprovalsProcessor, erc20TransfersProcessor, internalTxsProcessor, logsProcessor, nftApprovalsProcessor, nftTransfersProcessor, txsProcessor) {\r\n        this.erc20ApprovalsProcessor = erc20ApprovalsProcessor;\r\n        this.erc20TransfersProcessor = erc20TransfersProcessor;\r\n        this.internalTxsProcessor = internalTxsProcessor;\r\n        this.logsProcessor = logsProcessor;\r\n        this.nftApprovalsProcessor = nftApprovalsProcessor;\r\n        this.nftTransfersProcessor = nftTransfersProcessor;\r\n        this.txsProcessor = txsProcessor;\r\n    }\r\n    BatchProcessor.create = function () {\r\n        var nameBuilder = new CollectionNameBuilder();\r\n        return new BatchProcessor(new Erc20ApprovalsProcessor(nameBuilder), new Erc20TransfersProcessor(nameBuilder), new InternalTxsProcessor(nameBuilder), new LogsProcessor(nameBuilder), new NftApprovalsProcessor(nameBuilder), new NftTransfersProcessor(nameBuilder), new TxsProcessor(nameBuilder));\r\n    };\r\n    BatchProcessor.prototype.process = function (batch) {\r\n        var _this = this;\r\n        return {\r\n            erc20Approvals: function () { return _this.erc20ApprovalsProcessor.process(batch); },\r\n            erc20Transfers: function () { return _this.erc20TransfersProcessor.process(batch); },\r\n            internalTxs: function () { return _this.internalTxsProcessor.process(batch); },\r\n            logs: function () { return _this.logsProcessor.process(batch); },\r\n            nftApprovals: function () { return _this.nftApprovalsProcessor.process(batch); },\r\n            nftTransfers: function () { return _this.nftTransfersProcessor.process(batch); },\r\n            txs: function () { return _this.txsProcessor.process(batch); },\r\n        };\r\n    };\r\n    return BatchProcessor;\r\n}());\n\nvar parseLog = function (webhookData) {\r\n    if (!isWebhook(webhookData)) {\r\n        throw new commonCore.MoralisStreamError({\r\n            code: commonCore.StreamErrorCode.GENERIC_STREAM_ERROR,\r\n            message: 'Cannot decode the logs. No logs found in the webhook, or invalid webhook provided.',\r\n        });\r\n    }\r\n    if (!hasAbis(webhookData)) {\r\n        throw new commonCore.MoralisStreamError({\r\n            code: commonCore.StreamErrorCode.GENERIC_STREAM_ERROR,\r\n            message: 'Cannot decode the logs. No abis found in the provided webhook.',\r\n        });\r\n    }\r\n    var logs = webhookData.logs, abi = webhookData.abi;\r\n    var decodedLogs = [];\r\n    logs.forEach(function (currentLog) {\r\n        var params = new LogParser(abi).read(currentLog).params;\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        var decodedLog = {};\r\n        for (var key in params) {\r\n            if (Object.prototype.hasOwnProperty.call(params, key)) {\r\n                var element = params[key];\r\n                decodedLog[key] = element.value;\r\n            }\r\n        }\r\n        decodedLogs.push(decodedLog);\r\n    });\r\n    return decodedLogs;\r\n};\n\nvar makeGetAptosAddresses = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.PaginatedOperationResolver(commonStreamsUtils.getAddressesAptosOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeGetEvmAddresses = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.PaginatedOperationResolver(commonStreamsUtils.getAddressesEvmOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeGetAddresses = function (core, baseUrl) {\r\n    return (function (getAddressesOptions) {\r\n        switch (getAddressesOptions.networkType) {\r\n            case StreamNetwork.APTOS:\r\n                return makeGetAptosAddresses(core, baseUrl, getAddressesOptions);\r\n            case StreamNetwork.EVM:\r\n                return makeGetEvmAddresses(core, baseUrl, getAddressesOptions);\r\n            default:\r\n                if (getAddressesOptions.networkType === undefined) {\r\n                    return makeGetEvmAddresses(core, baseUrl, getAddressesOptions);\r\n                }\r\n                throw new IncorrectNetworkError(getAddressesOptions.networkType);\r\n        }\r\n    });\r\n};\n\nvar makeDeleteAddressAptosStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.deleteAddressAptosOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeDeleteAddressEvmStream = function (core, baseUrl, _a) {\r\n    _a.networkType; var options = __rest(_a, [\"networkType\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.deleteAddressEvmOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeDeleteAddress = function (core, baseUrl) {\r\n    return (function (deleteAddressOptions) {\r\n        switch (deleteAddressOptions.networkType) {\r\n            case StreamNetwork.APTOS:\r\n                return makeDeleteAddressAptosStream(core, baseUrl, deleteAddressOptions);\r\n            case StreamNetwork.EVM:\r\n                return makeDeleteAddressEvmStream(core, baseUrl, deleteAddressOptions);\r\n            default:\r\n                if (deleteAddressOptions.networkType === undefined) {\r\n                    return makeDeleteAddressEvmStream(core, baseUrl, deleteAddressOptions);\r\n                }\r\n                throw new IncorrectNetworkError(deleteAddressOptions.networkType);\r\n        }\r\n    });\r\n};\n\nvar makeGetAptosStream = function (core, baseUrl, _a) {\r\n    _a.networkType; _a.network; var options = __rest(_a, [\"networkType\", \"network\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.getStreamAptosOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeGetEvmStream = function (core, baseUrl, _a) {\r\n    _a.networkType; _a.network; var options = __rest(_a, [\"networkType\", \"network\"]);\r\n    return new apiUtils.OperationResolver(commonStreamsUtils.getStreamEvmOperation, baseUrl, core).fetch(options);\r\n};\r\nvar makeGetStreamById = function (core, baseUrl) {\r\n    return (function (getStreamOptions) {\r\n        // Backwards compatibility for the 'network' parameter\r\n        if (!getStreamOptions.networkType && getStreamOptions.network) {\r\n            getStreamOptions.networkType = getStreamOptions.network;\r\n        }\r\n        switch (getStreamOptions.networkType) {\r\n            case StreamNetwork.APTOS:\r\n                return makeGetAptosStream(core, baseUrl, getStreamOptions);\r\n            case StreamNetwork.EVM:\r\n                return makeGetEvmStream(core, baseUrl, getStreamOptions);\r\n            default:\r\n                if (getStreamOptions.networkType === undefined) {\r\n                    return makeGetEvmStream(core, baseUrl, getStreamOptions);\r\n                }\r\n                throw new IncorrectNetworkError(getStreamOptions.networkType);\r\n        }\r\n    });\r\n};\n\nvar StreamsConfigSetup = /** @class */ (function () {\r\n    function StreamsConfigSetup() {\r\n    }\r\n    StreamsConfigSetup.register = function (config) {\r\n        config.registerKey(StreamsConfig.streamsSecret);\r\n    };\r\n    return StreamsConfigSetup;\r\n}());\n\nvar BASE_URL = 'https://api.moralis-streams.com';\r\nvar Streams = /** @class */ (function (_super) {\r\n    __extends(Streams, _super);\r\n    function Streams(core) {\r\n        var _this = _super.call(this, Streams.moduleName, core, function () { return BASE_URL; }) || this;\r\n        _this.add = makeCreateStream(_this.core, BASE_URL);\r\n        _this.update = makeUpdateStream(_this.core, BASE_URL);\r\n        _this.delete = makeDeleteStream(_this.core, BASE_URL);\r\n        _this.getAll = makeGetStreams(_this.core, BASE_URL);\r\n        _this.getById = makeGetStreamById(_this.core, BASE_URL);\r\n        _this.updateStatus = makeUpdateStreamStatus(_this.core, BASE_URL);\r\n        _this.addAddress = makeAddAddress(_this.core, BASE_URL);\r\n        _this.getAddresses = makeGetAddresses(_this.core, BASE_URL);\r\n        _this.deleteAddress = makeDeleteAddress(_this.core, BASE_URL);\r\n        _this.getHistory = _this.createPaginatedFetcher(commonStreamsUtils.getHistoryOperation);\r\n        _this.getLogs = _this.createPaginatedFetcher(commonStreamsUtils.getLogsOperation);\r\n        _this.retry = _this.createFetcher(commonStreamsUtils.replayHistoryOperation);\r\n        _this._getStats = _this.createFetcher(commonStreamsUtils.getStatsOperation);\r\n        _this.getStats = function () { return _this._getStats({}); };\r\n        _this.getStatsById = _this.createFetcher(commonStreamsUtils.getStatsByIdOperation);\r\n        _this.setSettings = _this.createFetcher(commonStreamsUtils.setSettingsOperation);\r\n        _this._readSettings = _this.createFetcher(commonStreamsUtils.getSettingsOperation);\r\n        _this.readSettings = function () { return _this._readSettings({}); };\r\n        _this.verifySignature = function (options) { return makeVerifySignature(_this.core.config)(options); };\r\n        _this.parsedLogs = function (webhookData) { return parseLog(webhookData); };\r\n        return _this;\r\n    }\r\n    Streams.create = function (core) {\r\n        return new Streams(core !== null && core !== void 0 ? core : commonCore.CoreProvider.getDefault());\r\n    };\r\n    Streams.prototype.setup = function () {\r\n        StreamsConfigSetup.register(this.core.config);\r\n    };\r\n    Streams.prototype.start = function () {\r\n        // Nothing\r\n    };\r\n    Streams.prototype.createFetcher = function (operation) {\r\n        return new apiUtils.OperationResolver(operation, BASE_URL, this.core).fetch;\r\n    };\r\n    Streams.prototype.createPaginatedFetcher = function (operation) {\r\n        return new apiUtils.PaginatedOperationResolver(operation, BASE_URL, this.core).fetch;\r\n    };\r\n    Streams.moduleName = 'streams';\r\n    return Streams;\r\n}(commonCore.ApiModule));\n\nexports.BatchProcessor = BatchProcessor;\nexports.CollectionNameBuilder = CollectionNameBuilder;\nexports.Erc20ApprovalDocumentBuilder = Erc20ApprovalDocumentBuilder;\nexports.Erc20ApprovalsProcessor = Erc20ApprovalsProcessor;\nexports.Erc20TransferDocumentBuilder = Erc20TransferDocumentBuilder;\nexports.Erc20TransfersProcessor = Erc20TransfersProcessor;\nexports.InternalTxDocumentBuilder = InternalTxDocumentBuilder;\nexports.InternalTxsProcessor = InternalTxsProcessor;\nexports.LogDocumentBuilder = LogDocumentBuilder;\nexports.LogDocumentValueFormatter = LogDocumentValueFormatter;\nexports.LogParser = LogParser;\nexports.LogsProcessor = LogsProcessor;\nexports.NftApprovalDocumentBuilder = NftApprovalDocumentBuilder;\nexports.NftApprovalsProcessor = NftApprovalsProcessor;\nexports.NftTransferDocumentBuilder = NftTransferDocumentBuilder;\nexports.NftTransfersProcessor = NftTransfersProcessor;\nexports.ParamNameResolver = ParamNameResolver;\nexports.Streams = Streams;\nexports.TxDocumentBuilder = TxDocumentBuilder;\nexports.TxsProcessor = TxsProcessor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moralisweb3/streams/lib/cjs/index.cjs\n");

/***/ })

};
;